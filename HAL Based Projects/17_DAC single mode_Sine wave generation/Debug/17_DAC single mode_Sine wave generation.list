
17_DAC single mode_Sine wave generation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000283c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080029c4  080029c4  000129c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a04  08002a04  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a04  08002a04  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a04  08002a04  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a04  08002a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a08  08002a08  00012a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08002a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000020c  08002c18  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08002c18  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b940  00000000  00000000  0002027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e6b  00000000  00000000  0002bbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0002da30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009fa  00000000  00000000  0002e730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a16  00000000  00000000  0002f12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df27  00000000  00000000  00054b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ead21  00000000  00000000  00062a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035ec  00000000  00000000  0014d788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  00150d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000020c 	.word	0x2000020c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080029ac 	.word	0x080029ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000210 	.word	0x20000210
 80001c4:	080029ac 	.word	0x080029ac

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa52 	bl	8000676 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f823 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f911 	bl	80003fc <MX_GPIO_Init>
  MX_DMA_Init();
 80001da:	f000 f8f1 	bl	80003c0 <MX_DMA_Init>
  MX_DAC1_Init();
 80001de:	f000 f86f 	bl	80002c0 <MX_DAC1_Init>
  MX_TIM2_Init();
 80001e2:	f000 f89f 	bl	8000324 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)Wave_LUT, 128, DAC_ALIGN_12B_R);
 80001e6:	2300      	movs	r3, #0
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2380      	movs	r3, #128	; 0x80
 80001ec:	4a06      	ldr	r2, [pc, #24]	; (8000208 <main+0x40>)
 80001ee:	2100      	movs	r1, #0
 80001f0:	4806      	ldr	r0, [pc, #24]	; (800020c <main+0x44>)
 80001f2:	f000 fc0d 	bl	8000a10 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 80001f6:	4806      	ldr	r0, [pc, #24]	; (8000210 <main+0x48>)
 80001f8:	f002 f8be 	bl	8002378 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	DOR_val = DAC1->DOR1;
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <main+0x4c>)
 80001fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000200:	4a05      	ldr	r2, [pc, #20]	; (8000218 <main+0x50>)
 8000202:	6013      	str	r3, [r2, #0]
 8000204:	e7fa      	b.n	80001fc <main+0x34>
 8000206:	bf00      	nop
 8000208:	20000000 	.word	0x20000000
 800020c:	20000228 	.word	0x20000228
 8000210:	20000284 	.word	0x20000284
 8000214:	40007400 	.word	0x40007400
 8000218:	200002d0 	.word	0x200002d0

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b096      	sub	sp, #88	; 0x58
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0314 	add.w	r3, r7, #20
 8000226:	2244      	movs	r2, #68	; 0x44
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fb92 	bl	8002954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	463b      	mov	r3, r7
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800023e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000242:	f001 fa23 	bl	800168c <HAL_PWREx_ControlVoltageScaling>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800024c:	f000 f8ee 	bl	800042c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000250:	2310      	movs	r3, #16
 8000252:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000254:	2301      	movs	r3, #1
 8000256:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800025c:	2360      	movs	r3, #96	; 0x60
 800025e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000260:	2302      	movs	r3, #2
 8000262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000264:	2301      	movs	r3, #1
 8000266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000268:	2301      	movs	r3, #1
 800026a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800026c:	2328      	movs	r3, #40	; 0x28
 800026e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000270:	2307      	movs	r3, #7
 8000272:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000274:	2302      	movs	r3, #2
 8000276:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000278:	2302      	movs	r3, #2
 800027a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	4618      	mov	r0, r3
 8000282:	f001 fa59 	bl	8001738 <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800028c:	f000 f8ce 	bl	800042c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	230f      	movs	r3, #15
 8000292:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000294:	2303      	movs	r3, #3
 8000296:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002a4:	463b      	mov	r3, r7
 80002a6:	2104      	movs	r1, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 fe21 	bl	8001ef0 <HAL_RCC_ClockConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002b4:	f000 f8ba 	bl	800042c <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3758      	adds	r7, #88	; 0x58
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	; 0x28
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2224      	movs	r2, #36	; 0x24
 80002ca:	2100      	movs	r1, #0
 80002cc:	4618      	mov	r0, r3
 80002ce:	f002 fb41 	bl	8002954 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80002d2:	4b12      	ldr	r3, [pc, #72]	; (800031c <MX_DAC1_Init+0x5c>)
 80002d4:	4a12      	ldr	r2, [pc, #72]	; (8000320 <MX_DAC1_Init+0x60>)
 80002d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80002d8:	4810      	ldr	r0, [pc, #64]	; (800031c <MX_DAC1_Init+0x5c>)
 80002da:	f000 fb76 	bl	80009ca <HAL_DAC_Init>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80002e4:	f000 f8a2 	bl	800042c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80002e8:	2300      	movs	r3, #0
 80002ea:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80002ec:	2324      	movs	r3, #36	; 0x24
 80002ee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80002f4:	2300      	movs	r3, #0
 80002f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80002f8:	2300      	movs	r3, #0
 80002fa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	4619      	mov	r1, r3
 8000302:	4806      	ldr	r0, [pc, #24]	; (800031c <MX_DAC1_Init+0x5c>)
 8000304:	f000 fc6e 	bl	8000be4 <HAL_DAC_ConfigChannel>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800030e:	f000 f88d 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	3728      	adds	r7, #40	; 0x28
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000228 	.word	0x20000228
 8000320:	40007400 	.word	0x40007400

08000324 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b088      	sub	sp, #32
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000342:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_TIM2_Init+0x98>)
 8000344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000348:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_TIM2_Init+0x98>)
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_TIM2_Init+0x98>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MX_TIM2_Init+0x98>)
 8000358:	f44f 721c 	mov.w	r2, #624	; 0x270
 800035c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035e:	4b17      	ldr	r3, [pc, #92]	; (80003bc <MX_TIM2_Init+0x98>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_TIM2_Init+0x98>)
 8000366:	2200      	movs	r2, #0
 8000368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800036a:	4814      	ldr	r0, [pc, #80]	; (80003bc <MX_TIM2_Init+0x98>)
 800036c:	f001 ffac 	bl	80022c8 <HAL_TIM_Base_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000376:	f000 f859 	bl	800042c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4619      	mov	r1, r3
 8000386:	480d      	ldr	r0, [pc, #52]	; (80003bc <MX_TIM2_Init+0x98>)
 8000388:	f002 f85e 	bl	8002448 <HAL_TIM_ConfigClockSource>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000392:	f000 f84b 	bl	800042c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000396:	2320      	movs	r3, #32
 8000398:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4619      	mov	r1, r3
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <MX_TIM2_Init+0x98>)
 80003a4:	f002 fa4e 	bl	8002844 <HAL_TIMEx_MasterConfigSynchronization>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80003ae:	f000 f83d 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	3720      	adds	r7, #32
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000284 	.word	0x20000284

080003c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_DMA_Init+0x38>)
 80003c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <MX_DMA_Init+0x38>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6493      	str	r3, [r2, #72]	; 0x48
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_DMA_Init+0x38>)
 80003d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2100      	movs	r1, #0
 80003e2:	200d      	movs	r0, #13
 80003e4:	f000 fabb 	bl	800095e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80003e8:	200d      	movs	r0, #13
 80003ea:	f000 fad4 	bl	8000996 <HAL_NVIC_EnableIRQ>

}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_GPIO_Init+0x2c>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a08      	ldr	r2, [pc, #32]	; (8000428 <MX_GPIO_Init+0x2c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_GPIO_Init+0x2c>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	e7fe      	b.n	8000434 <Error_Handler+0x8>
	...

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <HAL_MspInit+0x44>)
 8000440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000442:	4a0e      	ldr	r2, [pc, #56]	; (800047c <HAL_MspInit+0x44>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6613      	str	r3, [r2, #96]	; 0x60
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <HAL_MspInit+0x44>)
 800044c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <HAL_MspInit+0x44>)
 8000458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800045a:	4a08      	ldr	r2, [pc, #32]	; (800047c <HAL_MspInit+0x44>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000460:	6593      	str	r3, [r2, #88]	; 0x58
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <HAL_MspInit+0x44>)
 8000464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08a      	sub	sp, #40	; 0x28
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a2b      	ldr	r2, [pc, #172]	; (800054c <HAL_DAC_MspInit+0xcc>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d150      	bne.n	8000544 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80004a2:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <HAL_DAC_MspInit+0xd0>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004a6:	4a2a      	ldr	r2, [pc, #168]	; (8000550 <HAL_DAC_MspInit+0xd0>)
 80004a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004ac:	6593      	str	r3, [r2, #88]	; 0x58
 80004ae:	4b28      	ldr	r3, [pc, #160]	; (8000550 <HAL_DAC_MspInit+0xd0>)
 80004b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80004b6:	613b      	str	r3, [r7, #16]
 80004b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b25      	ldr	r3, [pc, #148]	; (8000550 <HAL_DAC_MspInit+0xd0>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	4a24      	ldr	r2, [pc, #144]	; (8000550 <HAL_DAC_MspInit+0xd0>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c6:	4b22      	ldr	r3, [pc, #136]	; (8000550 <HAL_DAC_MspInit+0xd0>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004d2:	2310      	movs	r3, #16
 80004d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004d6:	2303      	movs	r3, #3
 80004d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	4619      	mov	r1, r3
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f000 ff18 	bl	800131c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80004ec:	4b19      	ldr	r3, [pc, #100]	; (8000554 <HAL_DAC_MspInit+0xd4>)
 80004ee:	4a1a      	ldr	r2, [pc, #104]	; (8000558 <HAL_DAC_MspInit+0xd8>)
 80004f0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80004f2:	4b18      	ldr	r3, [pc, #96]	; (8000554 <HAL_DAC_MspInit+0xd4>)
 80004f4:	2206      	movs	r2, #6
 80004f6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <HAL_DAC_MspInit+0xd4>)
 80004fa:	2210      	movs	r2, #16
 80004fc:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_DAC_MspInit+0xd4>)
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <HAL_DAC_MspInit+0xd4>)
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_DAC_MspInit+0xd4>)
 800050c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000510:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <HAL_DAC_MspInit+0xd4>)
 8000514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000518:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_DAC_MspInit+0xd4>)
 800051c:	2220      	movs	r2, #32
 800051e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_DAC_MspInit+0xd4>)
 8000522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000526:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000528:	480a      	ldr	r0, [pc, #40]	; (8000554 <HAL_DAC_MspInit+0xd4>)
 800052a:	f000 fcff 	bl	8000f2c <HAL_DMA_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000534:	f7ff ff7a 	bl	800042c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a06      	ldr	r2, [pc, #24]	; (8000554 <HAL_DAC_MspInit+0xd4>)
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	4a05      	ldr	r2, [pc, #20]	; (8000554 <HAL_DAC_MspInit+0xd4>)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000544:	bf00      	nop
 8000546:	3728      	adds	r7, #40	; 0x28
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40007400 	.word	0x40007400
 8000550:	40021000 	.word	0x40021000
 8000554:	2000023c 	.word	0x2000023c
 8000558:	40020030 	.word	0x40020030

0800055c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800056c:	d10b      	bne.n	8000586 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_TIM_Base_MspInit+0x38>)
 8000570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000572:	4a08      	ldr	r2, [pc, #32]	; (8000594 <HAL_TIM_Base_MspInit+0x38>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6593      	str	r3, [r2, #88]	; 0x58
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_TIM_Base_MspInit+0x38>)
 800057c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800059c:	e7fe      	b.n	800059c <NMI_Handler+0x4>

0800059e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <HardFault_Handler+0x4>

080005a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <MemManage_Handler+0x4>

080005aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e4:	f000 f89c 	bl	8000720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <DMA1_Channel3_IRQHandler+0x10>)
 80005f2:	f000 fdb3 	bl	800115c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000023c 	.word	0x2000023c

08000600 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <SystemInit+0x20>)
 8000606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800060a:	4a05      	ldr	r2, [pc, #20]	; (8000620 <SystemInit+0x20>)
 800060c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800065c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000628:	f7ff ffea 	bl	8000600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <LoopForever+0x6>)
  ldr r1, =_edata
 800062e:	490d      	ldr	r1, [pc, #52]	; (8000664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <LoopForever+0xe>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000644:	4c0a      	ldr	r4, [pc, #40]	; (8000670 <LoopForever+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000652:	f002 f987 	bl	8002964 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000656:	f7ff fdb7 	bl	80001c8 <main>

0800065a <LoopForever>:

LoopForever:
    b LoopForever
 800065a:	e7fe      	b.n	800065a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800065c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8000668:	08002a0c 	.word	0x08002a0c
  ldr r2, =_sbss
 800066c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8000670:	200002d8 	.word	0x200002d8

08000674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC1_2_IRQHandler>

08000676 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800067c:	2300      	movs	r3, #0
 800067e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000680:	2003      	movs	r0, #3
 8000682:	f000 f961 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000686:	200f      	movs	r0, #15
 8000688:	f000 f80e 	bl	80006a8 <HAL_InitTick>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	e001      	b.n	800069c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000698:	f7ff fece 	bl	8000438 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800069c:	79fb      	ldrb	r3, [r7, #7]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_InitTick+0x6c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d023      	beq.n	8000704 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_InitTick+0x70>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <HAL_InitTick+0x6c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f96d 	bl	80009b2 <HAL_SYSTICK_Config>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d10f      	bne.n	80006fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b0f      	cmp	r3, #15
 80006e2:	d809      	bhi.n	80006f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e4:	2200      	movs	r2, #0
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ec:	f000 f937 	bl	800095e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006f0:	4a0a      	ldr	r2, [pc, #40]	; (800071c <HAL_InitTick+0x74>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6013      	str	r3, [r2, #0]
 80006f6:	e007      	b.n	8000708 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006f8:	2301      	movs	r3, #1
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e004      	b.n	8000708 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e001      	b.n	8000708 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000208 	.word	0x20000208
 8000718:	20000200 	.word	0x20000200
 800071c:	20000204 	.word	0x20000204

08000720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_IncTick+0x20>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_IncTick+0x24>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4413      	add	r3, r2
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_IncTick+0x24>)
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000208 	.word	0x20000208
 8000744:	200002d4 	.word	0x200002d4

08000748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return uwTick;
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <HAL_GetTick+0x14>)
 800074e:	681b      	ldr	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	200002d4 	.word	0x200002d4

08000760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000768:	f7ff ffee 	bl	8000748 <HAL_GetTick>
 800076c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000778:	d005      	beq.n	8000786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_Delay+0x44>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4413      	add	r3, r2
 8000784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000786:	bf00      	nop
 8000788:	f7ff ffde 	bl	8000748 <HAL_GetTick>
 800078c:	4602      	mov	r2, r0
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	429a      	cmp	r2, r3
 8000796:	d8f7      	bhi.n	8000788 <HAL_Delay+0x28>
  {
  }
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000208 	.word	0x20000208

080007a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	60d3      	str	r3, [r2, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__NVIC_GetPriorityGrouping+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	f003 0307 	and.w	r3, r3, #7
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db0b      	blt.n	8000836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 021f 	and.w	r2, r3, #31
 8000824:	4907      	ldr	r1, [pc, #28]	; (8000844 <__NVIC_EnableIRQ+0x38>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	2001      	movs	r0, #1
 800082e:	fa00 f202 	lsl.w	r2, r0, r2
 8000832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0112      	lsls	r2, r2, #4
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	; (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0112      	lsls	r2, r2, #4
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	bf28      	it	cs
 80008ba:	2304      	movcs	r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b03      	subs	r3, #3
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43d9      	mvns	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	4313      	orrs	r3, r2
         );
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3724      	adds	r7, #36	; 0x24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f7ff ff8e 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff29 	bl	80007a8 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000970:	f7ff ff3e 	bl	80007f0 <__NVIC_GetPriorityGrouping>
 8000974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff ff8e 	bl	800089c <NVIC_EncodePriority>
 8000980:	4602      	mov	r2, r0
 8000982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff5d 	bl	8000848 <__NVIC_SetPriority>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff31 	bl	800080c <__NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ffa2 	bl	8000904 <SysTick_Config>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d101      	bne.n	80009dc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e014      	b.n	8000a06 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	791b      	ldrb	r3, [r3, #4]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d105      	bne.n	80009f2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff fd47 	bl	8000480 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2202      	movs	r2, #2
 80009f6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	795b      	ldrb	r3, [r3, #5]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d101      	bne.n	8000a2e <HAL_DAC_Start_DMA+0x1e>
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	e0ab      	b.n	8000b86 <HAL_DAC_Start_DMA+0x176>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2201      	movs	r2, #1
 8000a32:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2202      	movs	r2, #2
 8000a38:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d12f      	bne.n	8000aa0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	4a52      	ldr	r2, [pc, #328]	; (8000b90 <HAL_DAC_Start_DMA+0x180>)
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	4a51      	ldr	r2, [pc, #324]	; (8000b94 <HAL_DAC_Start_DMA+0x184>)
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	4a50      	ldr	r2, [pc, #320]	; (8000b98 <HAL_DAC_Start_DMA+0x188>)
 8000a56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a66:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	2b08      	cmp	r3, #8
 8000a6c:	d013      	beq.n	8000a96 <HAL_DAC_Start_DMA+0x86>
 8000a6e:	6a3b      	ldr	r3, [r7, #32]
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	d845      	bhi.n	8000b00 <HAL_DAC_Start_DMA+0xf0>
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_DAC_Start_DMA+0x72>
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d005      	beq.n	8000a8c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000a80:	e03e      	b.n	8000b00 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3308      	adds	r3, #8
 8000a88:	613b      	str	r3, [r7, #16]
        break;
 8000a8a:	e03c      	b.n	8000b06 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	330c      	adds	r3, #12
 8000a92:	613b      	str	r3, [r7, #16]
        break;
 8000a94:	e037      	b.n	8000b06 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	3310      	adds	r3, #16
 8000a9c:	613b      	str	r3, [r7, #16]
        break;
 8000a9e:	e032      	b.n	8000b06 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	4a3d      	ldr	r2, [pc, #244]	; (8000b9c <HAL_DAC_Start_DMA+0x18c>)
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4a3c      	ldr	r2, [pc, #240]	; (8000ba0 <HAL_DAC_Start_DMA+0x190>)
 8000aae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	4a3b      	ldr	r2, [pc, #236]	; (8000ba4 <HAL_DAC_Start_DMA+0x194>)
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ac6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
 8000aca:	2b08      	cmp	r3, #8
 8000acc:	d013      	beq.n	8000af6 <HAL_DAC_Start_DMA+0xe6>
 8000ace:	6a3b      	ldr	r3, [r7, #32]
 8000ad0:	2b08      	cmp	r3, #8
 8000ad2:	d817      	bhi.n	8000b04 <HAL_DAC_Start_DMA+0xf4>
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_DAC_Start_DMA+0xd2>
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d005      	beq.n	8000aec <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000ae0:	e010      	b.n	8000b04 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3314      	adds	r3, #20
 8000ae8:	613b      	str	r3, [r7, #16]
        break;
 8000aea:	e00c      	b.n	8000b06 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3318      	adds	r3, #24
 8000af2:	613b      	str	r3, [r7, #16]
        break;
 8000af4:	e007      	b.n	8000b06 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	331c      	adds	r3, #28
 8000afc:	613b      	str	r3, [r7, #16]
        break;
 8000afe:	e002      	b.n	8000b06 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000b00:	bf00      	nop
 8000b02:	e000      	b.n	8000b06 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000b04:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d111      	bne.n	8000b30 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b1a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	6898      	ldr	r0, [r3, #8]
 8000b20:	6879      	ldr	r1, [r7, #4]
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	f000 fab9 	bl	800109c <HAL_DMA_Start_IT>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	75fb      	strb	r3, [r7, #23]
 8000b2e:	e010      	b.n	8000b52 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000b3e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	68d8      	ldr	r0, [r3, #12]
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	f000 faa7 	bl	800109c <HAL_DMA_Start_IT>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2200      	movs	r2, #0
 8000b56:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000b58:	7dfb      	ldrb	r3, [r7, #23]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10c      	bne.n	8000b78 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	6819      	ldr	r1, [r3, #0]
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	430a      	orrs	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	e005      	b.n	8000b84 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	f043 0204 	orr.w	r2, r3, #4
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	08000e19 	.word	0x08000e19
 8000b94:	08000e3b 	.word	0x08000e3b
 8000b98:	08000e57 	.word	0x08000e57
 8000b9c:	08000ec1 	.word	0x08000ec1
 8000ba0:	08000ee3 	.word	0x08000ee3
 8000ba4:	08000eff 	.word	0x08000eff

08000ba8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	795b      	ldrb	r3, [r3, #5]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d101      	bne.n	8000c00 <HAL_DAC_ConfigChannel+0x1c>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e107      	b.n	8000e10 <HAL_DAC_ConfigChannel+0x22c>
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2201      	movs	r2, #1
 8000c04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2202      	movs	r2, #2
 8000c0a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d174      	bne.n	8000cfe <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000c14:	f7ff fd98 	bl	8000748 <HAL_GetTick>
 8000c18:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d134      	bne.n	8000c8a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000c20:	e011      	b.n	8000c46 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000c22:	f7ff fd91 	bl	8000748 <HAL_GetTick>
 8000c26:	4602      	mov	r2, r0
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d90a      	bls.n	8000c46 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	f043 0208 	orr.w	r2, r3, #8
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2203      	movs	r2, #3
 8000c40:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e0e4      	b.n	8000e10 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1e6      	bne.n	8000c22 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f7ff fd83 	bl	8000760 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	6992      	ldr	r2, [r2, #24]
 8000c62:	641a      	str	r2, [r3, #64]	; 0x40
 8000c64:	e01e      	b.n	8000ca4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000c66:	f7ff fd6f 	bl	8000748 <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d90a      	bls.n	8000c8a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	f043 0208 	orr.w	r2, r3, #8
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2203      	movs	r2, #3
 8000c84:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e0c2      	b.n	8000e10 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	dbe8      	blt.n	8000c66 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff fd63 	bl	8000760 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	6992      	ldr	r2, [r2, #24]
 8000ca2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f003 0310 	and.w	r3, r3, #16
 8000cb0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	ea02 0103 	and.w	r1, r2, r3
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	69da      	ldr	r2, [r3, #28]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	409a      	lsls	r2, r3
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0310 	and.w	r3, r3, #16
 8000cde:	21ff      	movs	r1, #255	; 0xff
 8000ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	ea02 0103 	and.w	r1, r2, r3
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	6a1a      	ldr	r2, [r3, #32]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f003 0310 	and.w	r3, r3, #16
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d11d      	bne.n	8000d42 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d0c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f003 0310 	and.w	r3, r3, #16
 8000d14:	221f      	movs	r2, #31
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d48:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	2207      	movs	r2, #7
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	431a      	orrs	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6819      	ldr	r1, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0310 	and.w	r3, r3, #16
 8000d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	400a      	ands	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6819      	ldr	r1, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	22c0      	movs	r2, #192	; 0xc0
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43da      	mvns	r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	400a      	ands	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2201      	movs	r2, #1
 8000e06:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3720      	adds	r7, #32
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f7ff febe 	bl	8000ba8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	711a      	strb	r2, [r3, #4]
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f7ff feb7 	bl	8000bbc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	f043 0204 	orr.w	r2, r3, #4
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f7ff fead 	bl	8000bd0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	711a      	strb	r2, [r3, #4]
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f7ff ffd8 	bl	8000e84 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	711a      	strb	r2, [r3, #4]
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f7ff ffd1 	bl	8000e98 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f043 0204 	orr.w	r2, r3, #4
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f7ff ffc7 	bl	8000eac <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2201      	movs	r2, #1
 8000f22:	711a      	strb	r2, [r3, #4]
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e098      	b.n	8001070 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b4d      	ldr	r3, [pc, #308]	; (800107c <HAL_DMA_Init+0x150>)
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d80f      	bhi.n	8000f6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b4b      	ldr	r3, [pc, #300]	; (8001080 <HAL_DMA_Init+0x154>)
 8000f52:	4413      	add	r3, r2
 8000f54:	4a4b      	ldr	r2, [pc, #300]	; (8001084 <HAL_DMA_Init+0x158>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	009a      	lsls	r2, r3, #2
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a48      	ldr	r2, [pc, #288]	; (8001088 <HAL_DMA_Init+0x15c>)
 8000f66:	641a      	str	r2, [r3, #64]	; 0x40
 8000f68:	e00e      	b.n	8000f88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b46      	ldr	r3, [pc, #280]	; (800108c <HAL_DMA_Init+0x160>)
 8000f72:	4413      	add	r3, r2
 8000f74:	4a43      	ldr	r2, [pc, #268]	; (8001084 <HAL_DMA_Init+0x158>)
 8000f76:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	009a      	lsls	r2, r3, #2
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a42      	ldr	r2, [pc, #264]	; (8001090 <HAL_DMA_Init+0x164>)
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fe2:	d039      	beq.n	8001058 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a27      	ldr	r2, [pc, #156]	; (8001088 <HAL_DMA_Init+0x15c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d11a      	bne.n	8001024 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <HAL_DMA_Init+0x168>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f003 031c 	and.w	r3, r3, #28
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	4924      	ldr	r1, [pc, #144]	; (8001094 <HAL_DMA_Init+0x168>)
 8001004:	4013      	ands	r3, r2
 8001006:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <HAL_DMA_Init+0x168>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6859      	ldr	r1, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001014:	f003 031c 	and.w	r3, r3, #28
 8001018:	fa01 f303 	lsl.w	r3, r1, r3
 800101c:	491d      	ldr	r1, [pc, #116]	; (8001094 <HAL_DMA_Init+0x168>)
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
 8001022:	e019      	b.n	8001058 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_DMA_Init+0x16c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	f003 031c 	and.w	r3, r3, #28
 8001030:	210f      	movs	r1, #15
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	4917      	ldr	r1, [pc, #92]	; (8001098 <HAL_DMA_Init+0x16c>)
 800103a:	4013      	ands	r3, r2
 800103c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_DMA_Init+0x16c>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6859      	ldr	r1, [r3, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f003 031c 	and.w	r3, r3, #28
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	4911      	ldr	r1, [pc, #68]	; (8001098 <HAL_DMA_Init+0x16c>)
 8001054:	4313      	orrs	r3, r2
 8001056:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40020407 	.word	0x40020407
 8001080:	bffdfff8 	.word	0xbffdfff8
 8001084:	cccccccd 	.word	0xcccccccd
 8001088:	40020000 	.word	0x40020000
 800108c:	bffdfbf8 	.word	0xbffdfbf8
 8001090:	40020400 	.word	0x40020400
 8001094:	400200a8 	.word	0x400200a8
 8001098:	400204a8 	.word	0x400204a8

0800109c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d101      	bne.n	80010bc <HAL_DMA_Start_IT+0x20>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e04b      	b.n	8001154 <HAL_DMA_Start_IT+0xb8>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d13a      	bne.n	8001146 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2202      	movs	r2, #2
 80010d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0201 	bic.w	r2, r2, #1
 80010ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f000 f8e0 	bl	80012ba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d008      	beq.n	8001114 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 020e 	orr.w	r2, r2, #14
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e00f      	b.n	8001134 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0204 	bic.w	r2, r2, #4
 8001122:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 020a 	orr.w	r2, r2, #10
 8001132:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0201 	orr.w	r2, r2, #1
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e005      	b.n	8001152 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800114e:	2302      	movs	r3, #2
 8001150:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001152:	7dfb      	ldrb	r3, [r7, #23]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f003 031c 	and.w	r3, r3, #28
 800117c:	2204      	movs	r2, #4
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d026      	beq.n	80011d6 <HAL_DMA_IRQHandler+0x7a>
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	2b00      	cmp	r3, #0
 8001190:	d021      	beq.n	80011d6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d107      	bne.n	80011b0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0204 	bic.w	r2, r2, #4
 80011ae:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b4:	f003 021c 	and.w	r2, r3, #28
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	2104      	movs	r1, #4
 80011be:	fa01 f202 	lsl.w	r2, r1, r2
 80011c2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d071      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80011d4:	e06c      	b.n	80012b0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f003 031c 	and.w	r3, r3, #28
 80011de:	2202      	movs	r2, #2
 80011e0:	409a      	lsls	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d02e      	beq.n	8001248 <HAL_DMA_IRQHandler+0xec>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d029      	beq.n	8001248 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10b      	bne.n	800121a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 020a 	bic.w	r2, r2, #10
 8001210:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f003 021c 	and.w	r2, r3, #28
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	2102      	movs	r1, #2
 8001228:	fa01 f202 	lsl.w	r2, r1, r2
 800122c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123a:	2b00      	cmp	r3, #0
 800123c:	d038      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001246:	e033      	b.n	80012b0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	f003 031c 	and.w	r3, r3, #28
 8001250:	2208      	movs	r2, #8
 8001252:	409a      	lsls	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4013      	ands	r3, r2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d02a      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x156>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d025      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 020e 	bic.w	r2, r2, #14
 8001274:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f003 021c 	and.w	r2, r3, #28
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	2101      	movs	r1, #1
 8001284:	fa01 f202 	lsl.w	r2, r1, r2
 8001288:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
}
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b085      	sub	sp, #20
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	f003 021c 	and.w	r2, r3, #28
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	2101      	movs	r1, #1
 80012d6:	fa01 f202 	lsl.w	r2, r1, r2
 80012da:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2b10      	cmp	r3, #16
 80012ea:	d108      	bne.n	80012fe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012fc:	e007      	b.n	800130e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	60da      	str	r2, [r3, #12]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e17f      	b.n	800162c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2101      	movs	r1, #1
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8171 	beq.w	8001626 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d005      	beq.n	800135c <HAL_GPIO_Init+0x40>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d130      	bne.n	80013be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001392:	2201      	movs	r2, #1
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	091b      	lsrs	r3, r3, #4
 80013a8:	f003 0201 	and.w	r2, r3, #1
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d118      	bne.n	80013fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013d0:	2201      	movs	r2, #1
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	08db      	lsrs	r3, r3, #3
 80013e6:	f003 0201 	and.w	r2, r3, #1
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b03      	cmp	r3, #3
 8001406:	d017      	beq.n	8001438 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d123      	bne.n	800148c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	08da      	lsrs	r2, r3, #3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3208      	adds	r2, #8
 800144c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	220f      	movs	r2, #15
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	6939      	ldr	r1, [r7, #16]
 8001488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0203 	and.w	r2, r3, #3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80ac 	beq.w	8001626 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	4b5f      	ldr	r3, [pc, #380]	; (800164c <HAL_GPIO_Init+0x330>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d2:	4a5e      	ldr	r2, [pc, #376]	; (800164c <HAL_GPIO_Init+0x330>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6613      	str	r3, [r2, #96]	; 0x60
 80014da:	4b5c      	ldr	r3, [pc, #368]	; (800164c <HAL_GPIO_Init+0x330>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014e6:	4a5a      	ldr	r2, [pc, #360]	; (8001650 <HAL_GPIO_Init+0x334>)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001510:	d025      	beq.n	800155e <HAL_GPIO_Init+0x242>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4f      	ldr	r2, [pc, #316]	; (8001654 <HAL_GPIO_Init+0x338>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d01f      	beq.n	800155a <HAL_GPIO_Init+0x23e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4e      	ldr	r2, [pc, #312]	; (8001658 <HAL_GPIO_Init+0x33c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0x23a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4d      	ldr	r2, [pc, #308]	; (800165c <HAL_GPIO_Init+0x340>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0x236>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4c      	ldr	r2, [pc, #304]	; (8001660 <HAL_GPIO_Init+0x344>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00d      	beq.n	800154e <HAL_GPIO_Init+0x232>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4b      	ldr	r2, [pc, #300]	; (8001664 <HAL_GPIO_Init+0x348>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x22e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4a      	ldr	r2, [pc, #296]	; (8001668 <HAL_GPIO_Init+0x34c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_GPIO_Init+0x22a>
 8001542:	2306      	movs	r3, #6
 8001544:	e00c      	b.n	8001560 <HAL_GPIO_Init+0x244>
 8001546:	2307      	movs	r3, #7
 8001548:	e00a      	b.n	8001560 <HAL_GPIO_Init+0x244>
 800154a:	2305      	movs	r3, #5
 800154c:	e008      	b.n	8001560 <HAL_GPIO_Init+0x244>
 800154e:	2304      	movs	r3, #4
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x244>
 8001552:	2303      	movs	r3, #3
 8001554:	e004      	b.n	8001560 <HAL_GPIO_Init+0x244>
 8001556:	2302      	movs	r3, #2
 8001558:	e002      	b.n	8001560 <HAL_GPIO_Init+0x244>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_GPIO_Init+0x244>
 800155e:	2300      	movs	r3, #0
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	f002 0203 	and.w	r2, r2, #3
 8001566:	0092      	lsls	r2, r2, #2
 8001568:	4093      	lsls	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001570:	4937      	ldr	r1, [pc, #220]	; (8001650 <HAL_GPIO_Init+0x334>)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800157e:	4b3b      	ldr	r3, [pc, #236]	; (800166c <HAL_GPIO_Init+0x350>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015a2:	4a32      	ldr	r2, [pc, #200]	; (800166c <HAL_GPIO_Init+0x350>)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015a8:	4b30      	ldr	r3, [pc, #192]	; (800166c <HAL_GPIO_Init+0x350>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_GPIO_Init+0x350>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_GPIO_Init+0x350>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_GPIO_Init+0x350>)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_GPIO_Init+0x350>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <HAL_GPIO_Init+0x350>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	f47f ae78 	bne.w	800132c <HAL_GPIO_Init+0x10>
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	40010000 	.word	0x40010000
 8001654:	48000400 	.word	0x48000400
 8001658:	48000800 	.word	0x48000800
 800165c:	48000c00 	.word	0x48000c00
 8001660:	48001000 	.word	0x48001000
 8001664:	48001400 	.word	0x48001400
 8001668:	48001800 	.word	0x48001800
 800166c:	40010400 	.word	0x40010400

08001670 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <HAL_PWREx_GetVoltageRange+0x18>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40007000 	.word	0x40007000

0800168c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800169a:	d130      	bne.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800169c:	4b23      	ldr	r3, [pc, #140]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a8:	d038      	beq.n	800171c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2232      	movs	r2, #50	; 0x32
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0c9b      	lsrs	r3, r3, #18
 80016cc:	3301      	adds	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d0:	e002      	b.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e4:	d102      	bne.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f2      	bne.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f8:	d110      	bne.n	800171c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e00f      	b.n	800171e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170a:	d007      	beq.n	800171c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40007000 	.word	0x40007000
 8001730:	20000200 	.word	0x20000200
 8001734:	431bde83 	.word	0x431bde83

08001738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e3ca      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174a:	4b97      	ldr	r3, [pc, #604]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001754:	4b94      	ldr	r3, [pc, #592]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80e4 	beq.w	8001934 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <HAL_RCC_OscConfig+0x4a>
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	2b0c      	cmp	r3, #12
 8001776:	f040 808b 	bne.w	8001890 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2b01      	cmp	r3, #1
 800177e:	f040 8087 	bne.w	8001890 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001782:	4b89      	ldr	r3, [pc, #548]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_RCC_OscConfig+0x62>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e3a2      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1a      	ldr	r2, [r3, #32]
 800179e:	4b82      	ldr	r3, [pc, #520]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <HAL_RCC_OscConfig+0x7c>
 80017aa:	4b7f      	ldr	r3, [pc, #508]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b2:	e005      	b.n	80017c0 <HAL_RCC_OscConfig+0x88>
 80017b4:	4b7c      	ldr	r3, [pc, #496]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d223      	bcs.n	800180c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fd1d 	bl	8002208 <RCC_SetFlashLatencyFromMSIRange>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e383      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d8:	4b73      	ldr	r3, [pc, #460]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a72      	ldr	r2, [pc, #456]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b70      	ldr	r3, [pc, #448]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	496d      	ldr	r1, [pc, #436]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f6:	4b6c      	ldr	r3, [pc, #432]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	4968      	ldr	r1, [pc, #416]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
 800180a:	e025      	b.n	8001858 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800180c:	4b66      	ldr	r3, [pc, #408]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a65      	ldr	r2, [pc, #404]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001812:	f043 0308 	orr.w	r3, r3, #8
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b63      	ldr	r3, [pc, #396]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4960      	ldr	r1, [pc, #384]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182a:	4b5f      	ldr	r3, [pc, #380]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	495b      	ldr	r1, [pc, #364]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800183a:	4313      	orrs	r3, r2
 800183c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fcdd 	bl	8002208 <RCC_SetFlashLatencyFromMSIRange>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e343      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001858:	f000 fc4a 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 800185c:	4602      	mov	r2, r0
 800185e:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	f003 030f 	and.w	r3, r3, #15
 8001868:	4950      	ldr	r1, [pc, #320]	; (80019ac <HAL_RCC_OscConfig+0x274>)
 800186a:	5ccb      	ldrb	r3, [r1, r3]
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
 8001874:	4a4e      	ldr	r2, [pc, #312]	; (80019b0 <HAL_RCC_OscConfig+0x278>)
 8001876:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001878:	4b4e      	ldr	r3, [pc, #312]	; (80019b4 <HAL_RCC_OscConfig+0x27c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe ff13 	bl	80006a8 <HAL_InitTick>
 8001882:	4603      	mov	r3, r0
 8001884:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d052      	beq.n	8001932 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	e327      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d032      	beq.n	80018fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001898:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a42      	ldr	r2, [pc, #264]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018a4:	f7fe ff50 	bl	8000748 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ac:	f7fe ff4c 	bl	8000748 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e310      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018be:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a36      	ldr	r2, [pc, #216]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4931      	ldr	r1, [pc, #196]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e8:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	492c      	ldr	r1, [pc, #176]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
 80018fc:	e01a      	b.n	8001934 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018fe:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800190a:	f7fe ff1d 	bl	8000748 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001912:	f7fe ff19 	bl	8000748 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e2dd      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x1da>
 8001930:	e000      	b.n	8001934 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001932:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d074      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2b08      	cmp	r3, #8
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x21a>
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b0c      	cmp	r3, #12
 800194a:	d10e      	bne.n	800196a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d10b      	bne.n	800196a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d064      	beq.n	8001a28 <HAL_RCC_OscConfig+0x2f0>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d160      	bne.n	8001a28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e2ba      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x24a>
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800197a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e026      	b.n	80019d0 <HAL_RCC_OscConfig+0x298>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800198a:	d115      	bne.n	80019b8 <HAL_RCC_OscConfig+0x280>
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001992:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a02      	ldr	r2, [pc, #8]	; (80019a8 <HAL_RCC_OscConfig+0x270>)
 800199e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e014      	b.n	80019d0 <HAL_RCC_OscConfig+0x298>
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	080029c4 	.word	0x080029c4
 80019b0:	20000200 	.word	0x20000200
 80019b4:	20000204 	.word	0x20000204
 80019b8:	4ba0      	ldr	r3, [pc, #640]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a9f      	ldr	r2, [pc, #636]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b9d      	ldr	r3, [pc, #628]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a9c      	ldr	r2, [pc, #624]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d013      	beq.n	8001a00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7fe feb6 	bl	8000748 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e0:	f7fe feb2 	bl	8000748 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	; 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e276      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f2:	4b92      	ldr	r3, [pc, #584]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x2a8>
 80019fe:	e014      	b.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7fe fea2 	bl	8000748 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7fe fe9e 	bl	8000748 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e262      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1a:	4b88      	ldr	r3, [pc, #544]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x2d0>
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d060      	beq.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_OscConfig+0x310>
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d119      	bne.n	8001a76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d116      	bne.n	8001a76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a48:	4b7c      	ldr	r3, [pc, #496]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_OscConfig+0x328>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e23f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a60:	4b76      	ldr	r3, [pc, #472]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	061b      	lsls	r3, r3, #24
 8001a6e:	4973      	ldr	r1, [pc, #460]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a74:	e040      	b.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d023      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7e:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a6e      	ldr	r2, [pc, #440]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7fe fe5d 	bl	8000748 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a92:	f7fe fe59 	bl	8000748 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e21d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa4:	4b65      	ldr	r3, [pc, #404]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b62      	ldr	r3, [pc, #392]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	061b      	lsls	r3, r3, #24
 8001abe:	495f      	ldr	r1, [pc, #380]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
 8001ac4:	e018      	b.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a5c      	ldr	r2, [pc, #368]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7fe fe39 	bl	8000748 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ada:	f7fe fe35 	bl	8000748 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e1f9      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d03c      	beq.n	8001b7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d01c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b12:	4a4a      	ldr	r2, [pc, #296]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7fe fe14 	bl	8000748 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b24:	f7fe fe10 	bl	8000748 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1d4      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ef      	beq.n	8001b24 <HAL_RCC_OscConfig+0x3ec>
 8001b44:	e01b      	b.n	8001b7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4c:	4a3b      	ldr	r2, [pc, #236]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b56:	f7fe fdf7 	bl	8000748 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5e:	f7fe fdf3 	bl	8000748 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e1b7      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1ef      	bne.n	8001b5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 80a6 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10d      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	4a26      	ldr	r2, [pc, #152]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HAL_RCC_OscConfig+0x508>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d118      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <HAL_RCC_OscConfig+0x508>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_RCC_OscConfig+0x508>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd0:	f7fe fdba 	bl	8000748 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd8:	f7fe fdb6 	bl	8000748 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e17a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_RCC_OscConfig+0x508>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d108      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4d8>
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c0e:	e029      	b.n	8001c64 <HAL_RCC_OscConfig+0x52c>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d115      	bne.n	8001c44 <HAL_RCC_OscConfig+0x50c>
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1e:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2e:	4a03      	ldr	r2, [pc, #12]	; (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c38:	e014      	b.n	8001c64 <HAL_RCC_OscConfig+0x52c>
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40007000 	.word	0x40007000
 8001c44:	4b9c      	ldr	r3, [pc, #624]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4a:	4a9b      	ldr	r2, [pc, #620]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c54:	4b98      	ldr	r3, [pc, #608]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	4a97      	ldr	r2, [pc, #604]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001c5c:	f023 0304 	bic.w	r3, r3, #4
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d016      	beq.n	8001c9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6c:	f7fe fd6c 	bl	8000748 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c74:	f7fe fd68 	bl	8000748 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e12a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8a:	4b8b      	ldr	r3, [pc, #556]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ed      	beq.n	8001c74 <HAL_RCC_OscConfig+0x53c>
 8001c98:	e015      	b.n	8001cc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7fe fd55 	bl	8000748 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7fe fd51 	bl	8000748 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e113      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb8:	4b7f      	ldr	r3, [pc, #508]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1ed      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cc6:	7ffb      	ldrb	r3, [r7, #31]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d105      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ccc:	4b7a      	ldr	r3, [pc, #488]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	4a79      	ldr	r2, [pc, #484]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80fe 	beq.w	8001ede <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	f040 80d0 	bne.w	8001e8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cec:	4b72      	ldr	r3, [pc, #456]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d130      	bne.n	8001d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d127      	bne.n	8001d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d11f      	bne.n	8001d62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d2c:	2a07      	cmp	r2, #7
 8001d2e:	bf14      	ite	ne
 8001d30:	2201      	movne	r2, #1
 8001d32:	2200      	moveq	r2, #0
 8001d34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d113      	bne.n	8001d62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	085b      	lsrs	r3, r3, #1
 8001d46:	3b01      	subs	r3, #1
 8001d48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d109      	bne.n	8001d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	085b      	lsrs	r3, r3, #1
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d06e      	beq.n	8001e40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b0c      	cmp	r3, #12
 8001d66:	d069      	beq.n	8001e3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d68:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0ad      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d84:	4b4c      	ldr	r3, [pc, #304]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a4b      	ldr	r2, [pc, #300]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d90:	f7fe fcda 	bl	8000748 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7fe fcd6 	bl	8000748 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e09a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001daa:	4b43      	ldr	r3, [pc, #268]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db6:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	4b40      	ldr	r3, [pc, #256]	; (8001ebc <HAL_RCC_OscConfig+0x784>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dc6:	3a01      	subs	r2, #1
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dd0:	0212      	lsls	r2, r2, #8
 8001dd2:	4311      	orrs	r1, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dd8:	0852      	lsrs	r2, r2, #1
 8001dda:	3a01      	subs	r2, #1
 8001ddc:	0552      	lsls	r2, r2, #21
 8001dde:	4311      	orrs	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001de4:	0852      	lsrs	r2, r2, #1
 8001de6:	3a01      	subs	r2, #1
 8001de8:	0652      	lsls	r2, r2, #25
 8001dea:	4311      	orrs	r1, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001df0:	0912      	lsrs	r2, r2, #4
 8001df2:	0452      	lsls	r2, r2, #17
 8001df4:	430a      	orrs	r2, r1
 8001df6:	4930      	ldr	r1, [pc, #192]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a2d      	ldr	r2, [pc, #180]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e08:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e14:	f7fe fc98 	bl	8000748 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7fe fc94 	bl	8000748 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e058      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2e:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e3a:	e050      	b.n	8001ede <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e04f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e40:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d148      	bne.n	8001ede <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a19      	ldr	r2, [pc, #100]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e64:	f7fe fc70 	bl	8000748 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe fc6c 	bl	8000748 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e030      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x734>
 8001e8a:	e028      	b.n	8001ede <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d023      	beq.n	8001eda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7fe fc53 	bl	8000748 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea4:	e00c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7fe fc4f 	bl	8000748 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d905      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e013      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_OscConfig+0x7b0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ec      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_RCC_OscConfig+0x7b0>)
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	4905      	ldr	r1, [pc, #20]	; (8001ee8 <HAL_RCC_OscConfig+0x7b0>)
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_RCC_OscConfig+0x7b4>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60cb      	str	r3, [r1, #12]
 8001ed8:	e001      	b.n	8001ede <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	feeefffc 	.word	0xfeeefffc

08001ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0e7      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	4b75      	ldr	r3, [pc, #468]	; (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d910      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b72      	ldr	r3, [pc, #456]	; (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 0207 	bic.w	r2, r3, #7
 8001f1a:	4970      	ldr	r1, [pc, #448]	; (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b6e      	ldr	r3, [pc, #440]	; (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0cf      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d010      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d908      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4960      	ldr	r1, [pc, #384]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d04c      	beq.n	8002008 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f76:	4b5a      	ldr	r3, [pc, #360]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d121      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0a6      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8e:	4b54      	ldr	r3, [pc, #336]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d115      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e09a      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa6:	4b4e      	ldr	r3, [pc, #312]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e08e      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e086      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f023 0203 	bic.w	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4943      	ldr	r1, [pc, #268]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd8:	f7fe fbb6 	bl	8000748 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7fe fbb2 	bl	8000748 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e06e      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 020c 	and.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d1eb      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d010      	beq.n	8002036 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002020:	429a      	cmp	r2, r3
 8002022:	d208      	bcs.n	8002036 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002024:	4b2e      	ldr	r3, [pc, #184]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	492b      	ldr	r1, [pc, #172]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002036:	4b29      	ldr	r3, [pc, #164]	; (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d210      	bcs.n	8002066 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 0207 	bic.w	r2, r3, #7
 800204c:	4923      	ldr	r1, [pc, #140]	; (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d001      	beq.n	8002066 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e036      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	d008      	beq.n	8002084 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002072:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	4918      	ldr	r1, [pc, #96]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	4313      	orrs	r3, r2
 8002082:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d009      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4910      	ldr	r1, [pc, #64]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020a4:	f000 f824 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	490b      	ldr	r1, [pc, #44]	; (80020e4 <HAL_RCC_ClockConfig+0x1f4>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
 80020c0:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 80020c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_RCC_ClockConfig+0x1fc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe faed 	bl	80006a8 <HAL_InitTick>
 80020ce:	4603      	mov	r3, r0
 80020d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80020d2:	7afb      	ldrb	r3, [r7, #11]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40021000 	.word	0x40021000
 80020e4:	080029c4 	.word	0x080029c4
 80020e8:	20000200 	.word	0x20000200
 80020ec:	20000204 	.word	0x20000204

080020f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fe:	4b3e      	ldr	r3, [pc, #248]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002108:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x34>
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d121      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d11e      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002124:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d107      	bne.n	8002140 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002130:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e005      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002140:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800214c:	4a2b      	ldr	r2, [pc, #172]	; (80021fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10d      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b04      	cmp	r3, #4
 8002166:	d102      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <HAL_RCC_GetSysClockFreq+0x110>)
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	e004      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d101      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_RCC_GetSysClockFreq+0x114>)
 8002176:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d134      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800217e:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d003      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0xa6>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d003      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0xac>
 8002194:	e005      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002196:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <HAL_RCC_GetSysClockFreq+0x110>)
 8002198:	617b      	str	r3, [r7, #20]
      break;
 800219a:	e005      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_GetSysClockFreq+0x114>)
 800219e:	617b      	str	r3, [r7, #20]
      break;
 80021a0:	e002      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	617b      	str	r3, [r7, #20]
      break;
 80021a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	3301      	adds	r3, #1
 80021b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	fb03 f202 	mul.w	r2, r3, r2
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	0e5b      	lsrs	r3, r3, #25
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	3301      	adds	r3, #1
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021e8:	69bb      	ldr	r3, [r7, #24]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	080029d4 	.word	0x080029d4
 8002200:	00f42400 	.word	0x00f42400
 8002204:	007a1200 	.word	0x007a1200

08002208 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002210:	2300      	movs	r3, #0
 8002212:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002220:	f7ff fa26 	bl	8001670 <HAL_PWREx_GetVoltageRange>
 8002224:	6178      	str	r0, [r7, #20]
 8002226:	e014      	b.n	8002252 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002232:	6593      	str	r3, [r2, #88]	; 0x58
 8002234:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002240:	f7ff fa16 	bl	8001670 <HAL_PWREx_GetVoltageRange>
 8002244:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002250:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002258:	d10b      	bne.n	8002272 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b80      	cmp	r3, #128	; 0x80
 800225e:	d919      	bls.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2ba0      	cmp	r3, #160	; 0xa0
 8002264:	d902      	bls.n	800226c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002266:	2302      	movs	r3, #2
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	e013      	b.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800226c:	2301      	movs	r3, #1
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	e010      	b.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b80      	cmp	r3, #128	; 0x80
 8002276:	d902      	bls.n	800227e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002278:	2303      	movs	r3, #3
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	e00a      	b.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d102      	bne.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002284:	2302      	movs	r3, #2
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	e004      	b.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b70      	cmp	r3, #112	; 0x70
 800228e:	d101      	bne.n	8002294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002290:	2301      	movs	r3, #1
 8002292:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f023 0207 	bic.w	r2, r3, #7
 800229c:	4909      	ldr	r1, [pc, #36]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022a4:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d001      	beq.n	80022b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40022000 	.word	0x40022000

080022c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e049      	b.n	800236e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe f934 	bl	800055c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3304      	adds	r3, #4
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f000 f968 	bl	80025dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d001      	beq.n	8002390 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e047      	b.n	8002420 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a23      	ldr	r2, [pc, #140]	; (800242c <HAL_TIM_Base_Start+0xb4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01d      	beq.n	80023de <HAL_TIM_Base_Start+0x66>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023aa:	d018      	beq.n	80023de <HAL_TIM_Base_Start+0x66>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1f      	ldr	r2, [pc, #124]	; (8002430 <HAL_TIM_Base_Start+0xb8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_TIM_Base_Start+0x66>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a1e      	ldr	r2, [pc, #120]	; (8002434 <HAL_TIM_Base_Start+0xbc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00e      	beq.n	80023de <HAL_TIM_Base_Start+0x66>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <HAL_TIM_Base_Start+0xc0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d009      	beq.n	80023de <HAL_TIM_Base_Start+0x66>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1b      	ldr	r2, [pc, #108]	; (800243c <HAL_TIM_Base_Start+0xc4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d004      	beq.n	80023de <HAL_TIM_Base_Start+0x66>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a19      	ldr	r2, [pc, #100]	; (8002440 <HAL_TIM_Base_Start+0xc8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d115      	bne.n	800240a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_TIM_Base_Start+0xcc>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b06      	cmp	r3, #6
 80023ee:	d015      	beq.n	800241c <HAL_TIM_Base_Start+0xa4>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f6:	d011      	beq.n	800241c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002408:	e008      	b.n	800241c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0201 	orr.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	e000      	b.n	800241e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	40012c00 	.word	0x40012c00
 8002430:	40000400 	.word	0x40000400
 8002434:	40000800 	.word	0x40000800
 8002438:	40000c00 	.word	0x40000c00
 800243c:	40013400 	.word	0x40013400
 8002440:	40014000 	.word	0x40014000
 8002444:	00010007 	.word	0x00010007

08002448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_TIM_ConfigClockSource+0x1c>
 8002460:	2302      	movs	r3, #2
 8002462:	e0b6      	b.n	80025d2 <HAL_TIM_ConfigClockSource+0x18a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002482:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800248e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a0:	d03e      	beq.n	8002520 <HAL_TIM_ConfigClockSource+0xd8>
 80024a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a6:	f200 8087 	bhi.w	80025b8 <HAL_TIM_ConfigClockSource+0x170>
 80024aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ae:	f000 8086 	beq.w	80025be <HAL_TIM_ConfigClockSource+0x176>
 80024b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b6:	d87f      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x170>
 80024b8:	2b70      	cmp	r3, #112	; 0x70
 80024ba:	d01a      	beq.n	80024f2 <HAL_TIM_ConfigClockSource+0xaa>
 80024bc:	2b70      	cmp	r3, #112	; 0x70
 80024be:	d87b      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x170>
 80024c0:	2b60      	cmp	r3, #96	; 0x60
 80024c2:	d050      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x11e>
 80024c4:	2b60      	cmp	r3, #96	; 0x60
 80024c6:	d877      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x170>
 80024c8:	2b50      	cmp	r3, #80	; 0x50
 80024ca:	d03c      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0xfe>
 80024cc:	2b50      	cmp	r3, #80	; 0x50
 80024ce:	d873      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x170>
 80024d0:	2b40      	cmp	r3, #64	; 0x40
 80024d2:	d058      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0x13e>
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d86f      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x170>
 80024d8:	2b30      	cmp	r3, #48	; 0x30
 80024da:	d064      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x15e>
 80024dc:	2b30      	cmp	r3, #48	; 0x30
 80024de:	d86b      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x170>
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d060      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x15e>
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d867      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x170>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d05c      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x15e>
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d05a      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x15e>
 80024f0:	e062      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002502:	f000 f97f 	bl	8002804 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002514:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	609a      	str	r2, [r3, #8]
      break;
 800251e:	e04f      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002530:	f000 f968 	bl	8002804 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002542:	609a      	str	r2, [r3, #8]
      break;
 8002544:	e03c      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002552:	461a      	mov	r2, r3
 8002554:	f000 f8dc 	bl	8002710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2150      	movs	r1, #80	; 0x50
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f935 	bl	80027ce <TIM_ITRx_SetConfig>
      break;
 8002564:	e02c      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002572:	461a      	mov	r2, r3
 8002574:	f000 f8fb 	bl	800276e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2160      	movs	r1, #96	; 0x60
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f925 	bl	80027ce <TIM_ITRx_SetConfig>
      break;
 8002584:	e01c      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002592:	461a      	mov	r2, r3
 8002594:	f000 f8bc 	bl	8002710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2140      	movs	r1, #64	; 0x40
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f915 	bl	80027ce <TIM_ITRx_SetConfig>
      break;
 80025a4:	e00c      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f000 f90c 	bl	80027ce <TIM_ITRx_SetConfig>
      break;
 80025b6:	e003      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      break;
 80025bc:	e000      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80025be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a40      	ldr	r2, [pc, #256]	; (80026f0 <TIM_Base_SetConfig+0x114>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <TIM_Base_SetConfig+0x40>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fa:	d00f      	beq.n	800261c <TIM_Base_SetConfig+0x40>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a3d      	ldr	r2, [pc, #244]	; (80026f4 <TIM_Base_SetConfig+0x118>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00b      	beq.n	800261c <TIM_Base_SetConfig+0x40>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a3c      	ldr	r2, [pc, #240]	; (80026f8 <TIM_Base_SetConfig+0x11c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <TIM_Base_SetConfig+0x40>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a3b      	ldr	r2, [pc, #236]	; (80026fc <TIM_Base_SetConfig+0x120>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d003      	beq.n	800261c <TIM_Base_SetConfig+0x40>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a3a      	ldr	r2, [pc, #232]	; (8002700 <TIM_Base_SetConfig+0x124>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d108      	bne.n	800262e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a2f      	ldr	r2, [pc, #188]	; (80026f0 <TIM_Base_SetConfig+0x114>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01f      	beq.n	8002676 <TIM_Base_SetConfig+0x9a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263c:	d01b      	beq.n	8002676 <TIM_Base_SetConfig+0x9a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a2c      	ldr	r2, [pc, #176]	; (80026f4 <TIM_Base_SetConfig+0x118>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d017      	beq.n	8002676 <TIM_Base_SetConfig+0x9a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a2b      	ldr	r2, [pc, #172]	; (80026f8 <TIM_Base_SetConfig+0x11c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <TIM_Base_SetConfig+0x9a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a2a      	ldr	r2, [pc, #168]	; (80026fc <TIM_Base_SetConfig+0x120>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00f      	beq.n	8002676 <TIM_Base_SetConfig+0x9a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a29      	ldr	r2, [pc, #164]	; (8002700 <TIM_Base_SetConfig+0x124>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00b      	beq.n	8002676 <TIM_Base_SetConfig+0x9a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a28      	ldr	r2, [pc, #160]	; (8002704 <TIM_Base_SetConfig+0x128>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <TIM_Base_SetConfig+0x9a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a27      	ldr	r2, [pc, #156]	; (8002708 <TIM_Base_SetConfig+0x12c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d003      	beq.n	8002676 <TIM_Base_SetConfig+0x9a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a26      	ldr	r2, [pc, #152]	; (800270c <TIM_Base_SetConfig+0x130>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d108      	bne.n	8002688 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a10      	ldr	r2, [pc, #64]	; (80026f0 <TIM_Base_SetConfig+0x114>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00f      	beq.n	80026d4 <TIM_Base_SetConfig+0xf8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a12      	ldr	r2, [pc, #72]	; (8002700 <TIM_Base_SetConfig+0x124>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00b      	beq.n	80026d4 <TIM_Base_SetConfig+0xf8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a11      	ldr	r2, [pc, #68]	; (8002704 <TIM_Base_SetConfig+0x128>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d007      	beq.n	80026d4 <TIM_Base_SetConfig+0xf8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a10      	ldr	r2, [pc, #64]	; (8002708 <TIM_Base_SetConfig+0x12c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <TIM_Base_SetConfig+0xf8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a0f      	ldr	r2, [pc, #60]	; (800270c <TIM_Base_SetConfig+0x130>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d103      	bne.n	80026dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	615a      	str	r2, [r3, #20]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40012c00 	.word	0x40012c00
 80026f4:	40000400 	.word	0x40000400
 80026f8:	40000800 	.word	0x40000800
 80026fc:	40000c00 	.word	0x40000c00
 8002700:	40013400 	.word	0x40013400
 8002704:	40014000 	.word	0x40014000
 8002708:	40014400 	.word	0x40014400
 800270c:	40014800 	.word	0x40014800

08002710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	f023 0201 	bic.w	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800273a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f023 030a 	bic.w	r3, r3, #10
 800274c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	621a      	str	r2, [r3, #32]
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800276e:	b480      	push	{r7}
 8002770:	b087      	sub	sp, #28
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	f023 0210 	bic.w	r2, r3, #16
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	031b      	lsls	r3, r3, #12
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	621a      	str	r2, [r3, #32]
}
 80027c2:	bf00      	nop
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f043 0307 	orr.w	r3, r3, #7
 80027f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	609a      	str	r2, [r3, #8]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800281e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	021a      	lsls	r2, r3, #8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	431a      	orrs	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4313      	orrs	r3, r2
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	609a      	str	r2, [r3, #8]
}
 8002838:	bf00      	nop
 800283a:	371c      	adds	r7, #28
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002858:	2302      	movs	r3, #2
 800285a:	e068      	b.n	800292e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a2e      	ldr	r2, [pc, #184]	; (800293c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2d      	ldr	r2, [pc, #180]	; (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d108      	bne.n	80028a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002896:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1e      	ldr	r2, [pc, #120]	; (800293c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01d      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ce:	d018      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1a      	ldr	r2, [pc, #104]	; (8002948 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00e      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a13      	ldr	r2, [pc, #76]	; (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d004      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d10c      	bne.n	800291c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	4313      	orrs	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40013400 	.word	0x40013400
 8002944:	40000400 	.word	0x40000400
 8002948:	40000800 	.word	0x40000800
 800294c:	40000c00 	.word	0x40000c00
 8002950:	40014000 	.word	0x40014000

08002954 <memset>:
 8002954:	4402      	add	r2, r0
 8002956:	4603      	mov	r3, r0
 8002958:	4293      	cmp	r3, r2
 800295a:	d100      	bne.n	800295e <memset+0xa>
 800295c:	4770      	bx	lr
 800295e:	f803 1b01 	strb.w	r1, [r3], #1
 8002962:	e7f9      	b.n	8002958 <memset+0x4>

08002964 <__libc_init_array>:
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	4d0d      	ldr	r5, [pc, #52]	; (800299c <__libc_init_array+0x38>)
 8002968:	4c0d      	ldr	r4, [pc, #52]	; (80029a0 <__libc_init_array+0x3c>)
 800296a:	1b64      	subs	r4, r4, r5
 800296c:	10a4      	asrs	r4, r4, #2
 800296e:	2600      	movs	r6, #0
 8002970:	42a6      	cmp	r6, r4
 8002972:	d109      	bne.n	8002988 <__libc_init_array+0x24>
 8002974:	4d0b      	ldr	r5, [pc, #44]	; (80029a4 <__libc_init_array+0x40>)
 8002976:	4c0c      	ldr	r4, [pc, #48]	; (80029a8 <__libc_init_array+0x44>)
 8002978:	f000 f818 	bl	80029ac <_init>
 800297c:	1b64      	subs	r4, r4, r5
 800297e:	10a4      	asrs	r4, r4, #2
 8002980:	2600      	movs	r6, #0
 8002982:	42a6      	cmp	r6, r4
 8002984:	d105      	bne.n	8002992 <__libc_init_array+0x2e>
 8002986:	bd70      	pop	{r4, r5, r6, pc}
 8002988:	f855 3b04 	ldr.w	r3, [r5], #4
 800298c:	4798      	blx	r3
 800298e:	3601      	adds	r6, #1
 8002990:	e7ee      	b.n	8002970 <__libc_init_array+0xc>
 8002992:	f855 3b04 	ldr.w	r3, [r5], #4
 8002996:	4798      	blx	r3
 8002998:	3601      	adds	r6, #1
 800299a:	e7f2      	b.n	8002982 <__libc_init_array+0x1e>
 800299c:	08002a04 	.word	0x08002a04
 80029a0:	08002a04 	.word	0x08002a04
 80029a4:	08002a04 	.word	0x08002a04
 80029a8:	08002a08 	.word	0x08002a08

080029ac <_init>:
 80029ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ae:	bf00      	nop
 80029b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b2:	bc08      	pop	{r3}
 80029b4:	469e      	mov	lr, r3
 80029b6:	4770      	bx	lr

080029b8 <_fini>:
 80029b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ba:	bf00      	nop
 80029bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029be:	bc08      	pop	{r3}
 80029c0:	469e      	mov	lr, r3
 80029c2:	4770      	bx	lr
