
MPU 9250 - Based Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c20  08002c20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c20  08002c20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c20  08002c20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002c34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002c34  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000076a7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001861  00000000  00000000  00027726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  00028f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000632  00000000  00000000  000297e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c6b  00000000  00000000  00029e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000096a0  00000000  00000000  0004ea85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0daa  00000000  00000000  00058125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fe0  00000000  00000000  00138ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0013aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002bc8 	.word	0x08002bc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002bc8 	.word	0x08002bc8

080001c8 <MPU9250_OnActivate>:

static uint8_t _buffer[21];
static uint8_t _mag_adjust[3];

__weak void MPU9250_OnActivate()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d4:	4770      	bx	lr
	...

080001d8 <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 80001dc:	f7ff fff4 	bl	80001c8 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2101      	movs	r1, #1
 80001e4:	4802      	ldr	r0, [pc, #8]	; (80001f0 <MPU9250_Activate+0x18>)
 80001e6:	f000 ff6f 	bl	80010c8 <HAL_GPIO_WritePin>
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	48000800 	.word	0x48000800

080001f4 <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	2101      	movs	r1, #1
 80001fc:	4802      	ldr	r0, [pc, #8]	; (8000208 <MPU9250_Deactivate+0x14>)
 80001fe:	f000 ff63 	bl	80010c8 <HAL_GPIO_WritePin>
}
 8000202:	bf00      	nop
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	48000800 	.word	0x48000800

0800020c <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b086      	sub	sp, #24
 8000210:	af02      	add	r7, sp, #8
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8000216:	2300      	movs	r3, #0
 8000218:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 800021a:	f107 020f 	add.w	r2, r7, #15
 800021e:	1df9      	adds	r1, r7, #7
 8000220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	2301      	movs	r3, #1
 8000228:	4806      	ldr	r0, [pc, #24]	; (8000244 <SPIx_WriteRead+0x38>)
 800022a:	f002 f8d2 	bl	80023d2 <HAL_SPI_TransmitReceive>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SPIx_WriteRead+0x2c>
	{
		return -1;
 8000234:	23ff      	movs	r3, #255	; 0xff
 8000236:	e000      	b.n	800023a <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 8000238:	7bfb      	ldrb	r3, [r7, #15]
}
 800023a:	4618      	mov	r0, r3
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	2000005c 	.word	0x2000005c

08000248 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	460b      	mov	r3, r1
 8000252:	70fb      	strb	r3, [r7, #3]
 8000254:	4613      	mov	r3, r2
 8000256:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8000258:	f7ff ffbe 	bl	80001d8 <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 800025c:	78fb      	ldrb	r3, [r7, #3]
 800025e:	4618      	mov	r0, r3
 8000260:	f7ff ffd4 	bl	800020c <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8000264:	e00a      	b.n	800027c <MPU_SPI_Write+0x34>
	{
		SPIx_WriteRead(*pBuffer);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	4618      	mov	r0, r3
 800026c:	f7ff ffce 	bl	800020c <SPIx_WriteRead>
		NumByteToWrite--;
 8000270:	883b      	ldrh	r3, [r7, #0]
 8000272:	3b01      	subs	r3, #1
 8000274:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3301      	adds	r3, #1
 800027a:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 800027c:	883b      	ldrh	r3, [r7, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d1f1      	bne.n	8000266 <MPU_SPI_Write+0x1e>
	}
	MPU9250_Deactivate();
 8000282:	f7ff ffb7 	bl	80001f4 <MPU9250_Deactivate>
}
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	70fb      	strb	r3, [r7, #3]
 800029c:	4613      	mov	r3, r2
 800029e:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 80002a0:	f7ff ff9a 	bl	80001d8 <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 80002a4:	2280      	movs	r2, #128	; 0x80
 80002a6:	78fb      	ldrb	r3, [r7, #3]
 80002a8:	4313      	orrs	r3, r2
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 80002ae:	f107 010f 	add.w	r1, r7, #15
 80002b2:	f04f 33ff 	mov.w	r3, #4294967295
 80002b6:	2201      	movs	r2, #1
 80002b8:	4807      	ldr	r0, [pc, #28]	; (80002d8 <MPU_SPI_Read+0x48>)
 80002ba:	f001 fdec 	bl	8001e96 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&MPU9250_SPI, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 80002be:	883a      	ldrh	r2, [r7, #0]
 80002c0:	f04f 33ff 	mov.w	r3, #4294967295
 80002c4:	6879      	ldr	r1, [r7, #4]
 80002c6:	4804      	ldr	r0, [pc, #16]	; (80002d8 <MPU_SPI_Read+0x48>)
 80002c8:	f001 ff53 	bl	8002172 <HAL_SPI_Receive>
	MPU9250_Deactivate();
 80002cc:	f7ff ff92 	bl	80001f4 <MPU9250_Deactivate>
}
 80002d0:	bf00      	nop
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	2000005c 	.word	0x2000005c

080002dc <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	460a      	mov	r2, r1
 80002e6:	71fb      	strb	r3, [r7, #7]
 80002e8:	4613      	mov	r3, r2
 80002ea:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 80002ec:	79f9      	ldrb	r1, [r7, #7]
 80002ee:	1dbb      	adds	r3, r7, #6
 80002f0:	2201      	movs	r2, #1
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ffa8 	bl	8000248 <MPU_SPI_Write>
	HAL_Delay(10);
 80002f8:	200a      	movs	r0, #10
 80002fa:	f000 fc31 	bl	8000b60 <HAL_Delay>
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8000306:	b580      	push	{r7, lr}
 8000308:	b082      	sub	sp, #8
 800030a:	af00      	add	r7, sp, #0
 800030c:	4603      	mov	r3, r0
 800030e:	603a      	str	r2, [r7, #0]
 8000310:	71fb      	strb	r3, [r7, #7]
 8000312:	460b      	mov	r3, r1
 8000314:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 8000316:	79bb      	ldrb	r3, [r7, #6]
 8000318:	b29a      	uxth	r2, r3
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	4619      	mov	r1, r3
 800031e:	6838      	ldr	r0, [r7, #0]
 8000320:	f7ff ffb6 	bl	8000290 <MPU_SPI_Read>
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	460a      	mov	r2, r1
 8000336:	71fb      	strb	r3, [r7, #7]
 8000338:	4613      	mov	r3, r2
 800033a:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 800033c:	2325      	movs	r3, #37	; 0x25
 800033e:	220c      	movs	r2, #12
 8000340:	4611      	mov	r1, r2
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ffca 	bl	80002dc <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8000348:	2226      	movs	r2, #38	; 0x26
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	4619      	mov	r1, r3
 800034e:	4610      	mov	r0, r2
 8000350:	f7ff ffc4 	bl	80002dc <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 8000354:	2263      	movs	r2, #99	; 0x63
 8000356:	79bb      	ldrb	r3, [r7, #6]
 8000358:	4619      	mov	r1, r3
 800035a:	4610      	mov	r0, r2
 800035c:	f7ff ffbe 	bl	80002dc <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8000360:	2227      	movs	r2, #39	; 0x27
 8000362:	2380      	movs	r3, #128	; 0x80
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	b2db      	uxtb	r3, r3
 800036a:	4619      	mov	r1, r3
 800036c:	4610      	mov	r0, r2
 800036e:	f7ff ffb5 	bl	80002dc <writeRegister>
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
 8000380:	4603      	mov	r3, r0
 8000382:	603a      	str	r2, [r7, #0]
 8000384:	71fb      	strb	r3, [r7, #7]
 8000386:	460b      	mov	r3, r1
 8000388:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 800038a:	2025      	movs	r0, #37	; 0x25
 800038c:	220c      	movs	r2, #12
 800038e:	2380      	movs	r3, #128	; 0x80
 8000390:	4313      	orrs	r3, r2
 8000392:	b2db      	uxtb	r3, r3
 8000394:	4619      	mov	r1, r3
 8000396:	f7ff ffa1 	bl	80002dc <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 800039a:	2226      	movs	r2, #38	; 0x26
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	4619      	mov	r1, r3
 80003a0:	4610      	mov	r0, r2
 80003a2:	f7ff ff9b 	bl	80002dc <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 80003a6:	2027      	movs	r0, #39	; 0x27
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	79bb      	ldrb	r3, [r7, #6]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	4619      	mov	r1, r3
 80003b2:	f7ff ff93 	bl	80002dc <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 80003b6:	2001      	movs	r0, #1
 80003b8:	f000 fbd2 	bl	8000b60 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 80003bc:	2049      	movs	r0, #73	; 0x49
 80003be:	79bb      	ldrb	r3, [r7, #6]
 80003c0:	683a      	ldr	r2, [r7, #0]
 80003c2:	4619      	mov	r1, r3
 80003c4:	f7ff ff9f 	bl	8000306 <readRegisters>
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 80003d4:	2375      	movs	r3, #117	; 0x75
 80003d6:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <whoAmI+0x18>)
 80003d8:	2101      	movs	r1, #1
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ff93 	bl	8000306 <readRegisters>

	// return the register value
	return _buffer[0];
 80003e0:	4b01      	ldr	r3, [pc, #4]	; (80003e8 <whoAmI+0x18>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000028 	.word	0x20000028

080003ec <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 80003f0:	2300      	movs	r3, #0
 80003f2:	4a04      	ldr	r2, [pc, #16]	; (8000404 <whoAmIAK8963+0x18>)
 80003f4:	2101      	movs	r1, #1
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ffbf 	bl	800037a <readAK8963Registers>
	// return the register value
	return _buffer[0];
 80003fc:	4b01      	ldr	r3, [pc, #4]	; (8000404 <whoAmIAK8963+0x18>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
}
 8000400:	4618      	mov	r0, r3
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000028 	.word	0x20000028

08000408 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 800040e:	236b      	movs	r3, #107	; 0x6b
 8000410:	2201      	movs	r2, #1
 8000412:	4611      	mov	r1, r2
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ff61 	bl	80002dc <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 800041a:	236a      	movs	r3, #106	; 0x6a
 800041c:	2220      	movs	r2, #32
 800041e:	4611      	mov	r1, r2
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ff5b 	bl	80002dc <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 8000426:	2324      	movs	r3, #36	; 0x24
 8000428:	220d      	movs	r2, #13
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff55 	bl	80002dc <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8000432:	230a      	movs	r3, #10
 8000434:	2200      	movs	r2, #0
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff77 	bl	800032c <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 800043e:	236b      	movs	r3, #107	; 0x6b
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	4611      	mov	r1, r2
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff ff49 	bl	80002dc <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 800044a:	200a      	movs	r0, #10
 800044c:	f000 fb88 	bl	8000b60 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8000450:	230b      	movs	r3, #11
 8000452:	2201      	movs	r2, #1
 8000454:	4611      	mov	r1, r2
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff68 	bl	800032c <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 800045c:	236b      	movs	r3, #107	; 0x6b
 800045e:	2201      	movs	r2, #1
 8000460:	4611      	mov	r1, r2
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff3a 	bl	80002dc <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 8000468:	f7ff ffb2 	bl	80003d0 <whoAmI>
 800046c:	4603      	mov	r3, r0
 800046e:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	2b71      	cmp	r3, #113	; 0x71
 8000474:	d004      	beq.n	8000480 <MPU9250_Init+0x78>
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b73      	cmp	r3, #115	; 0x73
 800047a:	d001      	beq.n	8000480 <MPU9250_Init+0x78>
	{
		return 1;
 800047c:	2301      	movs	r3, #1
 800047e:	e06c      	b.n	800055a <MPU9250_Init+0x152>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8000480:	236c      	movs	r3, #108	; 0x6c
 8000482:	2200      	movs	r2, #0
 8000484:	4611      	mov	r1, r2
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff28 	bl	80002dc <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G);
 800048c:	231c      	movs	r3, #28
 800048e:	2218      	movs	r2, #24
 8000490:	4611      	mov	r1, r2
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff22 	bl	80002dc <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8000498:	231b      	movs	r3, #27
 800049a:	2200      	movs	r2, #0
 800049c:	4611      	mov	r1, r2
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ff1c 	bl	80002dc <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 80004a4:	231d      	movs	r3, #29
 80004a6:	2201      	movs	r2, #1
 80004a8:	4611      	mov	r1, r2
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ff16 	bl	80002dc <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 80004b0:	231a      	movs	r3, #26
 80004b2:	2201      	movs	r2, #1
 80004b4:	4611      	mov	r1, r2
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ff10 	bl	80002dc <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 80004bc:	2319      	movs	r3, #25
 80004be:	2100      	movs	r1, #0
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff0b 	bl	80002dc <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 80004c6:	236a      	movs	r3, #106	; 0x6a
 80004c8:	2220      	movs	r2, #32
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff05 	bl	80002dc <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 80004d2:	2324      	movs	r3, #36	; 0x24
 80004d4:	220d      	movs	r2, #13
 80004d6:	4611      	mov	r1, r2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff feff 	bl	80002dc <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 80004de:	f7ff ff85 	bl	80003ec <whoAmIAK8963>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b48      	cmp	r3, #72	; 0x48
 80004e6:	d001      	beq.n	80004ec <MPU9250_Init+0xe4>
	{
		return 1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	e036      	b.n	800055a <MPU9250_Init+0x152>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80004ec:	230a      	movs	r3, #10
 80004ee:	2200      	movs	r2, #0
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff1a 	bl	800032c <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f000 fb31 	bl	8000b60 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 80004fe:	230a      	movs	r3, #10
 8000500:	220f      	movs	r2, #15
 8000502:	4611      	mov	r1, r2
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ff11 	bl	800032c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	f000 fb28 	bl	8000b60 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 8000510:	2310      	movs	r3, #16
 8000512:	4a14      	ldr	r2, [pc, #80]	; (8000564 <MPU9250_Init+0x15c>)
 8000514:	2103      	movs	r1, #3
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff2f 	bl	800037a <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800051c:	230a      	movs	r3, #10
 800051e:	2200      	movs	r2, #0
 8000520:	4611      	mov	r1, r2
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff ff02 	bl	800032c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8000528:	2064      	movs	r0, #100	; 0x64
 800052a:	f000 fb19 	bl	8000b60 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 800052e:	230a      	movs	r3, #10
 8000530:	2216      	movs	r2, #22
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fef9 	bl	800032c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 800053a:	2064      	movs	r0, #100	; 0x64
 800053c:	f000 fb10 	bl	8000b60 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8000540:	236b      	movs	r3, #107	; 0x6b
 8000542:	2201      	movs	r2, #1
 8000544:	4611      	mov	r1, r2
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff fec8 	bl	80002dc <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 800054c:	2303      	movs	r3, #3
 800054e:	4a06      	ldr	r2, [pc, #24]	; (8000568 <MPU9250_Init+0x160>)
 8000550:	2107      	movs	r1, #7
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff ff11 	bl	800037a <readAK8963Registers>

	// successful init, return 0
	return 0;
 8000558:	2300      	movs	r3, #0
}
 800055a:	4618      	mov	r0, r3
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000040 	.word	0x20000040
 8000568:	20000028 	.word	0x20000028

0800056c <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8000578:	233b      	movs	r3, #59	; 0x3b
 800057a:	4a63      	ldr	r2, [pc, #396]	; (8000708 <MPU9250_GetData+0x19c>)
 800057c:	2115      	movs	r1, #21
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fec1 	bl	8000306 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8000584:	4b60      	ldr	r3, [pc, #384]	; (8000708 <MPU9250_GetData+0x19c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	b21a      	sxth	r2, r3
 800058c:	4b5e      	ldr	r3, [pc, #376]	; (8000708 <MPU9250_GetData+0x19c>)
 800058e:	785b      	ldrb	r3, [r3, #1]
 8000590:	b21b      	sxth	r3, r3
 8000592:	4313      	orrs	r3, r2
 8000594:	b21a      	sxth	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800059a:	4b5b      	ldr	r3, [pc, #364]	; (8000708 <MPU9250_GetData+0x19c>)
 800059c:	789b      	ldrb	r3, [r3, #2]
 800059e:	021b      	lsls	r3, r3, #8
 80005a0:	b219      	sxth	r1, r3
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <MPU9250_GetData+0x19c>)
 80005a4:	78db      	ldrb	r3, [r3, #3]
 80005a6:	b21a      	sxth	r2, r3
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	3302      	adds	r3, #2
 80005ac:	430a      	orrs	r2, r1
 80005ae:	b212      	sxth	r2, r2
 80005b0:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 80005b2:	4b55      	ldr	r3, [pc, #340]	; (8000708 <MPU9250_GetData+0x19c>)
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	021b      	lsls	r3, r3, #8
 80005b8:	b219      	sxth	r1, r3
 80005ba:	4b53      	ldr	r3, [pc, #332]	; (8000708 <MPU9250_GetData+0x19c>)
 80005bc:	795b      	ldrb	r3, [r3, #5]
 80005be:	b21a      	sxth	r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	3304      	adds	r3, #4
 80005c4:	430a      	orrs	r2, r1
 80005c6:	b212      	sxth	r2, r2
 80005c8:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 80005ca:	4b4f      	ldr	r3, [pc, #316]	; (8000708 <MPU9250_GetData+0x19c>)
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	021b      	lsls	r3, r3, #8
 80005d0:	b21a      	sxth	r2, r3
 80005d2:	4b4d      	ldr	r3, [pc, #308]	; (8000708 <MPU9250_GetData+0x19c>)
 80005d4:	7a5b      	ldrb	r3, [r3, #9]
 80005d6:	b21b      	sxth	r3, r3
 80005d8:	4313      	orrs	r3, r2
 80005da:	b21a      	sxth	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 80005e0:	4b49      	ldr	r3, [pc, #292]	; (8000708 <MPU9250_GetData+0x19c>)
 80005e2:	7a9b      	ldrb	r3, [r3, #10]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b219      	sxth	r1, r3
 80005e8:	4b47      	ldr	r3, [pc, #284]	; (8000708 <MPU9250_GetData+0x19c>)
 80005ea:	7adb      	ldrb	r3, [r3, #11]
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3302      	adds	r3, #2
 80005f2:	430a      	orrs	r2, r1
 80005f4:	b212      	sxth	r2, r2
 80005f6:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 80005f8:	4b43      	ldr	r3, [pc, #268]	; (8000708 <MPU9250_GetData+0x19c>)
 80005fa:	7b1b      	ldrb	r3, [r3, #12]
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	b219      	sxth	r1, r3
 8000600:	4b41      	ldr	r3, [pc, #260]	; (8000708 <MPU9250_GetData+0x19c>)
 8000602:	7b5b      	ldrb	r3, [r3, #13]
 8000604:	b21a      	sxth	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3304      	adds	r3, #4
 800060a:	430a      	orrs	r2, r1
 800060c:	b212      	sxth	r2, r2
 800060e:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8000610:	4b3d      	ldr	r3, [pc, #244]	; (8000708 <MPU9250_GetData+0x19c>)
 8000612:	7bdb      	ldrb	r3, [r3, #15]
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	b21a      	sxth	r2, r3
 8000618:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <MPU9250_GetData+0x19c>)
 800061a:	7b9b      	ldrb	r3, [r3, #14]
 800061c:	b21b      	sxth	r3, r3
 800061e:	4313      	orrs	r3, r2
 8000620:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8000622:	4b39      	ldr	r3, [pc, #228]	; (8000708 <MPU9250_GetData+0x19c>)
 8000624:	7c5b      	ldrb	r3, [r3, #17]
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	b21a      	sxth	r2, r3
 800062a:	4b37      	ldr	r3, [pc, #220]	; (8000708 <MPU9250_GetData+0x19c>)
 800062c:	7c1b      	ldrb	r3, [r3, #16]
 800062e:	b21b      	sxth	r3, r3
 8000630:	4313      	orrs	r3, r2
 8000632:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8000634:	4b34      	ldr	r3, [pc, #208]	; (8000708 <MPU9250_GetData+0x19c>)
 8000636:	7cdb      	ldrb	r3, [r3, #19]
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	b21a      	sxth	r2, r3
 800063c:	4b32      	ldr	r3, [pc, #200]	; (8000708 <MPU9250_GetData+0x19c>)
 800063e:	7c9b      	ldrb	r3, [r3, #18]
 8000640:	b21b      	sxth	r3, r3
 8000642:	4313      	orrs	r3, r2
 8000644:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8000646:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800064a:	ee07 3a90 	vmov	s15, r3
 800064e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <MPU9250_GetData+0x1a0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	3b80      	subs	r3, #128	; 0x80
 8000658:	ee07 3a90 	vmov	s15, r3
 800065c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000660:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8000710 <MPU9250_GetData+0x1a4>
 8000664:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800066c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000678:	ee17 3a90 	vmov	r3, s15
 800067c:	b21a      	sxth	r2, r3
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8000682:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000686:	ee07 3a90 	vmov	s15, r3
 800068a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MPU9250_GetData+0x1a0>)
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	3b80      	subs	r3, #128	; 0x80
 8000694:	ee07 3a90 	vmov	s15, r3
 8000698:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800069c:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8000710 <MPU9250_GetData+0x1a4>
 80006a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80006a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80006a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80006ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	3302      	adds	r3, #2
 80006b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b8:	ee17 2a90 	vmov	r2, s15
 80006bc:	b212      	sxth	r2, r2
 80006be:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 80006c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006c4:	ee07 3a90 	vmov	s15, r3
 80006c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MPU9250_GetData+0x1a0>)
 80006ce:	789b      	ldrb	r3, [r3, #2]
 80006d0:	3b80      	subs	r3, #128	; 0x80
 80006d2:	ee07 3a90 	vmov	s15, r3
 80006d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006da:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8000710 <MPU9250_GetData+0x1a4>
 80006de:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80006e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80006e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80006ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	3304      	adds	r3, #4
 80006f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006f6:	ee17 2a90 	vmov	r2, s15
 80006fa:	b212      	sxth	r2, r2
 80006fc:	801a      	strh	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000028 	.word	0x20000028
 800070c:	20000040 	.word	0x20000040
 8000710:	43800000 	.word	0x43800000

08000714 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_GPIO_Init+0x68>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_GPIO_Init+0x68>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_GPIO_Init+0x68>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_GPIO_Init+0x68>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a0d      	ldr	r2, [pc, #52]	; (800077c <MX_GPIO_Init+0x68>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_GPIO_Init+0x68>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800075a:	2301      	movs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4619      	mov	r1, r3
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0x6c>)
 800076e:	f000 fb01 	bl	8000d74 <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000
 8000780:	48000800 	.word	0x48000800

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f000 f975 	bl	8000a76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f812 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f7ff ffc0 	bl	8000714 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000794:	f000 f866 	bl	8000864 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  MPU9250_Init();
 8000798:	f7ff fe36 	bl	8000408 <MPU9250_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	MPU9250_GetData(AccData,GyroData,MagData);
 800079c:	4a02      	ldr	r2, [pc, #8]	; (80007a8 <main+0x24>)
 800079e:	4903      	ldr	r1, [pc, #12]	; (80007ac <main+0x28>)
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <main+0x2c>)
 80007a2:	f7ff fee3 	bl	800056c <MPU9250_GetData>
 80007a6:	e7f9      	b.n	800079c <main+0x18>
 80007a8:	20000054 	.word	0x20000054
 80007ac:	2000004c 	.word	0x2000004c
 80007b0:	20000044 	.word	0x20000044

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b096      	sub	sp, #88	; 0x58
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2244      	movs	r2, #68	; 0x44
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 f9d4 	bl	8002b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	463b      	mov	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007da:	f000 fc9b 	bl	8001114 <HAL_PWREx_ControlVoltageScaling>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007e4:	f000 f838 	bl	8000858 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007e8:	2310      	movs	r3, #16
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007f4:	2360      	movs	r3, #96	; 0x60
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007fc:	2301      	movs	r3, #1
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000804:	231e      	movs	r3, #30
 8000806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000808:	2307      	movs	r3, #7
 800080a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fcd1 	bl	80011c0 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000824:	f000 f818 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2303      	movs	r3, #3
 800082e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	2103      	movs	r1, #3
 8000840:	4618      	mov	r0, r3
 8000842:	f001 f899 	bl	8001978 <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800084c:	f000 f804 	bl	8000858 <Error_Handler>
  }
}
 8000850:	bf00      	nop
 8000852:	3758      	adds	r7, #88	; 0x58
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_SPI1_Init+0x74>)
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <MX_SPI1_Init+0x78>)
 800086c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_SPI1_Init+0x74>)
 8000870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_SPI1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_SPI1_Init+0x74>)
 800087e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000882:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_SPI1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_SPI1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_SPI1_Init+0x74>)
 8000892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000896:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_SPI1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_SPI1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_SPI1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_SPI1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_SPI1_Init+0x74>)
 80008b2:	2207      	movs	r2, #7
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_SPI1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_SPI1_Init+0x74>)
 80008be:	2208      	movs	r2, #8
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_SPI1_Init+0x74>)
 80008c4:	f001 fa44 	bl	8001d50 <HAL_SPI_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008ce:	f7ff ffc3 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000005c 	.word	0x2000005c
 80008dc:	40013000 	.word	0x40013000

080008e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a17      	ldr	r2, [pc, #92]	; (800095c <HAL_SPI_MspInit+0x7c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d128      	bne.n	8000954 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <HAL_SPI_MspInit+0x80>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000906:	4a16      	ldr	r2, [pc, #88]	; (8000960 <HAL_SPI_MspInit+0x80>)
 8000908:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800090c:	6613      	str	r3, [r2, #96]	; 0x60
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <HAL_SPI_MspInit+0x80>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_SPI_MspInit+0x80>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a10      	ldr	r2, [pc, #64]	; (8000960 <HAL_SPI_MspInit+0x80>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_SPI_MspInit+0x80>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000932:	23e0      	movs	r3, #224	; 0xe0
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000942:	2305      	movs	r3, #5
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f000 fa10 	bl	8000d74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	; 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40013000 	.word	0x40013000
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x44>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_MspInit+0x44>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6613      	str	r3, [r2, #96]	; 0x60
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x44>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_MspInit+0x44>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6593      	str	r3, [r2, #88]	; 0x58
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f892 	bl	8000b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a28:	f7ff ffea 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a52:	f002 f895 	bl	8002b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a56:	f7ff fe95 	bl	8000784 <main>

08000a5a <LoopForever>:

LoopForever:
    b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a68:	08002c28 	.word	0x08002c28
  ldr r2, =_sbss
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a70:	200000c4 	.word	0x200000c4

08000a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_2_IRQHandler>

08000a76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f943 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f80e 	bl	8000aa8 <HAL_InitTick>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	e001      	b.n	8000a9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a98:	f7ff ff64 	bl	8000964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_InitTick+0x6c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d023      	beq.n	8000b04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <HAL_InitTick+0x70>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_InitTick+0x6c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f941 	bl	8000d5a <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10f      	bne.n	8000afe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d809      	bhi.n	8000af8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f000 f919 	bl	8000d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_InitTick+0x74>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e007      	b.n	8000b08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	e004      	b.n	8000b08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	73fb      	strb	r3, [r7, #15]
 8000b02:	e001      	b.n	8000b08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	200000c0 	.word	0x200000c0

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	200000c0 	.word	0x200000c0

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff ffee 	bl	8000b48 <HAL_GetTick>
 8000b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_Delay+0x44>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b86:	bf00      	nop
 8000b88:	f7ff ffde 	bl	8000b48 <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff47 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff5c 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff8e 	bl	8000c60 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5d 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ffb0 	bl	8000cc8 <SysTick_Config>
 8000d68:	4603      	mov	r3, r0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	e17f      	b.n	8001084 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 8171 	beq.w	800107e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d005      	beq.n	8000db4 <HAL_GPIO_Init+0x40>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d130      	bne.n	8000e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dea:	2201      	movs	r2, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	f003 0201 	and.w	r2, r3, #1
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d118      	bne.n	8000e54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	f003 0201 	and.w	r2, r3, #1
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d017      	beq.n	8000e90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d123      	bne.n	8000ee4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	6939      	ldr	r1, [r7, #16]
 8000ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0203 	and.w	r2, r3, #3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80ac 	beq.w	800107e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	4b5f      	ldr	r3, [pc, #380]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2a:	4a5e      	ldr	r2, [pc, #376]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6613      	str	r3, [r2, #96]	; 0x60
 8000f32:	4b5c      	ldr	r3, [pc, #368]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f3e:	4a5a      	ldr	r2, [pc, #360]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	220f      	movs	r2, #15
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f68:	d025      	beq.n	8000fb6 <HAL_GPIO_Init+0x242>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4f      	ldr	r2, [pc, #316]	; (80010ac <HAL_GPIO_Init+0x338>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01f      	beq.n	8000fb2 <HAL_GPIO_Init+0x23e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4e      	ldr	r2, [pc, #312]	; (80010b0 <HAL_GPIO_Init+0x33c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d019      	beq.n	8000fae <HAL_GPIO_Init+0x23a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4d      	ldr	r2, [pc, #308]	; (80010b4 <HAL_GPIO_Init+0x340>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x236>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4c      	ldr	r2, [pc, #304]	; (80010b8 <HAL_GPIO_Init+0x344>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x232>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4b      	ldr	r2, [pc, #300]	; (80010bc <HAL_GPIO_Init+0x348>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x22e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4a      	ldr	r2, [pc, #296]	; (80010c0 <HAL_GPIO_Init+0x34c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x22a>
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	e00c      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	e00a      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x244>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fc8:	4937      	ldr	r1, [pc, #220]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ffa:	4a32      	ldr	r2, [pc, #200]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001000:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <HAL_GPIO_Init+0x350>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800104e:	4a1d      	ldr	r2, [pc, #116]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001078:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <HAL_GPIO_Init+0x350>)
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa22 f303 	lsr.w	r3, r2, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	f47f ae78 	bne.w	8000d84 <HAL_GPIO_Init+0x10>
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010000 	.word	0x40010000
 80010ac:	48000400 	.word	0x48000400
 80010b0:	48000800 	.word	0x48000800
 80010b4:	48000c00 	.word	0x48000c00
 80010b8:	48001000 	.word	0x48001000
 80010bc:	48001400 	.word	0x48001400
 80010c0:	48001800 	.word	0x48001800
 80010c4:	40010400 	.word	0x40010400

080010c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010e4:	e002      	b.n	80010ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <HAL_PWREx_GetVoltageRange+0x18>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40007000 	.word	0x40007000

08001114 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001122:	d130      	bne.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800112c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001130:	d038      	beq.n	80011a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800113a:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001140:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2232      	movs	r2, #50	; 0x32
 8001148:	fb02 f303 	mul.w	r3, r2, r3
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800114e:	fba2 2303 	umull	r2, r3, r2, r3
 8001152:	0c9b      	lsrs	r3, r3, #18
 8001154:	3301      	adds	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001158:	e002      	b.n	8001160 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3b01      	subs	r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116c:	d102      	bne.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x60>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f2      	bne.n	800115a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001180:	d110      	bne.n	80011a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e00f      	b.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800118e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001192:	d007      	beq.n	80011a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40007000 	.word	0x40007000
 80011b8:	20000000 	.word	0x20000000
 80011bc:	431bde83 	.word	0x431bde83

080011c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e3ca      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011d2:	4b97      	ldr	r3, [pc, #604]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011dc:	4b94      	ldr	r3, [pc, #592]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0310 	and.w	r3, r3, #16
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 80e4 	beq.w	80013bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d007      	beq.n	800120a <HAL_RCC_OscConfig+0x4a>
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	2b0c      	cmp	r3, #12
 80011fe:	f040 808b 	bne.w	8001318 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2b01      	cmp	r3, #1
 8001206:	f040 8087 	bne.w	8001318 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800120a:	4b89      	ldr	r3, [pc, #548]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <HAL_RCC_OscConfig+0x62>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e3a2      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a1a      	ldr	r2, [r3, #32]
 8001226:	4b82      	ldr	r3, [pc, #520]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <HAL_RCC_OscConfig+0x7c>
 8001232:	4b7f      	ldr	r3, [pc, #508]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800123a:	e005      	b.n	8001248 <HAL_RCC_OscConfig+0x88>
 800123c:	4b7c      	ldr	r3, [pc, #496]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 800123e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001242:	091b      	lsrs	r3, r3, #4
 8001244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001248:	4293      	cmp	r3, r2
 800124a:	d223      	bcs.n	8001294 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fd1d 	bl	8001c90 <RCC_SetFlashLatencyFromMSIRange>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e383      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001260:	4b73      	ldr	r3, [pc, #460]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a72      	ldr	r2, [pc, #456]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b70      	ldr	r3, [pc, #448]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	496d      	ldr	r1, [pc, #436]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127e:	4b6c      	ldr	r3, [pc, #432]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	4968      	ldr	r1, [pc, #416]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 800128e:	4313      	orrs	r3, r2
 8001290:	604b      	str	r3, [r1, #4]
 8001292:	e025      	b.n	80012e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001294:	4b66      	ldr	r3, [pc, #408]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a65      	ldr	r2, [pc, #404]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b63      	ldr	r3, [pc, #396]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4960      	ldr	r1, [pc, #384]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b2:	4b5f      	ldr	r3, [pc, #380]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	495b      	ldr	r1, [pc, #364]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d109      	bne.n	80012e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fcdd 	bl	8001c90 <RCC_SetFlashLatencyFromMSIRange>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e343      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012e0:	f000 fc4a 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 80012e4:	4602      	mov	r2, r0
 80012e6:	4b52      	ldr	r3, [pc, #328]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	4950      	ldr	r1, [pc, #320]	; (8001434 <HAL_RCC_OscConfig+0x274>)
 80012f2:	5ccb      	ldrb	r3, [r1, r3]
 80012f4:	f003 031f 	and.w	r3, r3, #31
 80012f8:	fa22 f303 	lsr.w	r3, r2, r3
 80012fc:	4a4e      	ldr	r2, [pc, #312]	; (8001438 <HAL_RCC_OscConfig+0x278>)
 80012fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001300:	4b4e      	ldr	r3, [pc, #312]	; (800143c <HAL_RCC_OscConfig+0x27c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fbcf 	bl	8000aa8 <HAL_InitTick>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d052      	beq.n	80013ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	e327      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d032      	beq.n	8001386 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001320:	4b43      	ldr	r3, [pc, #268]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a42      	ldr	r2, [pc, #264]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800132c:	f7ff fc0c 	bl	8000b48 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001334:	f7ff fc08 	bl	8000b48 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e310      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001346:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001352:	4b37      	ldr	r3, [pc, #220]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a36      	ldr	r2, [pc, #216]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b34      	ldr	r3, [pc, #208]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4931      	ldr	r1, [pc, #196]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	492c      	ldr	r1, [pc, #176]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
 8001384:	e01a      	b.n	80013bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a29      	ldr	r2, [pc, #164]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 800138c:	f023 0301 	bic.w	r3, r3, #1
 8001390:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001392:	f7ff fbd9 	bl	8000b48 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800139a:	f7ff fbd5 	bl	8000b48 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e2dd      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013ac:	4b20      	ldr	r3, [pc, #128]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x1da>
 80013b8:	e000      	b.n	80013bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d074      	beq.n	80014b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x21a>
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2b0c      	cmp	r3, #12
 80013d2:	d10e      	bne.n	80013f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d10b      	bne.n	80013f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d064      	beq.n	80014b0 <HAL_RCC_OscConfig+0x2f0>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d160      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e2ba      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fa:	d106      	bne.n	800140a <HAL_RCC_OscConfig+0x24a>
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	e026      	b.n	8001458 <HAL_RCC_OscConfig+0x298>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001412:	d115      	bne.n	8001440 <HAL_RCC_OscConfig+0x280>
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a05      	ldr	r2, [pc, #20]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 800141a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a02      	ldr	r2, [pc, #8]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	e014      	b.n	8001458 <HAL_RCC_OscConfig+0x298>
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	08002be0 	.word	0x08002be0
 8001438:	20000000 	.word	0x20000000
 800143c:	20000004 	.word	0x20000004
 8001440:	4ba0      	ldr	r3, [pc, #640]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a9f      	ldr	r2, [pc, #636]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b9d      	ldr	r3, [pc, #628]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a9c      	ldr	r2, [pc, #624]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fb72 	bl	8000b48 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fb6e 	bl	8000b48 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e276      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147a:	4b92      	ldr	r3, [pc, #584]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x2a8>
 8001486:	e014      	b.n	80014b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fb5e 	bl	8000b48 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fb5a 	bl	8000b48 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e262      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014a2:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x2d0>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d060      	beq.n	8001580 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_OscConfig+0x310>
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2b0c      	cmp	r3, #12
 80014c8:	d119      	bne.n	80014fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d116      	bne.n	80014fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d0:	4b7c      	ldr	r3, [pc, #496]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_OscConfig+0x328>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e23f      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4b76      	ldr	r3, [pc, #472]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	061b      	lsls	r3, r3, #24
 80014f6:	4973      	ldr	r1, [pc, #460]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014fc:	e040      	b.n	8001580 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d023      	beq.n	800154e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001506:	4b6f      	ldr	r3, [pc, #444]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a6e      	ldr	r2, [pc, #440]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fb19 	bl	8000b48 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fb15 	bl	8000b48 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e21d      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800152c:	4b65      	ldr	r3, [pc, #404]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b62      	ldr	r3, [pc, #392]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	061b      	lsls	r3, r3, #24
 8001546:	495f      	ldr	r1, [pc, #380]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
 800154c:	e018      	b.n	8001580 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b5d      	ldr	r3, [pc, #372]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a5c      	ldr	r2, [pc, #368]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 8001554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff faf5 	bl	8000b48 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001562:	f7ff faf1 	bl	8000b48 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e1f9      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001574:	4b53      	ldr	r3, [pc, #332]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f0      	bne.n	8001562 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d03c      	beq.n	8001606 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d01c      	beq.n	80015ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001594:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 8001596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800159a:	4a4a      	ldr	r2, [pc, #296]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a4:	f7ff fad0 	bl	8000b48 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff facc 	bl	8000b48 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1d4      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015be:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 80015c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0ef      	beq.n	80015ac <HAL_RCC_OscConfig+0x3ec>
 80015cc:	e01b      	b.n	8001606 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 80015d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d4:	4a3b      	ldr	r2, [pc, #236]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015de:	f7ff fab3 	bl	8000b48 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e6:	f7ff faaf 	bl	8000b48 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e1b7      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 80015fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1ef      	bne.n	80015e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80a6 	beq.w	8001760 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001618:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10d      	bne.n	8001640 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001624:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001628:	4a26      	ldr	r2, [pc, #152]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 800162a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162e:	6593      	str	r3, [r2, #88]	; 0x58
 8001630:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 8001632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163c:	2301      	movs	r3, #1
 800163e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_RCC_OscConfig+0x508>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d118      	bne.n	800167e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <HAL_RCC_OscConfig+0x508>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a1d      	ldr	r2, [pc, #116]	; (80016c8 <HAL_RCC_OscConfig+0x508>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001658:	f7ff fa76 	bl	8000b48 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001660:	f7ff fa72 	bl	8000b48 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e17a      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_RCC_OscConfig+0x508>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d108      	bne.n	8001698 <HAL_RCC_OscConfig+0x4d8>
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 8001688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001696:	e029      	b.n	80016ec <HAL_RCC_OscConfig+0x52c>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d115      	bne.n	80016cc <HAL_RCC_OscConfig+0x50c>
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 80016a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a6:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <HAL_RCC_OscConfig+0x504>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c0:	e014      	b.n	80016ec <HAL_RCC_OscConfig+0x52c>
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40007000 	.word	0x40007000
 80016cc:	4b9c      	ldr	r3, [pc, #624]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d2:	4a9b      	ldr	r2, [pc, #620]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016dc:	4b98      	ldr	r3, [pc, #608]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e2:	4a97      	ldr	r2, [pc, #604]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 80016e4:	f023 0304 	bic.w	r3, r3, #4
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d016      	beq.n	8001722 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7ff fa28 	bl	8000b48 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff fa24 	bl	8000b48 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e12a      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001712:	4b8b      	ldr	r3, [pc, #556]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 8001714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ed      	beq.n	80016fc <HAL_RCC_OscConfig+0x53c>
 8001720:	e015      	b.n	800174e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001722:	f7ff fa11 	bl	8000b48 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff fa0d 	bl	8000b48 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e113      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001740:	4b7f      	ldr	r3, [pc, #508]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 8001742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1ed      	bne.n	800172a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800174e:	7ffb      	ldrb	r3, [r7, #31]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d105      	bne.n	8001760 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001754:	4b7a      	ldr	r3, [pc, #488]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	4a79      	ldr	r2, [pc, #484]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 800175a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80fe 	beq.w	8001966 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	2b02      	cmp	r3, #2
 8001770:	f040 80d0 	bne.w	8001914 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001774:	4b72      	ldr	r3, [pc, #456]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 0203 	and.w	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	429a      	cmp	r2, r3
 8001786:	d130      	bne.n	80017ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	3b01      	subs	r3, #1
 8001794:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d127      	bne.n	80017ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d11f      	bne.n	80017ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017b4:	2a07      	cmp	r2, #7
 80017b6:	bf14      	ite	ne
 80017b8:	2201      	movne	r2, #1
 80017ba:	2200      	moveq	r2, #0
 80017bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017be:	4293      	cmp	r3, r2
 80017c0:	d113      	bne.n	80017ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	3b01      	subs	r3, #1
 80017d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d109      	bne.n	80017ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	085b      	lsrs	r3, r3, #1
 80017e2:	3b01      	subs	r3, #1
 80017e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d06e      	beq.n	80018c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	d069      	beq.n	80018c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017f0:	4b53      	ldr	r3, [pc, #332]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017fc:	4b50      	ldr	r3, [pc, #320]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0ad      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800180c:	4b4c      	ldr	r3, [pc, #304]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a4b      	ldr	r2, [pc, #300]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 8001812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001816:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001818:	f7ff f996 	bl	8000b48 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff f992 	bl	8000b48 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e09a      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001832:	4b43      	ldr	r3, [pc, #268]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800183e:	4b40      	ldr	r3, [pc, #256]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	4b40      	ldr	r3, [pc, #256]	; (8001944 <HAL_RCC_OscConfig+0x784>)
 8001844:	4013      	ands	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800184e:	3a01      	subs	r2, #1
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	4311      	orrs	r1, r2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001858:	0212      	lsls	r2, r2, #8
 800185a:	4311      	orrs	r1, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001860:	0852      	lsrs	r2, r2, #1
 8001862:	3a01      	subs	r2, #1
 8001864:	0552      	lsls	r2, r2, #21
 8001866:	4311      	orrs	r1, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800186c:	0852      	lsrs	r2, r2, #1
 800186e:	3a01      	subs	r2, #1
 8001870:	0652      	lsls	r2, r2, #25
 8001872:	4311      	orrs	r1, r2
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001878:	0912      	lsrs	r2, r2, #4
 800187a:	0452      	lsls	r2, r2, #17
 800187c:	430a      	orrs	r2, r1
 800187e:	4930      	ldr	r1, [pc, #192]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 8001880:	4313      	orrs	r3, r2
 8001882:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001884:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a2d      	ldr	r2, [pc, #180]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800188e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4a2a      	ldr	r2, [pc, #168]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800189c:	f7ff f954 	bl	8000b48 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a4:	f7ff f950 	bl	8000b48 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e058      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c2:	e050      	b.n	8001966 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e04f      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d148      	bne.n	8001966 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a19      	ldr	r2, [pc, #100]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 80018da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4a16      	ldr	r2, [pc, #88]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 80018e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018ec:	f7ff f92c 	bl	8000b48 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f928 	bl	8000b48 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e030      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x734>
 8001912:	e028      	b.n	8001966 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2b0c      	cmp	r3, #12
 8001918:	d023      	beq.n	8001962 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_RCC_OscConfig+0x780>)
 8001920:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001926:	f7ff f90f 	bl	8000b48 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192c:	e00c      	b.n	8001948 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff f90b 	bl	8000b48 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d905      	bls.n	8001948 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e013      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
 8001940:	40021000 	.word	0x40021000
 8001944:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_OscConfig+0x7b0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1ec      	bne.n	800192e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_RCC_OscConfig+0x7b0>)
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	4905      	ldr	r1, [pc, #20]	; (8001970 <HAL_RCC_OscConfig+0x7b0>)
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_RCC_OscConfig+0x7b4>)
 800195c:	4013      	ands	r3, r2
 800195e:	60cb      	str	r3, [r1, #12]
 8001960:	e001      	b.n	8001966 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	feeefffc 	.word	0xfeeefffc

08001978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0e7      	b.n	8001b5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800198c:	4b75      	ldr	r3, [pc, #468]	; (8001b64 <HAL_RCC_ClockConfig+0x1ec>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d910      	bls.n	80019bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b72      	ldr	r3, [pc, #456]	; (8001b64 <HAL_RCC_ClockConfig+0x1ec>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 0207 	bic.w	r2, r3, #7
 80019a2:	4970      	ldr	r1, [pc, #448]	; (8001b64 <HAL_RCC_ClockConfig+0x1ec>)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b6e      	ldr	r3, [pc, #440]	; (8001b64 <HAL_RCC_ClockConfig+0x1ec>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0cf      	b.n	8001b5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d010      	beq.n	80019ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	4b66      	ldr	r3, [pc, #408]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d908      	bls.n	80019ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4960      	ldr	r1, [pc, #384]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d04c      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	4b5a      	ldr	r3, [pc, #360]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d121      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0a6      	b.n	8001b5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a16:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d115      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e09a      	b.n	8001b5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a2e:	4b4e      	ldr	r3, [pc, #312]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e08e      	b.n	8001b5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e086      	b.n	8001b5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a4e:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 0203 	bic.w	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4943      	ldr	r1, [pc, #268]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a60:	f7ff f872 	bl	8000b48 <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7ff f86e 	bl	8000b48 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e06e      	b.n	8001b5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 020c 	and.w	r2, r3, #12
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1eb      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d010      	beq.n	8001abe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d208      	bcs.n	8001abe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aac:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	492b      	ldr	r1, [pc, #172]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001abe:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d210      	bcs.n	8001aee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001acc:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <HAL_RCC_ClockConfig+0x1ec>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f023 0207 	bic.w	r2, r3, #7
 8001ad4:	4923      	ldr	r1, [pc, #140]	; (8001b64 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_RCC_ClockConfig+0x1ec>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d001      	beq.n	8001aee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e036      	b.n	8001b5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	4918      	ldr	r1, [pc, #96]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d009      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4910      	ldr	r1, [pc, #64]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b2c:	f000 f824 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	490b      	ldr	r1, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x1f4>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
 8001b48:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1fc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe ffa9 	bl	8000aa8 <HAL_InitTick>
 8001b56:	4603      	mov	r3, r0
 8001b58:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40022000 	.word	0x40022000
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	08002be0 	.word	0x08002be0
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b86:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b90:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x34>
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d121      	bne.n	8001bea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d11e      	bne.n	8001bea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bac:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bb8:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	e005      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bd4:	4a2b      	ldr	r2, [pc, #172]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10d      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d102      	bne.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	e004      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001bfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	2b0c      	cmp	r3, #12
 8001c04:	d134      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d003      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0xac>
 8001c1c:	e005      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c20:	617b      	str	r3, [r7, #20]
      break;
 8001c22:	e005      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c26:	617b      	str	r3, [r7, #20]
      break;
 8001c28:	e002      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	617b      	str	r3, [r7, #20]
      break;
 8001c2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	fb03 f202 	mul.w	r2, r3, r2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	0e5b      	lsrs	r3, r3, #25
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	3301      	adds	r3, #1
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c70:	69bb      	ldr	r3, [r7, #24]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
 8001c84:	08002bf0 	.word	0x08002bf0
 8001c88:	00f42400 	.word	0x00f42400
 8001c8c:	007a1200 	.word	0x007a1200

08001c90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ca8:	f7ff fa26 	bl	80010f8 <HAL_PWREx_GetVoltageRange>
 8001cac:	6178      	str	r0, [r7, #20]
 8001cae:	e014      	b.n	8001cda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cb0:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	4a24      	ldr	r2, [pc, #144]	; (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cba:	6593      	str	r3, [r2, #88]	; 0x58
 8001cbc:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cc8:	f7ff fa16 	bl	80010f8 <HAL_PWREx_GetVoltageRange>
 8001ccc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce0:	d10b      	bne.n	8001cfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b80      	cmp	r3, #128	; 0x80
 8001ce6:	d919      	bls.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2ba0      	cmp	r3, #160	; 0xa0
 8001cec:	d902      	bls.n	8001cf4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cee:	2302      	movs	r3, #2
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	e013      	b.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	e010      	b.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b80      	cmp	r3, #128	; 0x80
 8001cfe:	d902      	bls.n	8001d06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d00:	2303      	movs	r3, #3
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	e00a      	b.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b80      	cmp	r3, #128	; 0x80
 8001d0a:	d102      	bne.n	8001d12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	e004      	b.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b70      	cmp	r3, #112	; 0x70
 8001d16:	d101      	bne.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d18:	2301      	movs	r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 0207 	bic.w	r2, r3, #7
 8001d24:	4909      	ldr	r1, [pc, #36]	; (8001d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40022000 	.word	0x40022000

08001d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e095      	b.n	8001e8e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d108      	bne.n	8001d7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d72:	d009      	beq.n	8001d88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
 8001d7a:	e005      	b.n	8001d88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fd9c 	bl	80008e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001dc8:	d902      	bls.n	8001dd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	e002      	b.n	8001dd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001dde:	d007      	beq.n	8001df0 <HAL_SPI_Init+0xa0>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001de8:	d002      	beq.n	8001df0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e32:	ea42 0103 	orr.w	r1, r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	0c1b      	lsrs	r3, r3, #16
 8001e4c:	f003 0204 	and.w	r2, r3, #4
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001e6c:	ea42 0103 	orr.w	r1, r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b088      	sub	sp, #32
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_SPI_Transmit+0x22>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e158      	b.n	800216a <HAL_SPI_Transmit+0x2d4>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ec0:	f7fe fe42 	bl	8000b48 <HAL_GetTick>
 8001ec4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d002      	beq.n	8001edc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eda:	e13d      	b.n	8002158 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_SPI_Transmit+0x52>
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eec:	e134      	b.n	8002158 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	88fa      	ldrh	r2, [r7, #6]
 8001f06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	88fa      	ldrh	r2, [r7, #6]
 8001f0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f38:	d10f      	bne.n	8001f5a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d007      	beq.n	8001f78 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f80:	d94b      	bls.n	800201a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_SPI_Transmit+0xfa>
 8001f8a:	8afb      	ldrh	r3, [r7, #22]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d13e      	bne.n	800200e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	881a      	ldrh	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa0:	1c9a      	adds	r2, r3, #2
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fb4:	e02b      	b.n	800200e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d112      	bne.n	8001fea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc8:	881a      	ldrh	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	1c9a      	adds	r2, r3, #2
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fe8:	e011      	b.n	800200e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fea:	f7fe fdad 	bl	8000b48 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d803      	bhi.n	8002002 <HAL_SPI_Transmit+0x16c>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002000:	d102      	bne.n	8002008 <HAL_SPI_Transmit+0x172>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800200c:	e0a4      	b.n	8002158 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ce      	bne.n	8001fb6 <HAL_SPI_Transmit+0x120>
 8002018:	e07c      	b.n	8002114 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_SPI_Transmit+0x192>
 8002022:	8afb      	ldrh	r3, [r7, #22]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d170      	bne.n	800210a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d912      	bls.n	8002058 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	881a      	ldrh	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002042:	1c9a      	adds	r2, r3, #2
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b02      	subs	r3, #2
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002056:	e058      	b.n	800210a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	330c      	adds	r3, #12
 8002062:	7812      	ldrb	r2, [r2, #0]
 8002064:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800207e:	e044      	b.n	800210a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b02      	cmp	r3, #2
 800208c:	d12b      	bne.n	80020e6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d912      	bls.n	80020be <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	881a      	ldrh	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	1c9a      	adds	r2, r3, #2
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b02      	subs	r3, #2
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020bc:	e025      	b.n	800210a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	330c      	adds	r3, #12
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020e4:	e011      	b.n	800210a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020e6:	f7fe fd2f 	bl	8000b48 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d803      	bhi.n	80020fe <HAL_SPI_Transmit+0x268>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d102      	bne.n	8002104 <HAL_SPI_Transmit+0x26e>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002108:	e026      	b.n	8002158 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1b5      	bne.n	8002080 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	6839      	ldr	r1, [r7, #0]
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fce3 	bl	8002ae4 <SPI_EndRxTxTransaction>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10a      	bne.n	8002148 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	77fb      	strb	r3, [r7, #31]
 8002154:	e000      	b.n	8002158 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002156:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002168:	7ffb      	ldrb	r3, [r7, #31]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3720      	adds	r7, #32
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b088      	sub	sp, #32
 8002176:	af02      	add	r7, sp, #8
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800218e:	d112      	bne.n	80021b6 <HAL_SPI_Receive+0x44>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10e      	bne.n	80021b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2204      	movs	r2, #4
 800219c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4613      	mov	r3, r2
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f910 	bl	80023d2 <HAL_SPI_TransmitReceive>
 80021b2:	4603      	mov	r3, r0
 80021b4:	e109      	b.n	80023ca <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_SPI_Receive+0x52>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e102      	b.n	80023ca <HAL_SPI_Receive+0x258>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021cc:	f7fe fcbc 	bl	8000b48 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d002      	beq.n	80021e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80021de:	2302      	movs	r3, #2
 80021e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021e2:	e0e9      	b.n	80023b8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_SPI_Receive+0x7e>
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021f4:	e0e0      	b.n	80023b8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2204      	movs	r2, #4
 80021fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	88fa      	ldrh	r2, [r7, #6]
 800220e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	88fa      	ldrh	r2, [r7, #6]
 8002216:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002240:	d908      	bls.n	8002254 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	e007      	b.n	8002264 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002262:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800226c:	d10f      	bne.n	800228e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800227c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	2b40      	cmp	r3, #64	; 0x40
 800229a:	d007      	beq.n	80022ac <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022b4:	d867      	bhi.n	8002386 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80022b6:	e030      	b.n	800231a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d117      	bne.n	80022f6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f103 020c 	add.w	r2, r3, #12
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	7812      	ldrb	r2, [r2, #0]
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80022f4:	e011      	b.n	800231a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022f6:	f7fe fc27 	bl	8000b48 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d803      	bhi.n	800230e <HAL_SPI_Receive+0x19c>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d102      	bne.n	8002314 <HAL_SPI_Receive+0x1a2>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002318:	e04e      	b.n	80023b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1c8      	bne.n	80022b8 <HAL_SPI_Receive+0x146>
 8002326:	e034      	b.n	8002392 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b01      	cmp	r3, #1
 8002334:	d115      	bne.n	8002362 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	b292      	uxth	r2, r2
 8002342:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	1c9a      	adds	r2, r3, #2
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002360:	e011      	b.n	8002386 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002362:	f7fe fbf1 	bl	8000b48 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d803      	bhi.n	800237a <HAL_SPI_Receive+0x208>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d102      	bne.n	8002380 <HAL_SPI_Receive+0x20e>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002384:	e018      	b.n	80023b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1ca      	bne.n	8002328 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fb4c 	bl	8002a34 <SPI_EndRxTransaction>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	75fb      	strb	r3, [r7, #23]
 80023b4:	e000      	b.n	80023b8 <HAL_SPI_Receive+0x246>
  }

error :
 80023b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b08a      	sub	sp, #40	; 0x28
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023e0:	2301      	movs	r3, #1
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_SPI_TransmitReceive+0x26>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e1fb      	b.n	80027f0 <HAL_SPI_TransmitReceive+0x41e>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002400:	f7fe fba2 	bl	8000b48 <HAL_GetTick>
 8002404:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800240c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002414:	887b      	ldrh	r3, [r7, #2]
 8002416:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002418:	887b      	ldrh	r3, [r7, #2]
 800241a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800241c:	7efb      	ldrb	r3, [r7, #27]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d00e      	beq.n	8002440 <HAL_SPI_TransmitReceive+0x6e>
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002428:	d106      	bne.n	8002438 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d102      	bne.n	8002438 <HAL_SPI_TransmitReceive+0x66>
 8002432:	7efb      	ldrb	r3, [r7, #27]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d003      	beq.n	8002440 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002438:	2302      	movs	r3, #2
 800243a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800243e:	e1cd      	b.n	80027dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_SPI_TransmitReceive+0x80>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <HAL_SPI_TransmitReceive+0x80>
 800244c:	887b      	ldrh	r3, [r7, #2]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002458:	e1c0      	b.n	80027dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b04      	cmp	r3, #4
 8002464:	d003      	beq.n	800246e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2205      	movs	r2, #5
 800246a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	887a      	ldrh	r2, [r7, #2]
 800247e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	887a      	ldrh	r2, [r7, #2]
 8002486:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	887a      	ldrh	r2, [r7, #2]
 800249a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024b0:	d802      	bhi.n	80024b8 <HAL_SPI_TransmitReceive+0xe6>
 80024b2:	8a3b      	ldrh	r3, [r7, #16]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d908      	bls.n	80024ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	e007      	b.n	80024da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e4:	2b40      	cmp	r3, #64	; 0x40
 80024e6:	d007      	beq.n	80024f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002500:	d97c      	bls.n	80025fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_SPI_TransmitReceive+0x13e>
 800250a:	8a7b      	ldrh	r3, [r7, #18]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d169      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	881a      	ldrh	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	1c9a      	adds	r2, r3, #2
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002534:	e056      	b.n	80025e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b02      	cmp	r3, #2
 8002542:	d11b      	bne.n	800257c <HAL_SPI_TransmitReceive+0x1aa>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d016      	beq.n	800257c <HAL_SPI_TransmitReceive+0x1aa>
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	2b01      	cmp	r3, #1
 8002552:	d113      	bne.n	800257c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	881a      	ldrh	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	1c9a      	adds	r2, r3, #2
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b01      	cmp	r3, #1
 8002588:	d11c      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x1f2>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d016      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	b292      	uxth	r2, r2
 80025a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	1c9a      	adds	r2, r3, #2
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025c0:	2301      	movs	r3, #1
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025c4:	f7fe fac0 	bl	8000b48 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d807      	bhi.n	80025e4 <HAL_SPI_TransmitReceive+0x212>
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025da:	d003      	beq.n	80025e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80025e2:	e0fb      	b.n	80027dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1a3      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x164>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d19d      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x164>
 80025fa:	e0df      	b.n	80027bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_SPI_TransmitReceive+0x23a>
 8002604:	8a7b      	ldrh	r3, [r7, #18]
 8002606:	2b01      	cmp	r3, #1
 8002608:	f040 80cb 	bne.w	80027a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d912      	bls.n	800263c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	881a      	ldrh	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	1c9a      	adds	r2, r3, #2
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b02      	subs	r3, #2
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	87da      	strh	r2, [r3, #62]	; 0x3e
 800263a:	e0b2      	b.n	80027a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	330c      	adds	r3, #12
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002662:	e09e      	b.n	80027a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b02      	cmp	r3, #2
 8002670:	d134      	bne.n	80026dc <HAL_SPI_TransmitReceive+0x30a>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02f      	beq.n	80026dc <HAL_SPI_TransmitReceive+0x30a>
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	2b01      	cmp	r3, #1
 8002680:	d12c      	bne.n	80026dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d912      	bls.n	80026b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	1c9a      	adds	r2, r3, #2
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b02      	subs	r3, #2
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026b0:	e012      	b.n	80026d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	330c      	adds	r3, #12
 80026bc:	7812      	ldrb	r2, [r2, #0]
 80026be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d148      	bne.n	800277c <HAL_SPI_TransmitReceive+0x3aa>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d042      	beq.n	800277c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d923      	bls.n	800274a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	b292      	uxth	r2, r2
 800270e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	1c9a      	adds	r2, r3, #2
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b02      	subs	r3, #2
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d81f      	bhi.n	8002778 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	e016      	b.n	8002778 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f103 020c 	add.w	r2, r3, #12
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	7812      	ldrb	r2, [r2, #0]
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800276c:	b29b      	uxth	r3, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002778:	2301      	movs	r3, #1
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800277c:	f7fe f9e4 	bl	8000b48 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002788:	429a      	cmp	r2, r3
 800278a:	d803      	bhi.n	8002794 <HAL_SPI_TransmitReceive+0x3c2>
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d102      	bne.n	800279a <HAL_SPI_TransmitReceive+0x3c8>
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80027a0:	e01c      	b.n	80027dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f47f af5b 	bne.w	8002664 <HAL_SPI_TransmitReceive+0x292>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f47f af54 	bne.w	8002664 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f98f 	bl	8002ae4 <SPI_EndRxTxTransaction>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d006      	beq.n	80027da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	661a      	str	r2, [r3, #96]	; 0x60
 80027d8:	e000      	b.n	80027dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80027da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80027ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3728      	adds	r7, #40	; 0x28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002808:	f7fe f99e 	bl	8000b48 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	4413      	add	r3, r2
 8002816:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002818:	f7fe f996 	bl	8000b48 <HAL_GetTick>
 800281c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800281e:	4b39      	ldr	r3, [pc, #228]	; (8002904 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	015b      	lsls	r3, r3, #5
 8002824:	0d1b      	lsrs	r3, r3, #20
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800282e:	e054      	b.n	80028da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d050      	beq.n	80028da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002838:	f7fe f986 	bl	8000b48 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	429a      	cmp	r2, r3
 8002846:	d902      	bls.n	800284e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d13d      	bne.n	80028ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800285c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002866:	d111      	bne.n	800288c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002870:	d004      	beq.n	800287c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287a:	d107      	bne.n	800288c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800288a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002894:	d10f      	bne.n	80028b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e017      	b.n	80028fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4013      	ands	r3, r2
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d19b      	bne.n	8002830 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000000 	.word	0x20000000

08002908 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800291a:	f7fe f915 	bl	8000b48 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	4413      	add	r3, r2
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800292a:	f7fe f90d 	bl	8000b48 <HAL_GetTick>
 800292e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002938:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00da      	lsls	r2, r3, #3
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	0d1b      	lsrs	r3, r3, #20
 8002948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002950:	e060      	b.n	8002a14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002958:	d107      	bne.n	800296a <SPI_WaitFifoStateUntilTimeout+0x62>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d104      	bne.n	800296a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002968:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d050      	beq.n	8002a14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002972:	f7fe f8e9 	bl	8000b48 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297e:	429a      	cmp	r2, r3
 8002980:	d902      	bls.n	8002988 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	2b00      	cmp	r3, #0
 8002986:	d13d      	bne.n	8002a04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002996:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029a0:	d111      	bne.n	80029c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029aa:	d004      	beq.n	80029b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b4:	d107      	bne.n	80029c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ce:	d10f      	bne.n	80029f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e010      	b.n	8002a26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d196      	bne.n	8002952 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3728      	adds	r7, #40	; 0x28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000000 	.word	0x20000000

08002a34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a48:	d111      	bne.n	8002a6e <SPI_EndRxTransaction+0x3a>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a52:	d004      	beq.n	8002a5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a5c:	d107      	bne.n	8002a6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff febd 	bl	80027f8 <SPI_WaitFlagStateUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e023      	b.n	8002adc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a9c:	d11d      	bne.n	8002ada <SPI_EndRxTransaction+0xa6>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa6:	d004      	beq.n	8002ab2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab0:	d113      	bne.n	8002ada <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7ff ff22 	bl	8002908 <SPI_WaitFifoStateUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ace:	f043 0220 	orr.w	r2, r3, #32
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e000      	b.n	8002adc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f7ff ff03 	bl	8002908 <SPI_WaitFifoStateUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e027      	b.n	8002b68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff fe68 	bl	80027f8 <SPI_WaitFlagStateUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e014      	b.n	8002b68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f7ff fedc 	bl	8002908 <SPI_WaitFifoStateUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5a:	f043 0220 	orr.w	r2, r3, #32
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e000      	b.n	8002b68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <memset>:
 8002b70:	4402      	add	r2, r0
 8002b72:	4603      	mov	r3, r0
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d100      	bne.n	8002b7a <memset+0xa>
 8002b78:	4770      	bx	lr
 8002b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b7e:	e7f9      	b.n	8002b74 <memset+0x4>

08002b80 <__libc_init_array>:
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	4d0d      	ldr	r5, [pc, #52]	; (8002bb8 <__libc_init_array+0x38>)
 8002b84:	4c0d      	ldr	r4, [pc, #52]	; (8002bbc <__libc_init_array+0x3c>)
 8002b86:	1b64      	subs	r4, r4, r5
 8002b88:	10a4      	asrs	r4, r4, #2
 8002b8a:	2600      	movs	r6, #0
 8002b8c:	42a6      	cmp	r6, r4
 8002b8e:	d109      	bne.n	8002ba4 <__libc_init_array+0x24>
 8002b90:	4d0b      	ldr	r5, [pc, #44]	; (8002bc0 <__libc_init_array+0x40>)
 8002b92:	4c0c      	ldr	r4, [pc, #48]	; (8002bc4 <__libc_init_array+0x44>)
 8002b94:	f000 f818 	bl	8002bc8 <_init>
 8002b98:	1b64      	subs	r4, r4, r5
 8002b9a:	10a4      	asrs	r4, r4, #2
 8002b9c:	2600      	movs	r6, #0
 8002b9e:	42a6      	cmp	r6, r4
 8002ba0:	d105      	bne.n	8002bae <__libc_init_array+0x2e>
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba8:	4798      	blx	r3
 8002baa:	3601      	adds	r6, #1
 8002bac:	e7ee      	b.n	8002b8c <__libc_init_array+0xc>
 8002bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb2:	4798      	blx	r3
 8002bb4:	3601      	adds	r6, #1
 8002bb6:	e7f2      	b.n	8002b9e <__libc_init_array+0x1e>
 8002bb8:	08002c20 	.word	0x08002c20
 8002bbc:	08002c20 	.word	0x08002c20
 8002bc0:	08002c20 	.word	0x08002c20
 8002bc4:	08002c24 	.word	0x08002c24

08002bc8 <_init>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	bf00      	nop
 8002bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bce:	bc08      	pop	{r3}
 8002bd0:	469e      	mov	lr, r3
 8002bd2:	4770      	bx	lr

08002bd4 <_fini>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	bf00      	nop
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr
