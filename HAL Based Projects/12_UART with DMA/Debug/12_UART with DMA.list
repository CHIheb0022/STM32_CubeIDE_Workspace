
12_UART with DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800415c  0800415c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a4  080041a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041a4  080041a4  000141a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041ac  080041ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  080041c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080041c0  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf9e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cf5  00000000  00000000  0002c01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  0002dd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000076f  00000000  00000000  0002e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ef3  00000000  00000000  0002ee3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c0a3  00000000  00000000  00053d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3d7a  00000000  00000000  0005fdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026c0  00000000  00000000  00143b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00146210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004144 	.word	0x08004144

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004144 	.word	0x08004144

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fa75 	bl	80009b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f828 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8c2 	bl	8000658 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 f89a 	bl	800060c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f868 	bl	80005ac <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_UART_Receive_DMA(&huart2, RX_Buffer, 2);// We use the DMA to receive the data directly from the UART peripheral (peripheral -> memory)
 80004dc:	2202      	movs	r2, #2
 80004de:	490e      	ldr	r1, [pc, #56]	; (8000518 <main+0x54>)
 80004e0:	480e      	ldr	r0, [pc, #56]	; (800051c <main+0x58>)
 80004e2:	f002 fbd3 	bl	8002c8c <HAL_UART_Receive_DMA>
	//Preventing the CPU intervention (offload the CPU to perform other tasks).
	//Toggle the LED if we receive the 'hi' message
	if ((RX_Buffer[0]=='H') && (RX_Buffer[1]=='I')) {
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <main+0x54>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b48      	cmp	r3, #72	; 0x48
 80004ec:	d1f6      	bne.n	80004dc <main+0x18>
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <main+0x54>)
 80004f0:	785b      	ldrb	r3, [r3, #1]
 80004f2:	2b49      	cmp	r3, #73	; 0x49
 80004f4:	d1f2      	bne.n	80004dc <main+0x18>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004f6:	2120      	movs	r1, #32
 80004f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fc:	f001 f83e 	bl	800157c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000504:	f000 facc 	bl	8000aa0 <HAL_Delay>
		RX_Buffer[0]=0;
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <main+0x54>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
		RX_Buffer[1]=0;// To avoid toggle' in in a loop the Led. // we can not see it changing state
 800050e:	4b02      	ldr	r3, [pc, #8]	; (8000518 <main+0x54>)
 8000510:	2200      	movs	r2, #0
 8000512:	705a      	strb	r2, [r3, #1]
	HAL_UART_Receive_DMA(&huart2, RX_Buffer, 2);// We use the DMA to receive the data directly from the UART peripheral (peripheral -> memory)
 8000514:	e7e2      	b.n	80004dc <main+0x18>
 8000516:	bf00      	nop
 8000518:	2000013c 	.word	0x2000013c
 800051c:	20000028 	.word	0x20000028

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b096      	sub	sp, #88	; 0x58
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	2244      	movs	r2, #68	; 0x44
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 fddb 	bl	80040ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	463b      	mov	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000542:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000546:	f001 f841 	bl	80015cc <HAL_PWREx_ControlVoltageScaling>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000550:	f000 f8c4 	bl	80006dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000554:	2310      	movs	r3, #16
 8000556:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000564:	2300      	movs	r3, #0
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4618      	mov	r0, r3
 800056e:	f001 f883 	bl	8001678 <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000578:	f000 f8b0 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fc4b 	bl	8001e30 <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a0:	f000 f89c 	bl	80006dc <Error_Handler>
  }
}
 80005a4:	bf00      	nop
 80005a6:	3758      	adds	r7, #88	; 0x58
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005b2:	4a15      	ldr	r2, [pc, #84]	; (8000608 <MX_USART2_UART_Init+0x5c>)
 80005b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005d2:	220c      	movs	r2, #12
 80005d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005f0:	f002 fafe 	bl	8002bf0 <HAL_UART_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 f86f 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000028 	.word	0x20000028
 8000608:	40004400 	.word	0x40004400

0800060c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_DMA_Init+0x48>)
 8000614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <MX_DMA_Init+0x48>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6493      	str	r3, [r2, #72]	; 0x48
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <MX_DMA_Init+0x48>)
 8000620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	2010      	movs	r0, #16
 8000630:	f000 fb35 	bl	8000c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000634:	2010      	movs	r0, #16
 8000636:	f000 fb4e 	bl	8000cd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	2011      	movs	r0, #17
 8000640:	f000 fb2d 	bl	8000c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000644:	2011      	movs	r0, #17
 8000646:	f000 fb46 	bl	8000cd6 <HAL_NVIC_EnableIRQ>

}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_GPIO_Init+0x5c>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000670:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <MX_GPIO_Init+0x5c>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_GPIO_Init+0x5c>)
 800067a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2120      	movs	r1, #32
 8000688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068c:	f000 ff5e 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000690:	2320      	movs	r3, #32
 8000692:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a8:	f000 fda6 	bl	80011f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ac:	bf00      	nop
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000

080006b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_DMA(&huart2, RX_Buffer, 10); //You need to toggle a breakpoint on this line!
 80006c0:	220a      	movs	r2, #10
 80006c2:	4904      	ldr	r1, [pc, #16]	; (80006d4 <HAL_UART_RxCpltCallback+0x1c>)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <HAL_UART_RxCpltCallback+0x20>)
 80006c6:	f002 fae1 	bl	8002c8c <HAL_UART_Receive_DMA>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000013c 	.word	0x2000013c
 80006d8:	20000028 	.word	0x20000028

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>
	...

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_MspInit+0x44>)
 80006f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <HAL_MspInit+0x44>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6613      	str	r3, [r2, #96]	; 0x60
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_MspInit+0x44>)
 80006fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <HAL_MspInit+0x44>)
 8000708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <HAL_MspInit+0x44>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000710:	6593      	str	r3, [r2, #88]	; 0x58
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_MspInit+0x44>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b0ac      	sub	sp, #176	; 0xb0
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2288      	movs	r2, #136	; 0x88
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f003 fcca 	bl	80040ea <memset>
  if(huart->Instance==USART2)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a4f      	ldr	r2, [pc, #316]	; (8000898 <HAL_UART_MspInit+0x168>)
 800075c:	4293      	cmp	r3, r2
 800075e:	f040 8096 	bne.w	800088e <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000762:	2302      	movs	r3, #2
 8000764:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000766:	2300      	movs	r3, #0
 8000768:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fd82 	bl	8002278 <HAL_RCCEx_PeriphCLKConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800077a:	f7ff ffaf 	bl	80006dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800077e:	4b47      	ldr	r3, [pc, #284]	; (800089c <HAL_UART_MspInit+0x16c>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000782:	4a46      	ldr	r2, [pc, #280]	; (800089c <HAL_UART_MspInit+0x16c>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	6593      	str	r3, [r2, #88]	; 0x58
 800078a:	4b44      	ldr	r3, [pc, #272]	; (800089c <HAL_UART_MspInit+0x16c>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b41      	ldr	r3, [pc, #260]	; (800089c <HAL_UART_MspInit+0x16c>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a40      	ldr	r2, [pc, #256]	; (800089c <HAL_UART_MspInit+0x16c>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b3e      	ldr	r3, [pc, #248]	; (800089c <HAL_UART_MspInit+0x16c>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ae:	230c      	movs	r3, #12
 80007b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007c6:	2307      	movs	r3, #7
 80007c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f000 fd0f 	bl	80011f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <HAL_UART_MspInit+0x170>)
 80007dc:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <HAL_UART_MspInit+0x174>)
 80007de:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <HAL_UART_MspInit+0x170>)
 80007e2:	2202      	movs	r2, #2
 80007e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <HAL_UART_MspInit+0x170>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <HAL_UART_MspInit+0x170>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <HAL_UART_MspInit+0x170>)
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <HAL_UART_MspInit+0x170>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <HAL_UART_MspInit+0x170>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <HAL_UART_MspInit+0x170>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <HAL_UART_MspInit+0x170>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000810:	4823      	ldr	r0, [pc, #140]	; (80008a0 <HAL_UART_MspInit+0x170>)
 8000812:	f000 fa7b 	bl	8000d0c <HAL_DMA_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800081c:	f7ff ff5e 	bl	80006dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <HAL_UART_MspInit+0x170>)
 8000824:	671a      	str	r2, [r3, #112]	; 0x70
 8000826:	4a1e      	ldr	r2, [pc, #120]	; (80008a0 <HAL_UART_MspInit+0x170>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <HAL_UART_MspInit+0x178>)
 800082e:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <HAL_UART_MspInit+0x17c>)
 8000830:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <HAL_UART_MspInit+0x178>)
 8000834:	2202      	movs	r2, #2
 8000836:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <HAL_UART_MspInit+0x178>)
 800083a:	2210      	movs	r2, #16
 800083c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <HAL_UART_MspInit+0x178>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_UART_MspInit+0x178>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <HAL_UART_MspInit+0x178>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_UART_MspInit+0x178>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_UART_MspInit+0x178>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_UART_MspInit+0x178>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000862:	4811      	ldr	r0, [pc, #68]	; (80008a8 <HAL_UART_MspInit+0x178>)
 8000864:	f000 fa52 	bl	8000d0c <HAL_DMA_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 800086e:	f7ff ff35 	bl	80006dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <HAL_UART_MspInit+0x178>)
 8000876:	66da      	str	r2, [r3, #108]	; 0x6c
 8000878:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <HAL_UART_MspInit+0x178>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2026      	movs	r0, #38	; 0x26
 8000884:	f000 fa0b 	bl	8000c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000888:	2026      	movs	r0, #38	; 0x26
 800088a:	f000 fa24 	bl	8000cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800088e:	bf00      	nop
 8000890:	37b0      	adds	r7, #176	; 0xb0
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40004400 	.word	0x40004400
 800089c:	40021000 	.word	0x40021000
 80008a0:	200000ac 	.word	0x200000ac
 80008a4:	4002006c 	.word	0x4002006c
 80008a8:	200000f4 	.word	0x200000f4
 80008ac:	40020080 	.word	0x40020080

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f8b0 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <DMA1_Channel6_IRQHandler+0x10>)
 800090a:	f000 fb96 	bl	800103a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000ac 	.word	0x200000ac

08000918 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <DMA1_Channel7_IRQHandler+0x10>)
 800091e:	f000 fb8c 	bl	800103a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000f4 	.word	0x200000f4

0800092c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <USART2_IRQHandler+0x10>)
 8000932:	f002 fa01 	bl	8002d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000028 	.word	0x20000028

08000940 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <SystemInit+0x20>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <SystemInit+0x20>)
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800099c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000968:	f7ff ffea 	bl	8000940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800096e:	490d      	ldr	r1, [pc, #52]	; (80009a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <LoopForever+0xe>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000984:	4c0a      	ldr	r4, [pc, #40]	; (80009b0 <LoopForever+0x16>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000992:	f003 fbb3 	bl	80040fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000996:	f7ff fd95 	bl	80004c4 <main>

0800099a <LoopForever>:

LoopForever:
    b LoopForever
 800099a:	e7fe      	b.n	800099a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800099c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a8:	080041b4 	.word	0x080041b4
  ldr r2, =_sbss
 80009ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009b0:	20000144 	.word	0x20000144

080009b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC1_2_IRQHandler>

080009b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 f961 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009c6:	200f      	movs	r0, #15
 80009c8:	f000 f80e 	bl	80009e8 <HAL_InitTick>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	e001      	b.n	80009dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009d8:	f7ff fe86 	bl	80006e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009dc:	79fb      	ldrb	r3, [r7, #7]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_InitTick+0x6c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d023      	beq.n	8000a44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <HAL_InitTick+0x70>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_InitTick+0x6c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f96d 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d10f      	bne.n	8000a3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d809      	bhi.n	8000a38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f000 f937 	bl	8000c9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_InitTick+0x74>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
 8000a36:	e007      	b.n	8000a48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
 8000a3c:	e004      	b.n	8000a48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	73fb      	strb	r3, [r7, #15]
 8000a42:	e001      	b.n	8000a48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000004 	.word	0x20000004

08000a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x20>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_IncTick+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_IncTick+0x24>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000140 	.word	0x20000140

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_GetTick+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000140 	.word	0x20000140

08000aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa8:	f7ff ffee 	bl	8000a88 <HAL_GetTick>
 8000aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab8:	d005      	beq.n	8000ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_Delay+0x44>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ac6:	bf00      	nop
 8000ac8:	f7ff ffde 	bl	8000a88 <HAL_GetTick>
 8000acc:	4602      	mov	r2, r0
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d8f7      	bhi.n	8000ac8 <HAL_Delay+0x28>
  {
  }
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008

08000ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db0b      	blt.n	8000b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 021f 	and.w	r2, r3, #31
 8000b64:	4907      	ldr	r1, [pc, #28]	; (8000b84 <__NVIC_EnableIRQ+0x38>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	095b      	lsrs	r3, r3, #5
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000e100 	.word	0xe000e100

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	; 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f7ff ff8e 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff29 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff3e 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff8e 	bl	8000bdc <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5d 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff31 	bl	8000b4c <__NVIC_EnableIRQ>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffa2 	bl	8000c44 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e098      	b.n	8000e50 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b4d      	ldr	r3, [pc, #308]	; (8000e5c <HAL_DMA_Init+0x150>)
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d80f      	bhi.n	8000d4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b4b      	ldr	r3, [pc, #300]	; (8000e60 <HAL_DMA_Init+0x154>)
 8000d32:	4413      	add	r3, r2
 8000d34:	4a4b      	ldr	r2, [pc, #300]	; (8000e64 <HAL_DMA_Init+0x158>)
 8000d36:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	009a      	lsls	r2, r3, #2
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a48      	ldr	r2, [pc, #288]	; (8000e68 <HAL_DMA_Init+0x15c>)
 8000d46:	641a      	str	r2, [r3, #64]	; 0x40
 8000d48:	e00e      	b.n	8000d68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <HAL_DMA_Init+0x160>)
 8000d52:	4413      	add	r3, r2
 8000d54:	4a43      	ldr	r2, [pc, #268]	; (8000e64 <HAL_DMA_Init+0x158>)
 8000d56:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5a:	091b      	lsrs	r3, r3, #4
 8000d5c:	009a      	lsls	r2, r3, #2
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a42      	ldr	r2, [pc, #264]	; (8000e70 <HAL_DMA_Init+0x164>)
 8000d66:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dc2:	d039      	beq.n	8000e38 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <HAL_DMA_Init+0x15c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d11a      	bne.n	8000e04 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000dce:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <HAL_DMA_Init+0x168>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f003 031c 	and.w	r3, r3, #28
 8000dda:	210f      	movs	r1, #15
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4924      	ldr	r1, [pc, #144]	; (8000e74 <HAL_DMA_Init+0x168>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <HAL_DMA_Init+0x168>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6859      	ldr	r1, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df4:	f003 031c 	and.w	r3, r3, #28
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	491d      	ldr	r1, [pc, #116]	; (8000e74 <HAL_DMA_Init+0x168>)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	600b      	str	r3, [r1, #0]
 8000e02:	e019      	b.n	8000e38 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <HAL_DMA_Init+0x16c>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0c:	f003 031c 	and.w	r3, r3, #28
 8000e10:	210f      	movs	r1, #15
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	4917      	ldr	r1, [pc, #92]	; (8000e78 <HAL_DMA_Init+0x16c>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_DMA_Init+0x16c>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6859      	ldr	r1, [r3, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f003 031c 	and.w	r3, r3, #28
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	4911      	ldr	r1, [pc, #68]	; (8000e78 <HAL_DMA_Init+0x16c>)
 8000e34:	4313      	orrs	r3, r2
 8000e36:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40020407 	.word	0x40020407
 8000e60:	bffdfff8 	.word	0xbffdfff8
 8000e64:	cccccccd 	.word	0xcccccccd
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	bffdfbf8 	.word	0xbffdfbf8
 8000e70:	40020400 	.word	0x40020400
 8000e74:	400200a8 	.word	0x400200a8
 8000e78:	400204a8 	.word	0x400204a8

08000e7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d101      	bne.n	8000e9c <HAL_DMA_Start_IT+0x20>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	e04b      	b.n	8000f34 <HAL_DMA_Start_IT+0xb8>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d13a      	bne.n	8000f26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0201 	bic.w	r2, r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f000 f95f 	bl	8001198 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d008      	beq.n	8000ef4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 020e 	orr.w	r2, r2, #14
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e00f      	b.n	8000f14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0204 	bic.w	r2, r2, #4
 8000f02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 020a 	orr.w	r2, r2, #10
 8000f12:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0201 	orr.w	r2, r2, #1
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e005      	b.n	8000f32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d008      	beq.n	8000f66 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2204      	movs	r2, #4
 8000f58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e022      	b.n	8000fac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 020e 	bic.w	r2, r2, #14
 8000f74:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0201 	bic.w	r2, r2, #1
 8000f84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f003 021c 	and.w	r2, r3, #28
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	2101      	movs	r1, #1
 8000f94:	fa01 f202 	lsl.w	r2, r1, r2
 8000f98:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d005      	beq.n	8000fdc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e029      	b.n	8001030 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 020e 	bic.w	r2, r2, #14
 8000fea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0201 	bic.w	r2, r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001000:	f003 021c 	and.w	r2, r3, #28
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	2101      	movs	r1, #1
 800100a:	fa01 f202 	lsl.w	r2, r1, r2
 800100e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	4798      	blx	r3
    }
  }
  return status;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f003 031c 	and.w	r3, r3, #28
 800105a:	2204      	movs	r2, #4
 800105c:	409a      	lsls	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d026      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x7a>
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	d021      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0320 	and.w	r3, r3, #32
 800107a:	2b00      	cmp	r3, #0
 800107c:	d107      	bne.n	800108e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0204 	bic.w	r2, r2, #4
 800108c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f003 021c 	and.w	r2, r3, #28
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	2104      	movs	r1, #4
 800109c:	fa01 f202 	lsl.w	r2, r1, r2
 80010a0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d071      	beq.n	800118e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80010b2:	e06c      	b.n	800118e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b8:	f003 031c 	and.w	r3, r3, #28
 80010bc:	2202      	movs	r2, #2
 80010be:	409a      	lsls	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d02e      	beq.n	8001126 <HAL_DMA_IRQHandler+0xec>
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d029      	beq.n	8001126 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0320 	and.w	r3, r3, #32
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10b      	bne.n	80010f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 020a 	bic.w	r2, r2, #10
 80010ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fc:	f003 021c 	and.w	r2, r3, #28
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	2102      	movs	r1, #2
 8001106:	fa01 f202 	lsl.w	r2, r1, r2
 800110a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001118:	2b00      	cmp	r3, #0
 800111a:	d038      	beq.n	800118e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001124:	e033      	b.n	800118e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f003 031c 	and.w	r3, r3, #28
 800112e:	2208      	movs	r2, #8
 8001130:	409a      	lsls	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d02a      	beq.n	8001190 <HAL_DMA_IRQHandler+0x156>
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d025      	beq.n	8001190 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 020e 	bic.w	r2, r2, #14
 8001152:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001158:	f003 021c 	and.w	r2, r3, #28
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	2101      	movs	r1, #1
 8001162:	fa01 f202 	lsl.w	r2, r1, r2
 8001166:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001182:	2b00      	cmp	r3, #0
 8001184:	d004      	beq.n	8001190 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800118e:	bf00      	nop
 8001190:	bf00      	nop
}
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f003 021c 	and.w	r2, r3, #28
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	2101      	movs	r1, #1
 80011b4:	fa01 f202 	lsl.w	r2, r1, r2
 80011b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2b10      	cmp	r3, #16
 80011c8:	d108      	bne.n	80011dc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011da:	e007      	b.n	80011ec <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	60da      	str	r2, [r3, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001206:	e17f      	b.n	8001508 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8171 	beq.w	8001502 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b01      	cmp	r3, #1
 800122a:	d005      	beq.n	8001238 <HAL_GPIO_Init+0x40>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d130      	bne.n	800129a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800126e:	2201      	movs	r2, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	f003 0201 	and.w	r2, r3, #1
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d118      	bne.n	80012d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012ac:	2201      	movs	r2, #1
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	08db      	lsrs	r3, r3, #3
 80012c2:	f003 0201 	and.w	r2, r3, #1
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d017      	beq.n	8001314 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d123      	bne.n	8001368 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	08da      	lsrs	r2, r3, #3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3208      	adds	r2, #8
 8001328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	220f      	movs	r2, #15
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	08da      	lsrs	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3208      	adds	r2, #8
 8001362:	6939      	ldr	r1, [r7, #16]
 8001364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0203 	and.w	r2, r3, #3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80ac 	beq.w	8001502 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	4b5f      	ldr	r3, [pc, #380]	; (8001528 <HAL_GPIO_Init+0x330>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ae:	4a5e      	ldr	r2, [pc, #376]	; (8001528 <HAL_GPIO_Init+0x330>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6613      	str	r3, [r2, #96]	; 0x60
 80013b6:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <HAL_GPIO_Init+0x330>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013c2:	4a5a      	ldr	r2, [pc, #360]	; (800152c <HAL_GPIO_Init+0x334>)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	3302      	adds	r3, #2
 80013ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	220f      	movs	r2, #15
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ec:	d025      	beq.n	800143a <HAL_GPIO_Init+0x242>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4f      	ldr	r2, [pc, #316]	; (8001530 <HAL_GPIO_Init+0x338>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d01f      	beq.n	8001436 <HAL_GPIO_Init+0x23e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4e      	ldr	r2, [pc, #312]	; (8001534 <HAL_GPIO_Init+0x33c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d019      	beq.n	8001432 <HAL_GPIO_Init+0x23a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4d      	ldr	r2, [pc, #308]	; (8001538 <HAL_GPIO_Init+0x340>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0x236>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4c      	ldr	r2, [pc, #304]	; (800153c <HAL_GPIO_Init+0x344>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00d      	beq.n	800142a <HAL_GPIO_Init+0x232>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4b      	ldr	r2, [pc, #300]	; (8001540 <HAL_GPIO_Init+0x348>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d007      	beq.n	8001426 <HAL_GPIO_Init+0x22e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4a      	ldr	r2, [pc, #296]	; (8001544 <HAL_GPIO_Init+0x34c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_GPIO_Init+0x22a>
 800141e:	2306      	movs	r3, #6
 8001420:	e00c      	b.n	800143c <HAL_GPIO_Init+0x244>
 8001422:	2307      	movs	r3, #7
 8001424:	e00a      	b.n	800143c <HAL_GPIO_Init+0x244>
 8001426:	2305      	movs	r3, #5
 8001428:	e008      	b.n	800143c <HAL_GPIO_Init+0x244>
 800142a:	2304      	movs	r3, #4
 800142c:	e006      	b.n	800143c <HAL_GPIO_Init+0x244>
 800142e:	2303      	movs	r3, #3
 8001430:	e004      	b.n	800143c <HAL_GPIO_Init+0x244>
 8001432:	2302      	movs	r3, #2
 8001434:	e002      	b.n	800143c <HAL_GPIO_Init+0x244>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_GPIO_Init+0x244>
 800143a:	2300      	movs	r3, #0
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	f002 0203 	and.w	r2, r2, #3
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	4093      	lsls	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800144c:	4937      	ldr	r1, [pc, #220]	; (800152c <HAL_GPIO_Init+0x334>)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800145a:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <HAL_GPIO_Init+0x350>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800147e:	4a32      	ldr	r2, [pc, #200]	; (8001548 <HAL_GPIO_Init+0x350>)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001484:	4b30      	ldr	r3, [pc, #192]	; (8001548 <HAL_GPIO_Init+0x350>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014a8:	4a27      	ldr	r2, [pc, #156]	; (8001548 <HAL_GPIO_Init+0x350>)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <HAL_GPIO_Init+0x350>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014d2:	4a1d      	ldr	r2, [pc, #116]	; (8001548 <HAL_GPIO_Init+0x350>)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_GPIO_Init+0x350>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <HAL_GPIO_Init+0x350>)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f ae78 	bne.w	8001208 <HAL_GPIO_Init+0x10>
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	40010000 	.word	0x40010000
 8001530:	48000400 	.word	0x48000400
 8001534:	48000800 	.word	0x48000800
 8001538:	48000c00 	.word	0x48000c00
 800153c:	48001000 	.word	0x48001000
 8001540:	48001400 	.word	0x48001400
 8001544:	48001800 	.word	0x48001800
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800155c:	787b      	ldrb	r3, [r7, #1]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001568:	e002      	b.n	8001570 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4013      	ands	r3, r2
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43d9      	mvns	r1, r3
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	400b      	ands	r3, r1
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40007000 	.word	0x40007000

080015cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015da:	d130      	bne.n	800163e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015dc:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e8:	d038      	beq.n	800165c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2232      	movs	r2, #50	; 0x32
 8001600:	fb02 f303 	mul.w	r3, r2, r3
 8001604:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	0c9b      	lsrs	r3, r3, #18
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001610:	e002      	b.n	8001618 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3b01      	subs	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001624:	d102      	bne.n	800162c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f2      	bne.n	8001612 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001638:	d110      	bne.n	800165c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e00f      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164a:	d007      	beq.n	800165c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001654:	4a05      	ldr	r2, [pc, #20]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40007000 	.word	0x40007000
 8001670:	20000000 	.word	0x20000000
 8001674:	431bde83 	.word	0x431bde83

08001678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e3ca      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168a:	4b97      	ldr	r3, [pc, #604]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001694:	4b94      	ldr	r3, [pc, #592]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80e4 	beq.w	8001874 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d007      	beq.n	80016c2 <HAL_RCC_OscConfig+0x4a>
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b0c      	cmp	r3, #12
 80016b6:	f040 808b 	bne.w	80017d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	f040 8087 	bne.w	80017d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c2:	4b89      	ldr	r3, [pc, #548]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x62>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e3a2      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1a      	ldr	r2, [r3, #32]
 80016de:	4b82      	ldr	r3, [pc, #520]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d004      	beq.n	80016f4 <HAL_RCC_OscConfig+0x7c>
 80016ea:	4b7f      	ldr	r3, [pc, #508]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016f2:	e005      	b.n	8001700 <HAL_RCC_OscConfig+0x88>
 80016f4:	4b7c      	ldr	r3, [pc, #496]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 80016f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fa:	091b      	lsrs	r3, r3, #4
 80016fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001700:	4293      	cmp	r3, r2
 8001702:	d223      	bcs.n	800174c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4618      	mov	r0, r3
 800170a:	f000 fd55 	bl	80021b8 <RCC_SetFlashLatencyFromMSIRange>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e383      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001718:	4b73      	ldr	r3, [pc, #460]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a72      	ldr	r2, [pc, #456]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 800171e:	f043 0308 	orr.w	r3, r3, #8
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b70      	ldr	r3, [pc, #448]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	496d      	ldr	r1, [pc, #436]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001736:	4b6c      	ldr	r3, [pc, #432]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	4968      	ldr	r1, [pc, #416]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
 800174a:	e025      	b.n	8001798 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174c:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a65      	ldr	r2, [pc, #404]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4960      	ldr	r1, [pc, #384]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176a:	4b5f      	ldr	r3, [pc, #380]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	495b      	ldr	r1, [pc, #364]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fd15 	bl	80021b8 <RCC_SetFlashLatencyFromMSIRange>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e343      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001798:	f000 fc4a 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 800179c:	4602      	mov	r2, r0
 800179e:	4b52      	ldr	r3, [pc, #328]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	4950      	ldr	r1, [pc, #320]	; (80018ec <HAL_RCC_OscConfig+0x274>)
 80017aa:	5ccb      	ldrb	r3, [r1, r3]
 80017ac:	f003 031f 	and.w	r3, r3, #31
 80017b0:	fa22 f303 	lsr.w	r3, r2, r3
 80017b4:	4a4e      	ldr	r2, [pc, #312]	; (80018f0 <HAL_RCC_OscConfig+0x278>)
 80017b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017b8:	4b4e      	ldr	r3, [pc, #312]	; (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f913 	bl	80009e8 <HAL_InitTick>
 80017c2:	4603      	mov	r3, r0
 80017c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d052      	beq.n	8001872 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	e327      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d032      	beq.n	800183e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017d8:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a42      	ldr	r2, [pc, #264]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017e4:	f7ff f950 	bl	8000a88 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017ec:	f7ff f94c 	bl	8000a88 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e310      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017fe:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a36      	ldr	r2, [pc, #216]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4931      	ldr	r1, [pc, #196]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001828:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	492c      	ldr	r1, [pc, #176]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
 800183c:	e01a      	b.n	8001874 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800183e:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a29      	ldr	r2, [pc, #164]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800184a:	f7ff f91d 	bl	8000a88 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001852:	f7ff f919 	bl	8000a88 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e2dd      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x1da>
 8001870:	e000      	b.n	8001874 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001872:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d074      	beq.n	800196a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b08      	cmp	r3, #8
 8001884:	d005      	beq.n	8001892 <HAL_RCC_OscConfig+0x21a>
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	2b0c      	cmp	r3, #12
 800188a:	d10e      	bne.n	80018aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d10b      	bne.n	80018aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d064      	beq.n	8001968 <HAL_RCC_OscConfig+0x2f0>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d160      	bne.n	8001968 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e2ba      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x24a>
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 80018ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	e026      	b.n	8001910 <HAL_RCC_OscConfig+0x298>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ca:	d115      	bne.n	80018f8 <HAL_RCC_OscConfig+0x280>
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 80018d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a02      	ldr	r2, [pc, #8]	; (80018e8 <HAL_RCC_OscConfig+0x270>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	e014      	b.n	8001910 <HAL_RCC_OscConfig+0x298>
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	0800415c 	.word	0x0800415c
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004
 80018f8:	4ba0      	ldr	r3, [pc, #640]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a9f      	ldr	r2, [pc, #636]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b9d      	ldr	r3, [pc, #628]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a9c      	ldr	r2, [pc, #624]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 800190a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff f8b6 	bl	8000a88 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff f8b2 	bl	8000a88 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e276      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001932:	4b92      	ldr	r3, [pc, #584]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x2a8>
 800193e:	e014      	b.n	800196a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff f8a2 	bl	8000a88 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff f89e 	bl	8000a88 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e262      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800195a:	4b88      	ldr	r3, [pc, #544]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x2d0>
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d060      	beq.n	8001a38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2b04      	cmp	r3, #4
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x310>
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d119      	bne.n	80019b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d116      	bne.n	80019b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001988:	4b7c      	ldr	r3, [pc, #496]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_OscConfig+0x328>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e23f      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	4b76      	ldr	r3, [pc, #472]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	4973      	ldr	r1, [pc, #460]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b4:	e040      	b.n	8001a38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d023      	beq.n	8001a06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019be:	4b6f      	ldr	r3, [pc, #444]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a6e      	ldr	r2, [pc, #440]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff f85d 	bl	8000a88 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff f859 	bl	8000a88 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e21d      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e4:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b62      	ldr	r3, [pc, #392]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	061b      	lsls	r3, r3, #24
 80019fe:	495f      	ldr	r1, [pc, #380]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
 8001a04:	e018      	b.n	8001a38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a06:	4b5d      	ldr	r3, [pc, #372]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a5c      	ldr	r2, [pc, #368]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff f839 	bl	8000a88 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff f835 	bl	8000a88 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e1f9      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a2c:	4b53      	ldr	r3, [pc, #332]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d03c      	beq.n	8001abe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4c:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a52:	4a4a      	ldr	r2, [pc, #296]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f814 	bl	8000a88 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff f810 	bl	8000a88 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1d4      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a76:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ef      	beq.n	8001a64 <HAL_RCC_OscConfig+0x3ec>
 8001a84:	e01b      	b.n	8001abe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a86:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8c:	4a3b      	ldr	r2, [pc, #236]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a96:	f7fe fff7 	bl	8000a88 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9e:	f7fe fff3 	bl	8000a88 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1b7      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab0:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ef      	bne.n	8001a9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80a6 	beq.w	8001c18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10d      	bne.n	8001af8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af4:	2301      	movs	r3, #1
 8001af6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_RCC_OscConfig+0x508>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d118      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_RCC_OscConfig+0x508>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <HAL_RCC_OscConfig+0x508>)
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b10:	f7fe ffba 	bl	8000a88 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b18:	f7fe ffb6 	bl	8000a88 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e17a      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_RCC_OscConfig+0x508>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d108      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4d8>
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b4e:	e029      	b.n	8001ba4 <HAL_RCC_OscConfig+0x52c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	d115      	bne.n	8001b84 <HAL_RCC_OscConfig+0x50c>
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5e:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	4a03      	ldr	r2, [pc, #12]	; (8001b7c <HAL_RCC_OscConfig+0x504>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b78:	e014      	b.n	8001ba4 <HAL_RCC_OscConfig+0x52c>
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40007000 	.word	0x40007000
 8001b84:	4b9c      	ldr	r3, [pc, #624]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	4a9b      	ldr	r2, [pc, #620]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b94:	4b98      	ldr	r3, [pc, #608]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9a:	4a97      	ldr	r2, [pc, #604]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d016      	beq.n	8001bda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7fe ff6c 	bl	8000a88 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	f7fe ff68 	bl	8000a88 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e12a      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bca:	4b8b      	ldr	r3, [pc, #556]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0ed      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x53c>
 8001bd8:	e015      	b.n	8001c06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bda:	f7fe ff55 	bl	8000a88 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be2:	f7fe ff51 	bl	8000a88 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e113      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf8:	4b7f      	ldr	r3, [pc, #508]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1ed      	bne.n	8001be2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c06:	7ffb      	ldrb	r3, [r7, #31]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0c:	4b7a      	ldr	r3, [pc, #488]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	4a79      	ldr	r2, [pc, #484]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80fe 	beq.w	8001e1e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	f040 80d0 	bne.w	8001dcc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c2c:	4b72      	ldr	r3, [pc, #456]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d130      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d127      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d11f      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c6c:	2a07      	cmp	r2, #7
 8001c6e:	bf14      	ite	ne
 8001c70:	2201      	movne	r2, #1
 8001c72:	2200      	moveq	r2, #0
 8001c74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d113      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c84:	085b      	lsrs	r3, r3, #1
 8001c86:	3b01      	subs	r3, #1
 8001c88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d109      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	085b      	lsrs	r3, r3, #1
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d06e      	beq.n	8001d80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	d069      	beq.n	8001d7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ca8:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cb4:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0ad      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cc4:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cd0:	f7fe feda 	bl	8000a88 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7fe fed6 	bl	8000a88 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e09a      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cea:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf6:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <HAL_RCC_OscConfig+0x784>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d06:	3a01      	subs	r2, #1
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d10:	0212      	lsls	r2, r2, #8
 8001d12:	4311      	orrs	r1, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d18:	0852      	lsrs	r2, r2, #1
 8001d1a:	3a01      	subs	r2, #1
 8001d1c:	0552      	lsls	r2, r2, #21
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d24:	0852      	lsrs	r2, r2, #1
 8001d26:	3a01      	subs	r2, #1
 8001d28:	0652      	lsls	r2, r2, #25
 8001d2a:	4311      	orrs	r1, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d30:	0912      	lsrs	r2, r2, #4
 8001d32:	0452      	lsls	r2, r2, #17
 8001d34:	430a      	orrs	r2, r1
 8001d36:	4930      	ldr	r1, [pc, #192]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a2d      	ldr	r2, [pc, #180]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a2a      	ldr	r2, [pc, #168]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d54:	f7fe fe98 	bl	8000a88 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7fe fe94 	bl	8000a88 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e058      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7a:	e050      	b.n	8001e1e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e04f      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d148      	bne.n	8001e1e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a19      	ldr	r2, [pc, #100]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001da4:	f7fe fe70 	bl	8000a88 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7fe fe6c 	bl	8000a88 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e030      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x734>
 8001dca:	e028      	b.n	8001e1e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	d023      	beq.n	8001e1a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <HAL_RCC_OscConfig+0x780>)
 8001dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7fe fe53 	bl	8000a88 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de4:	e00c      	b.n	8001e00 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de6:	f7fe fe4f 	bl	8000a88 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d905      	bls.n	8001e00 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e013      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_OscConfig+0x7b0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1ec      	bne.n	8001de6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_OscConfig+0x7b0>)
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4905      	ldr	r1, [pc, #20]	; (8001e28 <HAL_RCC_OscConfig+0x7b0>)
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_RCC_OscConfig+0x7b4>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	60cb      	str	r3, [r1, #12]
 8001e18:	e001      	b.n	8001e1e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	feeefffc 	.word	0xfeeefffc

08001e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0e7      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b75      	ldr	r3, [pc, #468]	; (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d910      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b72      	ldr	r3, [pc, #456]	; (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	4970      	ldr	r1, [pc, #448]	; (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b6e      	ldr	r3, [pc, #440]	; (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0cf      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d010      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	4b66      	ldr	r3, [pc, #408]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d908      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e90:	4b63      	ldr	r3, [pc, #396]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4960      	ldr	r1, [pc, #384]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d04c      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb6:	4b5a      	ldr	r3, [pc, #360]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d121      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0a6      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ece:	4b54      	ldr	r3, [pc, #336]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d115      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e09a      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ee6:	4b4e      	ldr	r3, [pc, #312]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d109      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e08e      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef6:	4b4a      	ldr	r3, [pc, #296]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e086      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f06:	4b46      	ldr	r3, [pc, #280]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f023 0203 	bic.w	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4943      	ldr	r1, [pc, #268]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f18:	f7fe fdb6 	bl	8000a88 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7fe fdb2 	bl	8000a88 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e06e      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 020c 	and.w	r2, r3, #12
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d1eb      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d010      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	4b31      	ldr	r3, [pc, #196]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d208      	bcs.n	8001f76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	492b      	ldr	r1, [pc, #172]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f76:	4b29      	ldr	r3, [pc, #164]	; (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d210      	bcs.n	8001fa6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f84:	4b25      	ldr	r3, [pc, #148]	; (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 0207 	bic.w	r2, r3, #7
 8001f8c:	4923      	ldr	r1, [pc, #140]	; (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e036      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	4918      	ldr	r1, [pc, #96]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d009      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4910      	ldr	r1, [pc, #64]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fe4:	f000 f824 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	490b      	ldr	r1, [pc, #44]	; (8002024 <HAL_RCC_ClockConfig+0x1f4>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	4a09      	ldr	r2, [pc, #36]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8002002:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x1fc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fced 	bl	80009e8 <HAL_InitTick>
 800200e:	4603      	mov	r3, r0
 8002010:	72fb      	strb	r3, [r7, #11]

  return status;
 8002012:	7afb      	ldrb	r3, [r7, #11]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40022000 	.word	0x40022000
 8002020:	40021000 	.word	0x40021000
 8002024:	0800415c 	.word	0x0800415c
 8002028:	20000000 	.word	0x20000000
 800202c:	20000004 	.word	0x20000004

08002030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203e:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_GetSysClockFreq+0x34>
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d121      	bne.n	80020a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d11e      	bne.n	80020a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002064:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d107      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002070:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 8002072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	e005      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800208c:	4a2b      	ldr	r2, [pc, #172]	; (800213c <HAL_RCC_GetSysClockFreq+0x10c>)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002094:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10d      	bne.n	80020b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d102      	bne.n	80020ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_RCC_GetSysClockFreq+0x110>)
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	e004      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020b4:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_RCC_GetSysClockFreq+0x114>)
 80020b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b0c      	cmp	r3, #12
 80020bc:	d134      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d003      	beq.n	80020d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d003      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0xac>
 80020d4:	e005      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_RCC_GetSysClockFreq+0x110>)
 80020d8:	617b      	str	r3, [r7, #20]
      break;
 80020da:	e005      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_RCC_GetSysClockFreq+0x114>)
 80020de:	617b      	str	r3, [r7, #20]
      break;
 80020e0:	e002      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	617b      	str	r3, [r7, #20]
      break;
 80020e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	3301      	adds	r3, #1
 80020f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	fb03 f202 	mul.w	r2, r3, r2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	fbb2 f3f3 	udiv	r3, r2, r3
 800210c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	0e5b      	lsrs	r3, r3, #25
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	3301      	adds	r3, #1
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	fbb2 f3f3 	udiv	r3, r2, r3
 8002126:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002128:	69bb      	ldr	r3, [r7, #24]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	08004174 	.word	0x08004174
 8002140:	00f42400 	.word	0x00f42400
 8002144:	007a1200 	.word	0x007a1200

08002148 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_RCC_GetHCLKFreq+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000000 	.word	0x20000000

08002160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002164:	f7ff fff0 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	4904      	ldr	r1, [pc, #16]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	0800416c 	.word	0x0800416c

0800218c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002190:	f7ff ffda 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002194:	4602      	mov	r2, r0
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	0adb      	lsrs	r3, r3, #11
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	4904      	ldr	r1, [pc, #16]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021a2:	5ccb      	ldrb	r3, [r1, r3]
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	0800416c 	.word	0x0800416c

080021b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021c0:	2300      	movs	r3, #0
 80021c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021c4:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021d0:	f7ff f9ee 	bl	80015b0 <HAL_PWREx_GetVoltageRange>
 80021d4:	6178      	str	r0, [r7, #20]
 80021d6:	e014      	b.n	8002202 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	4a24      	ldr	r2, [pc, #144]	; (8002270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e2:	6593      	str	r3, [r2, #88]	; 0x58
 80021e4:	4b22      	ldr	r3, [pc, #136]	; (8002270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021f0:	f7ff f9de 	bl	80015b0 <HAL_PWREx_GetVoltageRange>
 80021f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002200:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002208:	d10b      	bne.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b80      	cmp	r3, #128	; 0x80
 800220e:	d919      	bls.n	8002244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2ba0      	cmp	r3, #160	; 0xa0
 8002214:	d902      	bls.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002216:	2302      	movs	r3, #2
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	e013      	b.n	8002244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800221c:	2301      	movs	r3, #1
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e010      	b.n	8002244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b80      	cmp	r3, #128	; 0x80
 8002226:	d902      	bls.n	800222e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002228:	2303      	movs	r3, #3
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	e00a      	b.n	8002244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b80      	cmp	r3, #128	; 0x80
 8002232:	d102      	bne.n	800223a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002234:	2302      	movs	r3, #2
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	e004      	b.n	8002244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b70      	cmp	r3, #112	; 0x70
 800223e:	d101      	bne.n	8002244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002240:	2301      	movs	r3, #1
 8002242:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f023 0207 	bic.w	r2, r3, #7
 800224c:	4909      	ldr	r1, [pc, #36]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	429a      	cmp	r2, r3
 8002260:	d001      	beq.n	8002266 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	40022000 	.word	0x40022000

08002278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002280:	2300      	movs	r3, #0
 8002282:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002284:	2300      	movs	r3, #0
 8002286:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002290:	2b00      	cmp	r3, #0
 8002292:	d041      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002298:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800229c:	d02a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800229e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022a2:	d824      	bhi.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022a8:	d008      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022ae:	d81e      	bhi.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b8:	d010      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022ba:	e018      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022bc:	4b86      	ldr	r3, [pc, #536]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a85      	ldr	r2, [pc, #532]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c8:	e015      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fabb 	bl	800284c <RCCEx_PLLSAI1_Config>
 80022d6:	4603      	mov	r3, r0
 80022d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022da:	e00c      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3320      	adds	r3, #32
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fba6 	bl	8002a34 <RCCEx_PLLSAI2_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ec:	e003      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	74fb      	strb	r3, [r7, #19]
      break;
 80022f2:	e000      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10b      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022fc:	4b76      	ldr	r3, [pc, #472]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800230a:	4973      	ldr	r1, [pc, #460]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002312:	e001      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d041      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002328:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800232c:	d02a      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800232e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002332:	d824      	bhi.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002334:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002338:	d008      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800233a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800233e:	d81e      	bhi.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002348:	d010      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800234a:	e018      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800234c:	4b62      	ldr	r3, [pc, #392]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a61      	ldr	r2, [pc, #388]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002356:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002358:	e015      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3304      	adds	r3, #4
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fa73 	bl	800284c <RCCEx_PLLSAI1_Config>
 8002366:	4603      	mov	r3, r0
 8002368:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800236a:	e00c      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3320      	adds	r3, #32
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fb5e 	bl	8002a34 <RCCEx_PLLSAI2_Config>
 8002378:	4603      	mov	r3, r0
 800237a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800237c:	e003      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	74fb      	strb	r3, [r7, #19]
      break;
 8002382:	e000      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10b      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800238c:	4b52      	ldr	r3, [pc, #328]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800239a:	494f      	ldr	r1, [pc, #316]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023a2:	e001      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80a0 	beq.w	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ba:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023ca:	2300      	movs	r3, #0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00d      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d0:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	4a40      	ldr	r2, [pc, #256]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023da:	6593      	str	r3, [r2, #88]	; 0x58
 80023dc:	4b3e      	ldr	r3, [pc, #248]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e8:	2301      	movs	r3, #1
 80023ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023ec:	4b3b      	ldr	r3, [pc, #236]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a3a      	ldr	r2, [pc, #232]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023f8:	f7fe fb46 	bl	8000a88 <HAL_GetTick>
 80023fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023fe:	e009      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002400:	f7fe fb42 	bl	8000a88 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d902      	bls.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	74fb      	strb	r3, [r7, #19]
        break;
 8002412:	e005      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002414:	4b31      	ldr	r3, [pc, #196]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ef      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d15c      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002426:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002430:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01f      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	429a      	cmp	r2, r3
 8002442:	d019      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002450:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002456:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002470:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7fe fb01 	bl	8000a88 <HAL_GetTick>
 8002486:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002488:	e00b      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe fafd 	bl	8000a88 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d902      	bls.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	74fb      	strb	r3, [r7, #19]
            break;
 80024a0:	e006      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0ec      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c6:	4904      	ldr	r1, [pc, #16]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024ce:	e009      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	74bb      	strb	r3, [r7, #18]
 80024d4:	e006      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024e4:	7c7b      	ldrb	r3, [r7, #17]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d105      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ea:	4b9e      	ldr	r3, [pc, #632]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	4a9d      	ldr	r2, [pc, #628]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002502:	4b98      	ldr	r3, [pc, #608]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f023 0203 	bic.w	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	4994      	ldr	r1, [pc, #592]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002524:	4b8f      	ldr	r3, [pc, #572]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	f023 020c 	bic.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	498c      	ldr	r1, [pc, #560]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002546:	4b87      	ldr	r3, [pc, #540]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	4983      	ldr	r1, [pc, #524]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002568:	4b7e      	ldr	r3, [pc, #504]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	497b      	ldr	r1, [pc, #492]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800258a:	4b76      	ldr	r3, [pc, #472]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002598:	4972      	ldr	r1, [pc, #456]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025ac:	4b6d      	ldr	r3, [pc, #436]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	496a      	ldr	r1, [pc, #424]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ce:	4b65      	ldr	r3, [pc, #404]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	4961      	ldr	r1, [pc, #388]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025f0:	4b5c      	ldr	r3, [pc, #368]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	4959      	ldr	r1, [pc, #356]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002612:	4b54      	ldr	r3, [pc, #336]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002618:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002620:	4950      	ldr	r1, [pc, #320]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002634:	4b4b      	ldr	r3, [pc, #300]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	4948      	ldr	r1, [pc, #288]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002656:	4b43      	ldr	r3, [pc, #268]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	493f      	ldr	r1, [pc, #252]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d028      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002678:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002686:	4937      	ldr	r1, [pc, #220]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002696:	d106      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002698:	4b32      	ldr	r3, [pc, #200]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a31      	ldr	r2, [pc, #196]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a2:	60d3      	str	r3, [r2, #12]
 80026a4:	e011      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ae:	d10c      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3304      	adds	r3, #4
 80026b4:	2101      	movs	r1, #1
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f8c8 	bl	800284c <RCCEx_PLLSAI1_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026c0:	7cfb      	ldrb	r3, [r7, #19]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d028      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	491f      	ldr	r1, [pc, #124]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026f4:	d106      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002700:	60d3      	str	r3, [r2, #12]
 8002702:	e011      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800270c:	d10c      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3304      	adds	r3, #4
 8002712:	2101      	movs	r1, #1
 8002714:	4618      	mov	r0, r3
 8002716:	f000 f899 	bl	800284c <RCCEx_PLLSAI1_Config>
 800271a:	4603      	mov	r3, r0
 800271c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d02b      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002742:	4908      	ldr	r1, [pc, #32]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002752:	d109      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4a02      	ldr	r2, [pc, #8]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800275e:	60d3      	str	r3, [r2, #12]
 8002760:	e014      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002770:	d10c      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3304      	adds	r3, #4
 8002776:	2101      	movs	r1, #1
 8002778:	4618      	mov	r0, r3
 800277a:	f000 f867 	bl	800284c <RCCEx_PLLSAI1_Config>
 800277e:	4603      	mov	r3, r0
 8002780:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d02f      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002798:	4b2b      	ldr	r3, [pc, #172]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a6:	4928      	ldr	r1, [pc, #160]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027b6:	d10d      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3304      	adds	r3, #4
 80027bc:	2102      	movs	r1, #2
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f844 	bl	800284c <RCCEx_PLLSAI1_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d014      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	74bb      	strb	r3, [r7, #18]
 80027d2:	e011      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3320      	adds	r3, #32
 80027e2:	2102      	movs	r1, #2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 f925 	bl	8002a34 <RCCEx_PLLSAI2_Config>
 80027ea:	4603      	mov	r3, r0
 80027ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002804:	4b10      	ldr	r3, [pc, #64]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002812:	490d      	ldr	r1, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002836:	4904      	ldr	r1, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800285a:	4b75      	ldr	r3, [pc, #468]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d018      	beq.n	8002898 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002866:	4b72      	ldr	r3, [pc, #456]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f003 0203 	and.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d10d      	bne.n	8002892 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
       ||
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800287e:	4b6c      	ldr	r3, [pc, #432]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
       ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d047      	beq.n	8002922 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	e044      	b.n	8002922 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d018      	beq.n	80028d2 <RCCEx_PLLSAI1_Config+0x86>
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d825      	bhi.n	80028f0 <RCCEx_PLLSAI1_Config+0xa4>
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d002      	beq.n	80028ae <RCCEx_PLLSAI1_Config+0x62>
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d009      	beq.n	80028c0 <RCCEx_PLLSAI1_Config+0x74>
 80028ac:	e020      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ae:	4b60      	ldr	r3, [pc, #384]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d11d      	bne.n	80028f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028be:	e01a      	b.n	80028f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028c0:	4b5b      	ldr	r3, [pc, #364]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d116      	bne.n	80028fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d0:	e013      	b.n	80028fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028d2:	4b57      	ldr	r3, [pc, #348]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028de:	4b54      	ldr	r3, [pc, #336]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ee:	e006      	b.n	80028fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      break;
 80028f4:	e004      	b.n	8002900 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028f6:	bf00      	nop
 80028f8:	e002      	b.n	8002900 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028fa:	bf00      	nop
 80028fc:	e000      	b.n	8002900 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10d      	bne.n	8002922 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002906:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6819      	ldr	r1, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	430b      	orrs	r3, r1
 800291c:	4944      	ldr	r1, [pc, #272]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d17d      	bne.n	8002a24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002928:	4b41      	ldr	r3, [pc, #260]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a40      	ldr	r2, [pc, #256]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002934:	f7fe f8a8 	bl	8000a88 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800293a:	e009      	b.n	8002950 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800293c:	f7fe f8a4 	bl	8000a88 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d902      	bls.n	8002950 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	73fb      	strb	r3, [r7, #15]
        break;
 800294e:	e005      	b.n	800295c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002950:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ef      	bne.n	800293c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d160      	bne.n	8002a24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d111      	bne.n	800298c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002968:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6892      	ldr	r2, [r2, #8]
 8002978:	0211      	lsls	r1, r2, #8
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68d2      	ldr	r2, [r2, #12]
 800297e:	0912      	lsrs	r2, r2, #4
 8002980:	0452      	lsls	r2, r2, #17
 8002982:	430a      	orrs	r2, r1
 8002984:	492a      	ldr	r1, [pc, #168]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	610b      	str	r3, [r1, #16]
 800298a:	e027      	b.n	80029dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d112      	bne.n	80029b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002992:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800299a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6892      	ldr	r2, [r2, #8]
 80029a2:	0211      	lsls	r1, r2, #8
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6912      	ldr	r2, [r2, #16]
 80029a8:	0852      	lsrs	r2, r2, #1
 80029aa:	3a01      	subs	r2, #1
 80029ac:	0552      	lsls	r2, r2, #21
 80029ae:	430a      	orrs	r2, r1
 80029b0:	491f      	ldr	r1, [pc, #124]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	610b      	str	r3, [r1, #16]
 80029b6:	e011      	b.n	80029dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029b8:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6892      	ldr	r2, [r2, #8]
 80029c8:	0211      	lsls	r1, r2, #8
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6952      	ldr	r2, [r2, #20]
 80029ce:	0852      	lsrs	r2, r2, #1
 80029d0:	3a01      	subs	r2, #1
 80029d2:	0652      	lsls	r2, r2, #25
 80029d4:	430a      	orrs	r2, r1
 80029d6:	4916      	ldr	r1, [pc, #88]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7fe f84e 	bl	8000a88 <HAL_GetTick>
 80029ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ee:	e009      	b.n	8002a04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029f0:	f7fe f84a 	bl	8000a88 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d902      	bls.n	8002a04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	73fb      	strb	r3, [r7, #15]
          break;
 8002a02:	e005      	b.n	8002a10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0ef      	beq.n	80029f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	4904      	ldr	r1, [pc, #16]	; (8002a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000

08002a34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a42:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d018      	beq.n	8002a80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 0203 	and.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d10d      	bne.n	8002a7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
       ||
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a66:	4b61      	ldr	r3, [pc, #388]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
       ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d047      	beq.n	8002b0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
 8002a7e:	e044      	b.n	8002b0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d018      	beq.n	8002aba <RCCEx_PLLSAI2_Config+0x86>
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d825      	bhi.n	8002ad8 <RCCEx_PLLSAI2_Config+0xa4>
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d002      	beq.n	8002a96 <RCCEx_PLLSAI2_Config+0x62>
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d009      	beq.n	8002aa8 <RCCEx_PLLSAI2_Config+0x74>
 8002a94:	e020      	b.n	8002ad8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a96:	4b55      	ldr	r3, [pc, #340]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d11d      	bne.n	8002ade <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa6:	e01a      	b.n	8002ade <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aa8:	4b50      	ldr	r3, [pc, #320]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d116      	bne.n	8002ae2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab8:	e013      	b.n	8002ae2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aba:	4b4c      	ldr	r3, [pc, #304]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10f      	bne.n	8002ae6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ac6:	4b49      	ldr	r3, [pc, #292]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ad6:	e006      	b.n	8002ae6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
      break;
 8002adc:	e004      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e002      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ae6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10d      	bne.n	8002b0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aee:	4b3f      	ldr	r3, [pc, #252]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	430b      	orrs	r3, r1
 8002b04:	4939      	ldr	r1, [pc, #228]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d167      	bne.n	8002be0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b10:	4b36      	ldr	r3, [pc, #216]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a35      	ldr	r2, [pc, #212]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1c:	f7fd ffb4 	bl	8000a88 <HAL_GetTick>
 8002b20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b22:	e009      	b.n	8002b38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b24:	f7fd ffb0 	bl	8000a88 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d902      	bls.n	8002b38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	73fb      	strb	r3, [r7, #15]
        break;
 8002b36:	e005      	b.n	8002b44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b38:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1ef      	bne.n	8002b24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d14a      	bne.n	8002be0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d111      	bne.n	8002b74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b50:	4b26      	ldr	r3, [pc, #152]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6892      	ldr	r2, [r2, #8]
 8002b60:	0211      	lsls	r1, r2, #8
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68d2      	ldr	r2, [r2, #12]
 8002b66:	0912      	lsrs	r2, r2, #4
 8002b68:	0452      	lsls	r2, r2, #17
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	491f      	ldr	r1, [pc, #124]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	614b      	str	r3, [r1, #20]
 8002b72:	e011      	b.n	8002b98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6892      	ldr	r2, [r2, #8]
 8002b84:	0211      	lsls	r1, r2, #8
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6912      	ldr	r2, [r2, #16]
 8002b8a:	0852      	lsrs	r2, r2, #1
 8002b8c:	3a01      	subs	r2, #1
 8002b8e:	0652      	lsls	r2, r2, #25
 8002b90:	430a      	orrs	r2, r1
 8002b92:	4916      	ldr	r1, [pc, #88]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b98:	4b14      	ldr	r3, [pc, #80]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a13      	ldr	r2, [pc, #76]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fd ff70 	bl	8000a88 <HAL_GetTick>
 8002ba8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002baa:	e009      	b.n	8002bc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bac:	f7fd ff6c 	bl	8000a88 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d902      	bls.n	8002bc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	73fb      	strb	r3, [r7, #15]
          break;
 8002bbe:	e005      	b.n	8002bcc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ef      	beq.n	8002bac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	4904      	ldr	r1, [pc, #16]	; (8002bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000

08002bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e040      	b.n	8002c84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fd fd8c 	bl	8000730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2224      	movs	r2, #36	; 0x24
 8002c1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fb8e 	bl	8003350 <UART_SetConfig>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e022      	b.n	8002c84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fe3a 	bl	80038c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fec1 	bl	8003a04 <UART_CheckIdleState>
 8002c82:	4603      	mov	r3, r0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	4613      	mov	r3, r2
 8002c98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d142      	bne.n	8002d28 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_UART_Receive_DMA+0x22>
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e03b      	b.n	8002d2a <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_UART_Receive_DMA+0x34>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e034      	b.n	8002d2a <HAL_UART_Receive_DMA+0x9e>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <HAL_UART_Receive_DMA+0xa8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d01f      	beq.n	8002d18 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d018      	beq.n	8002d18 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	623b      	str	r3, [r7, #32]
 8002d06:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	69f9      	ldr	r1, [r7, #28]
 8002d0a:	6a3a      	ldr	r2, [r7, #32]
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e6      	bne.n	8002ce6 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 ff7e 	bl	8003c20 <UART_Start_Receive_DMA>
 8002d24:	4603      	mov	r3, r0
 8002d26:	e000      	b.n	8002d2a <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
  }
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3728      	adds	r7, #40	; 0x28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40008000 	.word	0x40008000

08002d38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b0ba      	sub	sp, #232	; 0xe8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d62:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d66:	4013      	ands	r3, r2
 8002d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d115      	bne.n	8002da0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00f      	beq.n	8002da0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d009      	beq.n	8002da0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 82a6 	beq.w	80032e2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
      }
      return;
 8002d9e:	e2a0      	b.n	80032e2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8117 	beq.w	8002fd8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002db6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002dba:	4b85      	ldr	r3, [pc, #532]	; (8002fd0 <HAL_UART_IRQHandler+0x298>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 810a 	beq.w	8002fd8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d011      	beq.n	8002df4 <HAL_UART_IRQHandler+0xbc>
 8002dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2201      	movs	r2, #1
 8002de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d011      	beq.n	8002e24 <HAL_UART_IRQHandler+0xec>
 8002e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00b      	beq.n	8002e24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2202      	movs	r2, #2
 8002e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e1a:	f043 0204 	orr.w	r2, r3, #4
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d011      	beq.n	8002e54 <HAL_UART_IRQHandler+0x11c>
 8002e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2204      	movs	r2, #4
 8002e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4a:	f043 0202 	orr.w	r2, r3, #2
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d017      	beq.n	8002e90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e86:	f043 0208 	orr.w	r2, r3, #8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d012      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x18a>
 8002e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00c      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 820c 	beq.w	80032e6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002efc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d005      	beq.n	8002f1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d04f      	beq.n	8002fba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 ff4c 	bl	8003db8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2a:	2b40      	cmp	r3, #64	; 0x40
 8002f2c:	d141      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3308      	adds	r3, #8
 8002f34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	3308      	adds	r3, #8
 8002f56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1d9      	bne.n	8002f2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d013      	beq.n	8002faa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <HAL_UART_IRQHandler+0x29c>)
 8002f88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe f812 	bl	8000fb8 <HAL_DMA_Abort_IT>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d017      	beq.n	8002fca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa8:	e00f      	b.n	8002fca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f9ba 	bl	8003324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb0:	e00b      	b.n	8002fca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f9b6 	bl	8003324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb8:	e007      	b.n	8002fca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f9b2 	bl	8003324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002fc8:	e18d      	b.n	80032e6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fca:	bf00      	nop
    return;
 8002fcc:	e18b      	b.n	80032e6 <HAL_UART_IRQHandler+0x5ae>
 8002fce:	bf00      	nop
 8002fd0:	04000120 	.word	0x04000120
 8002fd4:	08004057 	.word	0x08004057

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	f040 8146 	bne.w	800326e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 813f 	beq.w	800326e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8138 	beq.w	800326e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2210      	movs	r2, #16
 8003004:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003010:	2b40      	cmp	r3, #64	; 0x40
 8003012:	f040 80b4 	bne.w	800317e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003022:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 815f 	beq.w	80032ea <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003036:	429a      	cmp	r2, r3
 8003038:	f080 8157 	bcs.w	80032ea <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003042:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 8085 	bne.w	8003162 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800306c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003074:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003086:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800308e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003092:	e841 2300 	strex	r3, r2, [r1]
 8003096:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800309a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1da      	bne.n	8003058 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3308      	adds	r3, #8
 80030a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ac:	e853 3f00 	ldrex	r3, [r3]
 80030b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3308      	adds	r3, #8
 80030c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e1      	bne.n	80030a2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3308      	adds	r3, #8
 80030e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3308      	adds	r3, #8
 80030fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003102:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003104:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003108:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e3      	bne.n	80030de <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312a:	e853 3f00 	ldrex	r3, [r3]
 800312e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003132:	f023 0310 	bic.w	r3, r3, #16
 8003136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003144:	65bb      	str	r3, [r7, #88]	; 0x58
 8003146:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003148:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800314a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800314c:	e841 2300 	strex	r3, r2, [r1]
 8003150:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1e4      	bne.n	8003122 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd feed 	bl	8000f3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800316e:	b29b      	uxth	r3, r3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	b29b      	uxth	r3, r3
 8003174:	4619      	mov	r1, r3
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f8de 	bl	8003338 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800317c:	e0b5      	b.n	80032ea <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800318a:	b29b      	uxth	r3, r3
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80a7 	beq.w	80032ee <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80031a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80a2 	beq.w	80032ee <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031cc:	647b      	str	r3, [r7, #68]	; 0x44
 80031ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e4      	bne.n	80031aa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3308      	adds	r3, #8
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	623b      	str	r3, [r7, #32]
   return(result);
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3308      	adds	r3, #8
 8003200:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003204:	633a      	str	r2, [r7, #48]	; 0x30
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003208:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800320a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800320c:	e841 2300 	strex	r3, r2, [r1]
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e3      	bne.n	80031e0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	60fb      	str	r3, [r7, #12]
   return(result);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0310 	bic.w	r3, r3, #16
 800323e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003250:	69b9      	ldr	r1, [r7, #24]
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	e841 2300 	strex	r3, r2, [r1]
 8003258:	617b      	str	r3, [r7, #20]
   return(result);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e4      	bne.n	800322a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003264:	4619      	mov	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f866 	bl	8003338 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800326c:	e03f      	b.n	80032ee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00e      	beq.n	8003298 <HAL_UART_IRQHandler+0x560>
 800327a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800327e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800328e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 ff20 	bl	80040d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003296:	e02d      	b.n	80032f4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00e      	beq.n	80032c2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01c      	beq.n	80032f2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
    }
    return;
 80032c0:	e017      	b.n	80032f2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d012      	beq.n	80032f4 <HAL_UART_IRQHandler+0x5bc>
 80032ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00c      	beq.n	80032f4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fed1 	bl	8004082 <UART_EndTransmit_IT>
    return;
 80032e0:	e008      	b.n	80032f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80032e2:	bf00      	nop
 80032e4:	e006      	b.n	80032f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80032e6:	bf00      	nop
 80032e8:	e004      	b.n	80032f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80032ea:	bf00      	nop
 80032ec:	e002      	b.n	80032f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80032ee:	bf00      	nop
 80032f0:	e000      	b.n	80032f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80032f2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80032f4:	37e8      	adds	r7, #232	; 0xe8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop

080032fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003354:	b08a      	sub	sp, #40	; 0x28
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	431a      	orrs	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	4313      	orrs	r3, r2
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4ba4      	ldr	r3, [pc, #656]	; (8003610 <UART_SetConfig+0x2c0>)
 8003380:	4013      	ands	r3, r2
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003388:	430b      	orrs	r3, r1
 800338a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a99      	ldr	r2, [pc, #612]	; (8003614 <UART_SetConfig+0x2c4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d004      	beq.n	80033bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b8:	4313      	orrs	r3, r2
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a90      	ldr	r2, [pc, #576]	; (8003618 <UART_SetConfig+0x2c8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d126      	bne.n	8003428 <UART_SetConfig+0xd8>
 80033da:	4b90      	ldr	r3, [pc, #576]	; (800361c <UART_SetConfig+0x2cc>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d81b      	bhi.n	8003420 <UART_SetConfig+0xd0>
 80033e8:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <UART_SetConfig+0xa0>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003401 	.word	0x08003401
 80033f4:	08003411 	.word	0x08003411
 80033f8:	08003409 	.word	0x08003409
 80033fc:	08003419 	.word	0x08003419
 8003400:	2301      	movs	r3, #1
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003406:	e116      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003408:	2302      	movs	r3, #2
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340e:	e112      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003410:	2304      	movs	r3, #4
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003416:	e10e      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003418:	2308      	movs	r3, #8
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341e:	e10a      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003420:	2310      	movs	r3, #16
 8003422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003426:	e106      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a7c      	ldr	r2, [pc, #496]	; (8003620 <UART_SetConfig+0x2d0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d138      	bne.n	80034a4 <UART_SetConfig+0x154>
 8003432:	4b7a      	ldr	r3, [pc, #488]	; (800361c <UART_SetConfig+0x2cc>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b0c      	cmp	r3, #12
 800343e:	d82d      	bhi.n	800349c <UART_SetConfig+0x14c>
 8003440:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <UART_SetConfig+0xf8>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	0800347d 	.word	0x0800347d
 800344c:	0800349d 	.word	0x0800349d
 8003450:	0800349d 	.word	0x0800349d
 8003454:	0800349d 	.word	0x0800349d
 8003458:	0800348d 	.word	0x0800348d
 800345c:	0800349d 	.word	0x0800349d
 8003460:	0800349d 	.word	0x0800349d
 8003464:	0800349d 	.word	0x0800349d
 8003468:	08003485 	.word	0x08003485
 800346c:	0800349d 	.word	0x0800349d
 8003470:	0800349d 	.word	0x0800349d
 8003474:	0800349d 	.word	0x0800349d
 8003478:	08003495 	.word	0x08003495
 800347c:	2300      	movs	r3, #0
 800347e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003482:	e0d8      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003484:	2302      	movs	r3, #2
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348a:	e0d4      	b.n	8003636 <UART_SetConfig+0x2e6>
 800348c:	2304      	movs	r3, #4
 800348e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003492:	e0d0      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003494:	2308      	movs	r3, #8
 8003496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800349a:	e0cc      	b.n	8003636 <UART_SetConfig+0x2e6>
 800349c:	2310      	movs	r3, #16
 800349e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a2:	e0c8      	b.n	8003636 <UART_SetConfig+0x2e6>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a5e      	ldr	r2, [pc, #376]	; (8003624 <UART_SetConfig+0x2d4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d125      	bne.n	80034fa <UART_SetConfig+0x1aa>
 80034ae:	4b5b      	ldr	r3, [pc, #364]	; (800361c <UART_SetConfig+0x2cc>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034b8:	2b30      	cmp	r3, #48	; 0x30
 80034ba:	d016      	beq.n	80034ea <UART_SetConfig+0x19a>
 80034bc:	2b30      	cmp	r3, #48	; 0x30
 80034be:	d818      	bhi.n	80034f2 <UART_SetConfig+0x1a2>
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d00a      	beq.n	80034da <UART_SetConfig+0x18a>
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d814      	bhi.n	80034f2 <UART_SetConfig+0x1a2>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <UART_SetConfig+0x182>
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d008      	beq.n	80034e2 <UART_SetConfig+0x192>
 80034d0:	e00f      	b.n	80034f2 <UART_SetConfig+0x1a2>
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d8:	e0ad      	b.n	8003636 <UART_SetConfig+0x2e6>
 80034da:	2302      	movs	r3, #2
 80034dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e0:	e0a9      	b.n	8003636 <UART_SetConfig+0x2e6>
 80034e2:	2304      	movs	r3, #4
 80034e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e8:	e0a5      	b.n	8003636 <UART_SetConfig+0x2e6>
 80034ea:	2308      	movs	r3, #8
 80034ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f0:	e0a1      	b.n	8003636 <UART_SetConfig+0x2e6>
 80034f2:	2310      	movs	r3, #16
 80034f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f8:	e09d      	b.n	8003636 <UART_SetConfig+0x2e6>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a4a      	ldr	r2, [pc, #296]	; (8003628 <UART_SetConfig+0x2d8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d125      	bne.n	8003550 <UART_SetConfig+0x200>
 8003504:	4b45      	ldr	r3, [pc, #276]	; (800361c <UART_SetConfig+0x2cc>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800350e:	2bc0      	cmp	r3, #192	; 0xc0
 8003510:	d016      	beq.n	8003540 <UART_SetConfig+0x1f0>
 8003512:	2bc0      	cmp	r3, #192	; 0xc0
 8003514:	d818      	bhi.n	8003548 <UART_SetConfig+0x1f8>
 8003516:	2b80      	cmp	r3, #128	; 0x80
 8003518:	d00a      	beq.n	8003530 <UART_SetConfig+0x1e0>
 800351a:	2b80      	cmp	r3, #128	; 0x80
 800351c:	d814      	bhi.n	8003548 <UART_SetConfig+0x1f8>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <UART_SetConfig+0x1d8>
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d008      	beq.n	8003538 <UART_SetConfig+0x1e8>
 8003526:	e00f      	b.n	8003548 <UART_SetConfig+0x1f8>
 8003528:	2300      	movs	r3, #0
 800352a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352e:	e082      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003530:	2302      	movs	r3, #2
 8003532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003536:	e07e      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003538:	2304      	movs	r3, #4
 800353a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353e:	e07a      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003540:	2308      	movs	r3, #8
 8003542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003546:	e076      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003548:	2310      	movs	r3, #16
 800354a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800354e:	e072      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a35      	ldr	r2, [pc, #212]	; (800362c <UART_SetConfig+0x2dc>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d12a      	bne.n	80035b0 <UART_SetConfig+0x260>
 800355a:	4b30      	ldr	r3, [pc, #192]	; (800361c <UART_SetConfig+0x2cc>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003568:	d01a      	beq.n	80035a0 <UART_SetConfig+0x250>
 800356a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800356e:	d81b      	bhi.n	80035a8 <UART_SetConfig+0x258>
 8003570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003574:	d00c      	beq.n	8003590 <UART_SetConfig+0x240>
 8003576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357a:	d815      	bhi.n	80035a8 <UART_SetConfig+0x258>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <UART_SetConfig+0x238>
 8003580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003584:	d008      	beq.n	8003598 <UART_SetConfig+0x248>
 8003586:	e00f      	b.n	80035a8 <UART_SetConfig+0x258>
 8003588:	2300      	movs	r3, #0
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358e:	e052      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003590:	2302      	movs	r3, #2
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003596:	e04e      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003598:	2304      	movs	r3, #4
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359e:	e04a      	b.n	8003636 <UART_SetConfig+0x2e6>
 80035a0:	2308      	movs	r3, #8
 80035a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a6:	e046      	b.n	8003636 <UART_SetConfig+0x2e6>
 80035a8:	2310      	movs	r3, #16
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ae:	e042      	b.n	8003636 <UART_SetConfig+0x2e6>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a17      	ldr	r2, [pc, #92]	; (8003614 <UART_SetConfig+0x2c4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d13a      	bne.n	8003630 <UART_SetConfig+0x2e0>
 80035ba:	4b18      	ldr	r3, [pc, #96]	; (800361c <UART_SetConfig+0x2cc>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035c8:	d01a      	beq.n	8003600 <UART_SetConfig+0x2b0>
 80035ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ce:	d81b      	bhi.n	8003608 <UART_SetConfig+0x2b8>
 80035d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d4:	d00c      	beq.n	80035f0 <UART_SetConfig+0x2a0>
 80035d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035da:	d815      	bhi.n	8003608 <UART_SetConfig+0x2b8>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <UART_SetConfig+0x298>
 80035e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e4:	d008      	beq.n	80035f8 <UART_SetConfig+0x2a8>
 80035e6:	e00f      	b.n	8003608 <UART_SetConfig+0x2b8>
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ee:	e022      	b.n	8003636 <UART_SetConfig+0x2e6>
 80035f0:	2302      	movs	r3, #2
 80035f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f6:	e01e      	b.n	8003636 <UART_SetConfig+0x2e6>
 80035f8:	2304      	movs	r3, #4
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fe:	e01a      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003600:	2308      	movs	r3, #8
 8003602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003606:	e016      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003608:	2310      	movs	r3, #16
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360e:	e012      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003610:	efff69f3 	.word	0xefff69f3
 8003614:	40008000 	.word	0x40008000
 8003618:	40013800 	.word	0x40013800
 800361c:	40021000 	.word	0x40021000
 8003620:	40004400 	.word	0x40004400
 8003624:	40004800 	.word	0x40004800
 8003628:	40004c00 	.word	0x40004c00
 800362c:	40005000 	.word	0x40005000
 8003630:	2310      	movs	r3, #16
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a9f      	ldr	r2, [pc, #636]	; (80038b8 <UART_SetConfig+0x568>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d17a      	bne.n	8003736 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003640:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003644:	2b08      	cmp	r3, #8
 8003646:	d824      	bhi.n	8003692 <UART_SetConfig+0x342>
 8003648:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <UART_SetConfig+0x300>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	08003675 	.word	0x08003675
 8003654:	08003693 	.word	0x08003693
 8003658:	0800367d 	.word	0x0800367d
 800365c:	08003693 	.word	0x08003693
 8003660:	08003683 	.word	0x08003683
 8003664:	08003693 	.word	0x08003693
 8003668:	08003693 	.word	0x08003693
 800366c:	08003693 	.word	0x08003693
 8003670:	0800368b 	.word	0x0800368b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003674:	f7fe fd74 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8003678:	61f8      	str	r0, [r7, #28]
        break;
 800367a:	e010      	b.n	800369e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800367c:	4b8f      	ldr	r3, [pc, #572]	; (80038bc <UART_SetConfig+0x56c>)
 800367e:	61fb      	str	r3, [r7, #28]
        break;
 8003680:	e00d      	b.n	800369e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003682:	f7fe fcd5 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8003686:	61f8      	str	r0, [r7, #28]
        break;
 8003688:	e009      	b.n	800369e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800368a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800368e:	61fb      	str	r3, [r7, #28]
        break;
 8003690:	e005      	b.n	800369e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800369c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80fb 	beq.w	800389c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d305      	bcc.n	80036c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d903      	bls.n	80036ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036c8:	e0e8      	b.n	800389c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	2200      	movs	r2, #0
 80036ce:	461c      	mov	r4, r3
 80036d0:	4615      	mov	r5, r2
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	022b      	lsls	r3, r5, #8
 80036dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036e0:	0222      	lsls	r2, r4, #8
 80036e2:	68f9      	ldr	r1, [r7, #12]
 80036e4:	6849      	ldr	r1, [r1, #4]
 80036e6:	0849      	lsrs	r1, r1, #1
 80036e8:	2000      	movs	r0, #0
 80036ea:	4688      	mov	r8, r1
 80036ec:	4681      	mov	r9, r0
 80036ee:	eb12 0a08 	adds.w	sl, r2, r8
 80036f2:	eb43 0b09 	adc.w	fp, r3, r9
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003704:	4650      	mov	r0, sl
 8003706:	4659      	mov	r1, fp
 8003708:	f7fc fd5e 	bl	80001c8 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800371a:	d308      	bcc.n	800372e <UART_SetConfig+0x3de>
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003722:	d204      	bcs.n	800372e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	60da      	str	r2, [r3, #12]
 800372c:	e0b6      	b.n	800389c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003734:	e0b2      	b.n	800389c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800373e:	d15e      	bne.n	80037fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003740:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003744:	2b08      	cmp	r3, #8
 8003746:	d828      	bhi.n	800379a <UART_SetConfig+0x44a>
 8003748:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <UART_SetConfig+0x400>)
 800374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003775 	.word	0x08003775
 8003754:	0800377d 	.word	0x0800377d
 8003758:	08003785 	.word	0x08003785
 800375c:	0800379b 	.word	0x0800379b
 8003760:	0800378b 	.word	0x0800378b
 8003764:	0800379b 	.word	0x0800379b
 8003768:	0800379b 	.word	0x0800379b
 800376c:	0800379b 	.word	0x0800379b
 8003770:	08003793 	.word	0x08003793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003774:	f7fe fcf4 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8003778:	61f8      	str	r0, [r7, #28]
        break;
 800377a:	e014      	b.n	80037a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800377c:	f7fe fd06 	bl	800218c <HAL_RCC_GetPCLK2Freq>
 8003780:	61f8      	str	r0, [r7, #28]
        break;
 8003782:	e010      	b.n	80037a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003784:	4b4d      	ldr	r3, [pc, #308]	; (80038bc <UART_SetConfig+0x56c>)
 8003786:	61fb      	str	r3, [r7, #28]
        break;
 8003788:	e00d      	b.n	80037a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378a:	f7fe fc51 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 800378e:	61f8      	str	r0, [r7, #28]
        break;
 8003790:	e009      	b.n	80037a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003796:	61fb      	str	r3, [r7, #28]
        break;
 8003798:	e005      	b.n	80037a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d077      	beq.n	800389c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005a      	lsls	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	441a      	add	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b0f      	cmp	r3, #15
 80037c6:	d916      	bls.n	80037f6 <UART_SetConfig+0x4a6>
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ce:	d212      	bcs.n	80037f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f023 030f 	bic.w	r3, r3, #15
 80037d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	8afb      	ldrh	r3, [r7, #22]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	8afa      	ldrh	r2, [r7, #22]
 80037f2:	60da      	str	r2, [r3, #12]
 80037f4:	e052      	b.n	800389c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037fc:	e04e      	b.n	800389c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003802:	2b08      	cmp	r3, #8
 8003804:	d827      	bhi.n	8003856 <UART_SetConfig+0x506>
 8003806:	a201      	add	r2, pc, #4	; (adr r2, 800380c <UART_SetConfig+0x4bc>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	08003831 	.word	0x08003831
 8003810:	08003839 	.word	0x08003839
 8003814:	08003841 	.word	0x08003841
 8003818:	08003857 	.word	0x08003857
 800381c:	08003847 	.word	0x08003847
 8003820:	08003857 	.word	0x08003857
 8003824:	08003857 	.word	0x08003857
 8003828:	08003857 	.word	0x08003857
 800382c:	0800384f 	.word	0x0800384f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003830:	f7fe fc96 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8003834:	61f8      	str	r0, [r7, #28]
        break;
 8003836:	e014      	b.n	8003862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003838:	f7fe fca8 	bl	800218c <HAL_RCC_GetPCLK2Freq>
 800383c:	61f8      	str	r0, [r7, #28]
        break;
 800383e:	e010      	b.n	8003862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003840:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <UART_SetConfig+0x56c>)
 8003842:	61fb      	str	r3, [r7, #28]
        break;
 8003844:	e00d      	b.n	8003862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003846:	f7fe fbf3 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 800384a:	61f8      	str	r0, [r7, #28]
        break;
 800384c:	e009      	b.n	8003862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003852:	61fb      	str	r3, [r7, #28]
        break;
 8003854:	e005      	b.n	8003862 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003860:	bf00      	nop
    }

    if (pclk != 0U)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d019      	beq.n	800389c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	085a      	lsrs	r2, r3, #1
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	441a      	add	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	fbb2 f3f3 	udiv	r3, r2, r3
 800387a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	d909      	bls.n	8003896 <UART_SetConfig+0x546>
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003888:	d205      	bcs.n	8003896 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60da      	str	r2, [r3, #12]
 8003894:	e002      	b.n	800389c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3728      	adds	r7, #40	; 0x28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038b6:	bf00      	nop
 80038b8:	40008000 	.word	0x40008000
 80038bc:	00f42400 	.word	0x00f42400

080038c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01a      	beq.n	80039d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039be:	d10a      	bne.n	80039d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a14:	f7fd f838 	bl	8000a88 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d10e      	bne.n	8003a46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f82d 	bl	8003a96 <UART_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e023      	b.n	8003a8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d10e      	bne.n	8003a72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f817 	bl	8003a96 <UART_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e00d      	b.n	8003a8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b09c      	sub	sp, #112	; 0x70
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa6:	e0a5      	b.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	f000 80a1 	beq.w	8003bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab2:	f7fc ffe9 	bl	8000a88 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d302      	bcc.n	8003ac8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d13e      	bne.n	8003b46 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003adc:	667b      	str	r3, [r7, #100]	; 0x64
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ae8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003aec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e6      	bne.n	8003ac8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3308      	adds	r3, #8
 8003b00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	663b      	str	r3, [r7, #96]	; 0x60
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3308      	adds	r3, #8
 8003b18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e5      	bne.n	8003afa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e067      	b.n	8003c16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d04f      	beq.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b62:	d147      	bne.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b6c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e6      	bne.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003bc0:	623a      	str	r2, [r7, #32]
 8003bc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	69f9      	ldr	r1, [r7, #28]
 8003bc6:	6a3a      	ldr	r2, [r7, #32]
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e5      	bne.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e010      	b.n	8003c16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69da      	ldr	r2, [r3, #28]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	f43f af4a 	beq.w	8003aa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3770      	adds	r7, #112	; 0x70
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b096      	sub	sp, #88	; 0x58
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	88fa      	ldrh	r2, [r7, #6]
 8003c38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2222      	movs	r2, #34	; 0x22
 8003c48:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d02b      	beq.n	8003caa <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a42      	ldr	r2, [pc, #264]	; (8003d60 <UART_Start_Receive_DMA+0x140>)
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	4a41      	ldr	r2, [pc, #260]	; (8003d64 <UART_Start_Receive_DMA+0x144>)
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	4a40      	ldr	r2, [pc, #256]	; (8003d68 <UART_Start_Receive_DMA+0x148>)
 8003c68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	2200      	movs	r2, #0
 8003c70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3324      	adds	r3, #36	; 0x24
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	461a      	mov	r2, r3
 8003c84:	88fb      	ldrh	r3, [r7, #6]
 8003c86:	f7fd f8f9 	bl	8000e7c <HAL_DMA_Start_IT>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00c      	beq.n	8003caa <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2210      	movs	r2, #16
 8003c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e055      	b.n	8003d56 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d018      	beq.n	8003cec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cce:	657b      	str	r3, [r7, #84]	; 0x54
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cda:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e6      	bne.n	8003cba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	653b      	str	r3, [r7, #80]	; 0x50
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3308      	adds	r3, #8
 8003d0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d0c:	637a      	str	r2, [r7, #52]	; 0x34
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e5      	bne.n	8003cec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3308      	adds	r3, #8
 8003d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d40:	623a      	str	r2, [r7, #32]
 8003d42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	69f9      	ldr	r1, [r7, #28]
 8003d46:	6a3a      	ldr	r2, [r7, #32]
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e5      	bne.n	8003d20 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3758      	adds	r7, #88	; 0x58
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	08003e7f 	.word	0x08003e7f
 8003d64:	08003fa3 	.word	0x08003fa3
 8003d68:	08003fdb 	.word	0x08003fdb

08003d6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b089      	sub	sp, #36	; 0x24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6979      	ldr	r1, [r7, #20]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e6      	bne.n	8003d74 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003dac:	bf00      	nop
 8003dae:	3724      	adds	r7, #36	; 0x24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b095      	sub	sp, #84	; 0x54
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc8:	e853 3f00 	ldrex	r3, [r3]
 8003dcc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dde:	643b      	str	r3, [r7, #64]	; 0x40
 8003de0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003de4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e6      	bne.n	8003dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3308      	adds	r3, #8
 8003df8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3308      	adds	r3, #8
 8003e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e5      	bne.n	8003df2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d118      	bne.n	8003e60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f023 0310 	bic.w	r3, r3, #16
 8003e42:	647b      	str	r3, [r7, #68]	; 0x44
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6979      	ldr	r1, [r7, #20]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e6      	bne.n	8003e2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e72:	bf00      	nop
 8003e74:	3754      	adds	r7, #84	; 0x54
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b09c      	sub	sp, #112	; 0x70
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d170      	bne.n	8003f7c <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8003e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ec2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ec8:	e841 2300 	strex	r3, r2, [r1]
 8003ecc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e6      	bne.n	8003ea2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3308      	adds	r3, #8
 8003eda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	667b      	str	r3, [r7, #100]	; 0x64
 8003eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ef4:	647a      	str	r2, [r7, #68]	; 0x44
 8003ef6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003efa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e5      	bne.n	8003ed4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	623b      	str	r3, [r7, #32]
   return(result);
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3308      	adds	r3, #8
 8003f26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f28:	633a      	str	r2, [r7, #48]	; 0x30
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e5      	bne.n	8003f08 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	2220      	movs	r2, #32
 8003f40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d118      	bne.n	8003f7c <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0310 	bic.w	r3, r3, #16
 8003f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	69b9      	ldr	r1, [r7, #24]
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	617b      	str	r3, [r7, #20]
   return(result);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e6      	bne.n	8003f4a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d107      	bne.n	8003f94 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f8e:	f7ff f9d3 	bl	8003338 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f92:	e002      	b.n	8003f9a <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8003f94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f96:	f7fc fb8f 	bl	80006b8 <HAL_UART_RxCpltCallback>
}
 8003f9a:	bf00      	nop
 8003f9c:	3770      	adds	r7, #112	; 0x70
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d109      	bne.n	8003fcc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff f9b7 	bl	8003338 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fca:	e002      	b.n	8003fd2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff f99f 	bl	8003310 <HAL_UART_RxHalfCpltCallback>
}
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d109      	bne.n	8004016 <UART_DMAError+0x3c>
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b21      	cmp	r3, #33	; 0x21
 8004006:	d106      	bne.n	8004016 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2200      	movs	r2, #0
 800400c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004010:	6978      	ldr	r0, [r7, #20]
 8004012:	f7ff feab 	bl	8003d6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d109      	bne.n	8004038 <UART_DMAError+0x5e>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b22      	cmp	r3, #34	; 0x22
 8004028:	d106      	bne.n	8004038 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2200      	movs	r2, #0
 800402e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004032:	6978      	ldr	r0, [r7, #20]
 8004034:	f7ff fec0 	bl	8003db8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800403e:	f043 0210 	orr.w	r2, r3, #16
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004048:	6978      	ldr	r0, [r7, #20]
 800404a:	f7ff f96b 	bl	8003324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800404e:	bf00      	nop
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7ff f955 	bl	8003324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b088      	sub	sp, #32
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	60bb      	str	r3, [r7, #8]
   return(result);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6979      	ldr	r1, [r7, #20]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	613b      	str	r3, [r7, #16]
   return(result);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e6      	bne.n	800408a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff f917 	bl	80032fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ce:	bf00      	nop
 80040d0:	3720      	adds	r7, #32
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <memset>:
 80040ea:	4402      	add	r2, r0
 80040ec:	4603      	mov	r3, r0
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d100      	bne.n	80040f4 <memset+0xa>
 80040f2:	4770      	bx	lr
 80040f4:	f803 1b01 	strb.w	r1, [r3], #1
 80040f8:	e7f9      	b.n	80040ee <memset+0x4>
	...

080040fc <__libc_init_array>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	4d0d      	ldr	r5, [pc, #52]	; (8004134 <__libc_init_array+0x38>)
 8004100:	4c0d      	ldr	r4, [pc, #52]	; (8004138 <__libc_init_array+0x3c>)
 8004102:	1b64      	subs	r4, r4, r5
 8004104:	10a4      	asrs	r4, r4, #2
 8004106:	2600      	movs	r6, #0
 8004108:	42a6      	cmp	r6, r4
 800410a:	d109      	bne.n	8004120 <__libc_init_array+0x24>
 800410c:	4d0b      	ldr	r5, [pc, #44]	; (800413c <__libc_init_array+0x40>)
 800410e:	4c0c      	ldr	r4, [pc, #48]	; (8004140 <__libc_init_array+0x44>)
 8004110:	f000 f818 	bl	8004144 <_init>
 8004114:	1b64      	subs	r4, r4, r5
 8004116:	10a4      	asrs	r4, r4, #2
 8004118:	2600      	movs	r6, #0
 800411a:	42a6      	cmp	r6, r4
 800411c:	d105      	bne.n	800412a <__libc_init_array+0x2e>
 800411e:	bd70      	pop	{r4, r5, r6, pc}
 8004120:	f855 3b04 	ldr.w	r3, [r5], #4
 8004124:	4798      	blx	r3
 8004126:	3601      	adds	r6, #1
 8004128:	e7ee      	b.n	8004108 <__libc_init_array+0xc>
 800412a:	f855 3b04 	ldr.w	r3, [r5], #4
 800412e:	4798      	blx	r3
 8004130:	3601      	adds	r6, #1
 8004132:	e7f2      	b.n	800411a <__libc_init_array+0x1e>
 8004134:	080041ac 	.word	0x080041ac
 8004138:	080041ac 	.word	0x080041ac
 800413c:	080041ac 	.word	0x080041ac
 8004140:	080041b0 	.word	0x080041b0

08004144 <_init>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	bf00      	nop
 8004148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414a:	bc08      	pop	{r3}
 800414c:	469e      	mov	lr, r3
 800414e:	4770      	bx	lr

08004150 <_fini>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	bf00      	nop
 8004154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004156:	bc08      	pop	{r3}
 8004158:	469e      	mov	lr, r3
 800415a:	4770      	bx	lr
