
9_USART Communication_Hello world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a4  080038a4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038ac  080038ac  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038ac  080038ac  000138ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080038b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000018  080038cc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080038cc  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000babd  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cd2  00000000  00000000  0002bb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0002d820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000757  00000000  00000000  0002e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ef3  00000000  00000000  0002e90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bfca  00000000  00000000  00053802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3d2b  00000000  00000000  0005f7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002644  00000000  00000000  001434f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00145b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003844 	.word	0x08003844

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003844 	.word	0x08003844

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 f9a5 	bl	8000816 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f818 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f88c 	bl	80005ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f85a 	bl	800058c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	HAL_UART_Transmit(&huart2, Buffer, len, 10); //HAL_UART_Transmit(& usart_handler, data, data lenght, Timeout);
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <main+0x30>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	b29a      	uxth	r2, r3
 80004de:	230a      	movs	r3, #10
 80004e0:	4905      	ldr	r1, [pc, #20]	; (80004f8 <main+0x34>)
 80004e2:	4806      	ldr	r0, [pc, #24]	; (80004fc <main+0x38>)
 80004e4:	f002 f8d8 	bl	8002698 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80004e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ec:	f000 fa08 	bl	8000900 <HAL_Delay>
	HAL_UART_Transmit(&huart2, Buffer, len, 10); //HAL_UART_Transmit(& usart_handler, data, data lenght, Timeout);
 80004f0:	e7f2      	b.n	80004d8 <main+0x14>
 80004f2:	bf00      	nop
 80004f4:	20000008 	.word	0x20000008
 80004f8:	20000000 	.word	0x20000000
 80004fc:	20000034 	.word	0x20000034

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b096      	sub	sp, #88	; 0x58
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2244      	movs	r2, #68	; 0x44
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f003 f96c 	bl	80037ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000522:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000526:	f000 fd57 	bl	8000fd8 <HAL_PWREx_ControlVoltageScaling>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000530:	f000 f874 	bl	800061c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000534:	2310      	movs	r3, #16
 8000536:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000538:	2301      	movs	r3, #1
 800053a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000540:	2360      	movs	r3, #96	; 0x60
 8000542:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000544:	2300      	movs	r3, #0
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fd99 	bl	8001084 <HAL_RCC_OscConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000558:	f000 f860 	bl	800061c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055c:	230f      	movs	r3, #15
 800055e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000570:	463b      	mov	r3, r7
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f001 f961 	bl	800183c <HAL_RCC_ClockConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000580:	f000 f84c 	bl	800061c <Error_Handler>
  }
}
 8000584:	bf00      	nop
 8000586:	3758      	adds	r7, #88	; 0x58
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 8000592:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <MX_USART2_UART_Init+0x5c>)
 8000594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9200;
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 8000598:	f242 32f0 	movw	r2, #9200	; 0x23f0
 800059c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005d0:	f002 f814 	bl	80025fc <HAL_UART_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005da:	f000 f81f 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000034 	.word	0x20000034
 80005e8:	40004400 	.word	0x40004400

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_GPIO_Init+0x2c>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <MX_GPIO_Init+0x2c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_GPIO_Init+0x2c>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	e7fe      	b.n	8000624 <Error_Handler+0x8>
	...

08000628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_MspInit+0x44>)
 8000630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <HAL_MspInit+0x44>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6613      	str	r3, [r2, #96]	; 0x60
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_MspInit+0x44>)
 800063c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_MspInit+0x44>)
 8000648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <HAL_MspInit+0x44>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	6593      	str	r3, [r2, #88]	; 0x58
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_MspInit+0x44>)
 8000654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000

08000670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0ac      	sub	sp, #176	; 0xb0
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2288      	movs	r2, #136	; 0x88
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f003 f8ab 	bl	80037ec <memset>
  if(huart->Instance==USART2)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a25      	ldr	r2, [pc, #148]	; (8000730 <HAL_UART_MspInit+0xc0>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d143      	bne.n	8000728 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fae9 	bl	8001c84 <HAL_RCCEx_PeriphCLKConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80006b8:	f7ff ffb0 	bl	800061c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <HAL_UART_MspInit+0xc4>)
 80006be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c0:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <HAL_UART_MspInit+0xc4>)
 80006c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c6:	6593      	str	r3, [r2, #88]	; 0x58
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <HAL_UART_MspInit+0xc4>)
 80006ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <HAL_UART_MspInit+0xc4>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d8:	4a16      	ldr	r2, [pc, #88]	; (8000734 <HAL_UART_MspInit+0xc4>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <HAL_UART_MspInit+0xc4>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006ec:	230c      	movs	r3, #12
 80006ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fe:	2303      	movs	r3, #3
 8000700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000704:	2307      	movs	r3, #7
 8000706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800070e:	4619      	mov	r1, r3
 8000710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000714:	f000 faa8 	bl	8000c68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	2026      	movs	r0, #38	; 0x26
 800071e:	f000 f9ee 	bl	8000afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000722:	2026      	movs	r0, #38	; 0x26
 8000724:	f000 fa07 	bl	8000b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000728:	bf00      	nop
 800072a:	37b0      	adds	r7, #176	; 0xb0
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40004400 	.word	0x40004400
 8000734:	40021000 	.word	0x40021000

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800073c:	e7fe      	b.n	800073c <NMI_Handler+0x4>

0800073e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <MemManage_Handler+0x4>

0800074a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <UsageFault_Handler+0x4>

08000756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000784:	f000 f89c 	bl	80008c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <USART2_IRQHandler+0x10>)
 8000792:	f002 f815 	bl	80027c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000034 	.word	0x20000034

080007a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <SystemInit+0x20>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <SystemInit+0x20>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c8:	f7ff ffea 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ce:	490d      	ldr	r1, [pc, #52]	; (8000804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d0:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <LoopForever+0xe>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e4:	4c0a      	ldr	r4, [pc, #40]	; (8000810 <LoopForever+0x16>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f2:	f003 f803 	bl	80037fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007f6:	f7ff fe65 	bl	80004c4 <main>

080007fa <LoopForever>:

LoopForever:
    b LoopForever
 80007fa:	e7fe      	b.n	80007fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000808:	080038b4 	.word	0x080038b4
  ldr r2, =_sbss
 800080c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000810:	200000bc 	.word	0x200000bc

08000814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_2_IRQHandler>

08000816 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800081c:	2300      	movs	r3, #0
 800081e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000820:	2003      	movs	r0, #3
 8000822:	f000 f961 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000826:	200f      	movs	r0, #15
 8000828:	f000 f80e 	bl	8000848 <HAL_InitTick>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	71fb      	strb	r3, [r7, #7]
 8000836:	e001      	b.n	800083c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000838:	f7ff fef6 	bl	8000628 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800083c:	79fb      	ldrb	r3, [r7, #7]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000850:	2300      	movs	r3, #0
 8000852:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_InitTick+0x6c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d023      	beq.n	80008a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_InitTick+0x70>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_InitTick+0x6c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	fbb3 f3f1 	udiv	r3, r3, r1
 800086e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f96d 	bl	8000b52 <HAL_SYSTICK_Config>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d10f      	bne.n	800089e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	d809      	bhi.n	8000898 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000884:	2200      	movs	r2, #0
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f000 f937 	bl	8000afe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000890:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <HAL_InitTick+0x74>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e007      	b.n	80008a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000898:	2301      	movs	r3, #1
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e004      	b.n	80008a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	e001      	b.n	80008a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000014 	.word	0x20000014
 80008b8:	2000000c 	.word	0x2000000c
 80008bc:	20000010 	.word	0x20000010

080008c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_IncTick+0x20>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_IncTick+0x24>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_IncTick+0x24>)
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000014 	.word	0x20000014
 80008e4:	200000b8 	.word	0x200000b8

080008e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <HAL_GetTick+0x14>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	200000b8 	.word	0x200000b8

08000900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000908:	f7ff ffee 	bl	80008e8 <HAL_GetTick>
 800090c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000918:	d005      	beq.n	8000926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_Delay+0x44>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000926:	bf00      	nop
 8000928:	f7ff ffde 	bl	80008e8 <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	429a      	cmp	r2, r3
 8000936:	d8f7      	bhi.n	8000928 <HAL_Delay+0x28>
  {
  }
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000014 	.word	0x20000014

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4907      	ldr	r1, [pc, #28]	; (80009e4 <__NVIC_EnableIRQ+0x38>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff8e 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff29 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff3e 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff8e 	bl	8000a3c <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5d 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff31 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffa2 	bl	8000aa4 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b085      	sub	sp, #20
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d008      	beq.n	8000b94 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2204      	movs	r2, #4
 8000b86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e022      	b.n	8000bda <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 020e 	bic.w	r2, r2, #14
 8000ba2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 0201 	bic.w	r2, r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb8:	f003 021c 	and.w	r2, r3, #28
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b084      	sub	sp, #16
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d005      	beq.n	8000c0a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2204      	movs	r2, #4
 8000c02:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e029      	b.n	8000c5e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 020e 	bic.w	r2, r2, #14
 8000c18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 0201 	bic.w	r2, r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f003 021c 	and.w	r2, r3, #28
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	2101      	movs	r1, #1
 8000c38:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2201      	movs	r2, #1
 8000c42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	4798      	blx	r3
    }
  }
  return status;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c76:	e17f      	b.n	8000f78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 8171 	beq.w	8000f72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d005      	beq.n	8000ca8 <HAL_GPIO_Init+0x40>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d130      	bne.n	8000d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cde:	2201      	movs	r2, #1
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	f003 0201 	and.w	r2, r3, #1
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d118      	bne.n	8000d48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	f003 0201 	and.w	r2, r3, #1
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d017      	beq.n	8000d84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d123      	bne.n	8000dd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	08da      	lsrs	r2, r3, #3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3208      	adds	r2, #8
 8000d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3208      	adds	r2, #8
 8000dd2:	6939      	ldr	r1, [r7, #16]
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0203 	and.w	r2, r3, #3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 80ac 	beq.w	8000f72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b5f      	ldr	r3, [pc, #380]	; (8000f98 <HAL_GPIO_Init+0x330>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1e:	4a5e      	ldr	r2, [pc, #376]	; (8000f98 <HAL_GPIO_Init+0x330>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6613      	str	r3, [r2, #96]	; 0x60
 8000e26:	4b5c      	ldr	r3, [pc, #368]	; (8000f98 <HAL_GPIO_Init+0x330>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e32:	4a5a      	ldr	r2, [pc, #360]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	220f      	movs	r2, #15
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e5c:	d025      	beq.n	8000eaa <HAL_GPIO_Init+0x242>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4f      	ldr	r2, [pc, #316]	; (8000fa0 <HAL_GPIO_Init+0x338>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d01f      	beq.n	8000ea6 <HAL_GPIO_Init+0x23e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4e      	ldr	r2, [pc, #312]	; (8000fa4 <HAL_GPIO_Init+0x33c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d019      	beq.n	8000ea2 <HAL_GPIO_Init+0x23a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4d      	ldr	r2, [pc, #308]	; (8000fa8 <HAL_GPIO_Init+0x340>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d013      	beq.n	8000e9e <HAL_GPIO_Init+0x236>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4c      	ldr	r2, [pc, #304]	; (8000fac <HAL_GPIO_Init+0x344>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x232>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4b      	ldr	r2, [pc, #300]	; (8000fb0 <HAL_GPIO_Init+0x348>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x22e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4a      	ldr	r2, [pc, #296]	; (8000fb4 <HAL_GPIO_Init+0x34c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x22a>
 8000e8e:	2306      	movs	r3, #6
 8000e90:	e00c      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000e92:	2307      	movs	r3, #7
 8000e94:	e00a      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000e96:	2305      	movs	r3, #5
 8000e98:	e008      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e004      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	f002 0203 	and.w	r2, r2, #3
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4093      	lsls	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ebc:	4937      	ldr	r1, [pc, #220]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eca:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <HAL_GPIO_Init+0x350>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eee:	4a32      	ldr	r2, [pc, #200]	; (8000fb8 <HAL_GPIO_Init+0x350>)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ef4:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <HAL_GPIO_Init+0x350>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f18:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f42:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f6c:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f47f ae78 	bne.w	8000c78 <HAL_GPIO_Init+0x10>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	371c      	adds	r7, #28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	48000400 	.word	0x48000400
 8000fa4:	48000800 	.word	0x48000800
 8000fa8:	48000c00 	.word	0x48000c00
 8000fac:	48001000 	.word	0x48001000
 8000fb0:	48001400 	.word	0x48001400
 8000fb4:	48001800 	.word	0x48001800
 8000fb8:	40010400 	.word	0x40010400

08000fbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe6:	d130      	bne.n	800104a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ff4:	d038      	beq.n	8001068 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	; (8001078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001004:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2232      	movs	r2, #50	; 0x32
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001012:	fba2 2303 	umull	r2, r3, r2, r3
 8001016:	0c9b      	lsrs	r3, r3, #18
 8001018:	3301      	adds	r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800101c:	e002      	b.n	8001024 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3b01      	subs	r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800102c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001030:	d102      	bne.n	8001038 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f2      	bne.n	800101e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001044:	d110      	bne.n	8001068 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e00f      	b.n	800106a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001056:	d007      	beq.n	8001068 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001060:	4a05      	ldr	r2, [pc, #20]	; (8001078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001066:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40007000 	.word	0x40007000
 800107c:	2000000c 	.word	0x2000000c
 8001080:	431bde83 	.word	0x431bde83

08001084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e3ca      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001096:	4b97      	ldr	r3, [pc, #604]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010a0:	4b94      	ldr	r3, [pc, #592]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 80e4 	beq.w	8001280 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <HAL_RCC_OscConfig+0x4a>
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	2b0c      	cmp	r3, #12
 80010c2:	f040 808b 	bne.w	80011dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f040 8087 	bne.w	80011dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010ce:	4b89      	ldr	r3, [pc, #548]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_RCC_OscConfig+0x62>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e3a2      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	4b82      	ldr	r3, [pc, #520]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <HAL_RCC_OscConfig+0x7c>
 80010f6:	4b7f      	ldr	r3, [pc, #508]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010fe:	e005      	b.n	800110c <HAL_RCC_OscConfig+0x88>
 8001100:	4b7c      	ldr	r3, [pc, #496]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800110c:	4293      	cmp	r3, r2
 800110e:	d223      	bcs.n	8001158 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fd55 	bl	8001bc4 <RCC_SetFlashLatencyFromMSIRange>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e383      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001124:	4b73      	ldr	r3, [pc, #460]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a72      	ldr	r2, [pc, #456]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800112a:	f043 0308 	orr.w	r3, r3, #8
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b70      	ldr	r3, [pc, #448]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	496d      	ldr	r1, [pc, #436]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800113e:	4313      	orrs	r3, r2
 8001140:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001142:	4b6c      	ldr	r3, [pc, #432]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	4968      	ldr	r1, [pc, #416]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001152:	4313      	orrs	r3, r2
 8001154:	604b      	str	r3, [r1, #4]
 8001156:	e025      	b.n	80011a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001158:	4b66      	ldr	r3, [pc, #408]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a65      	ldr	r2, [pc, #404]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b63      	ldr	r3, [pc, #396]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4960      	ldr	r1, [pc, #384]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001176:	4b5f      	ldr	r3, [pc, #380]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	495b      	ldr	r1, [pc, #364]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001186:	4313      	orrs	r3, r2
 8001188:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d109      	bne.n	80011a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fd15 	bl	8001bc4 <RCC_SetFlashLatencyFromMSIRange>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e343      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011a4:	f000 fc4a 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b52      	ldr	r3, [pc, #328]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	4950      	ldr	r1, [pc, #320]	; (80012f8 <HAL_RCC_OscConfig+0x274>)
 80011b6:	5ccb      	ldrb	r3, [r1, r3]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	4a4e      	ldr	r2, [pc, #312]	; (80012fc <HAL_RCC_OscConfig+0x278>)
 80011c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011c4:	4b4e      	ldr	r3, [pc, #312]	; (8001300 <HAL_RCC_OscConfig+0x27c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fb3d 	bl	8000848 <HAL_InitTick>
 80011ce:	4603      	mov	r3, r0
 80011d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d052      	beq.n	800127e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	e327      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d032      	beq.n	800124a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011e4:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a42      	ldr	r2, [pc, #264]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fb7a 	bl	80008e8 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011f8:	f7ff fb76 	bl	80008e8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e310      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800120a:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4931      	ldr	r1, [pc, #196]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001230:	4313      	orrs	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	492c      	ldr	r1, [pc, #176]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
 8001248:	e01a      	b.n	8001280 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001256:	f7ff fb47 	bl	80008e8 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800125e:	f7ff fb43 	bl	80008e8 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e2dd      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f0      	bne.n	800125e <HAL_RCC_OscConfig+0x1da>
 800127c:	e000      	b.n	8001280 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800127e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d074      	beq.n	8001376 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b08      	cmp	r3, #8
 8001290:	d005      	beq.n	800129e <HAL_RCC_OscConfig+0x21a>
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	2b0c      	cmp	r3, #12
 8001296:	d10e      	bne.n	80012b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2b03      	cmp	r3, #3
 800129c:	d10b      	bne.n	80012b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d064      	beq.n	8001374 <HAL_RCC_OscConfig+0x2f0>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d160      	bne.n	8001374 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e2ba      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012be:	d106      	bne.n	80012ce <HAL_RCC_OscConfig+0x24a>
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80012c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	e026      	b.n	800131c <HAL_RCC_OscConfig+0x298>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d6:	d115      	bne.n	8001304 <HAL_RCC_OscConfig+0x280>
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80012de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a02      	ldr	r2, [pc, #8]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 80012ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	e014      	b.n	800131c <HAL_RCC_OscConfig+0x298>
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000
 80012f8:	0800385c 	.word	0x0800385c
 80012fc:	2000000c 	.word	0x2000000c
 8001300:	20000010 	.word	0x20000010
 8001304:	4ba0      	ldr	r3, [pc, #640]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a9f      	ldr	r2, [pc, #636]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 800130a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b9d      	ldr	r3, [pc, #628]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a9c      	ldr	r2, [pc, #624]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d013      	beq.n	800134c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fae0 	bl	80008e8 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fadc 	bl	80008e8 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e276      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133e:	4b92      	ldr	r3, [pc, #584]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0x2a8>
 800134a:	e014      	b.n	8001376 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff facc 	bl	80008e8 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fac8 	bl	80008e8 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e262      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001366:	4b88      	ldr	r3, [pc, #544]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x2d0>
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d060      	beq.n	8001444 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b04      	cmp	r3, #4
 8001386:	d005      	beq.n	8001394 <HAL_RCC_OscConfig+0x310>
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2b0c      	cmp	r3, #12
 800138c:	d119      	bne.n	80013c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d116      	bne.n	80013c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001394:	4b7c      	ldr	r3, [pc, #496]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_OscConfig+0x328>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e23f      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ac:	4b76      	ldr	r3, [pc, #472]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	061b      	lsls	r3, r3, #24
 80013ba:	4973      	ldr	r1, [pc, #460]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c0:	e040      	b.n	8001444 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d023      	beq.n	8001412 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ca:	4b6f      	ldr	r3, [pc, #444]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a6e      	ldr	r2, [pc, #440]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 80013d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d6:	f7ff fa87 	bl	80008e8 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fa83 	bl	80008e8 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e21d      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013f0:	4b65      	ldr	r3, [pc, #404]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b62      	ldr	r3, [pc, #392]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	061b      	lsls	r3, r3, #24
 800140a:	495f      	ldr	r1, [pc, #380]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
 8001410:	e018      	b.n	8001444 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	4b5d      	ldr	r3, [pc, #372]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a5c      	ldr	r2, [pc, #368]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800141c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fa63 	bl	80008e8 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fa5f 	bl	80008e8 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e1f9      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001438:	4b53      	ldr	r3, [pc, #332]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f0      	bne.n	8001426 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d03c      	beq.n	80014ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d01c      	beq.n	8001492 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001458:	4b4b      	ldr	r3, [pc, #300]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 800145a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145e:	4a4a      	ldr	r2, [pc, #296]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001468:	f7ff fa3e 	bl	80008e8 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001470:	f7ff fa3a 	bl	80008e8 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e1d4      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001482:	4b41      	ldr	r3, [pc, #260]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0ef      	beq.n	8001470 <HAL_RCC_OscConfig+0x3ec>
 8001490:	e01b      	b.n	80014ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001492:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001498:	4a3b      	ldr	r2, [pc, #236]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a2:	f7ff fa21 	bl	80008e8 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff fa1d 	bl	80008e8 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e1b7      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 80014be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1ef      	bne.n	80014aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80a6 	beq.w	8001624 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014dc:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10d      	bne.n	8001504 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	4a26      	ldr	r2, [pc, #152]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f2:	6593      	str	r3, [r2, #88]	; 0x58
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001500:	2301      	movs	r3, #1
 8001502:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_RCC_OscConfig+0x508>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d118      	bne.n	8001542 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_RCC_OscConfig+0x508>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_RCC_OscConfig+0x508>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151c:	f7ff f9e4 	bl	80008e8 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001524:	f7ff f9e0 	bl	80008e8 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e17a      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_RCC_OscConfig+0x508>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d108      	bne.n	800155c <HAL_RCC_OscConfig+0x4d8>
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 800154c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800155a:	e029      	b.n	80015b0 <HAL_RCC_OscConfig+0x52c>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d115      	bne.n	8001590 <HAL_RCC_OscConfig+0x50c>
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156a:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 8001576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157a:	4a03      	ldr	r2, [pc, #12]	; (8001588 <HAL_RCC_OscConfig+0x504>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001584:	e014      	b.n	80015b0 <HAL_RCC_OscConfig+0x52c>
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	40007000 	.word	0x40007000
 8001590:	4b9c      	ldr	r3, [pc, #624]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 8001592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001596:	4a9b      	ldr	r2, [pc, #620]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015a0:	4b98      	ldr	r3, [pc, #608]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 80015a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a6:	4a97      	ldr	r2, [pc, #604]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 80015a8:	f023 0304 	bic.w	r3, r3, #4
 80015ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d016      	beq.n	80015e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff f996 	bl	80008e8 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff f992 	bl	80008e8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e12a      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015d6:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 80015d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ed      	beq.n	80015c0 <HAL_RCC_OscConfig+0x53c>
 80015e4:	e015      	b.n	8001612 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e6:	f7ff f97f 	bl	80008e8 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f7ff f97b 	bl	80008e8 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e113      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001604:	4b7f      	ldr	r3, [pc, #508]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 8001606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ed      	bne.n	80015ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001612:	7ffb      	ldrb	r3, [r7, #31]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d105      	bne.n	8001624 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001618:	4b7a      	ldr	r3, [pc, #488]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	4a79      	ldr	r2, [pc, #484]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 800161e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001622:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80fe 	beq.w	800182a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	2b02      	cmp	r3, #2
 8001634:	f040 80d0 	bne.w	80017d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001638:	4b72      	ldr	r3, [pc, #456]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f003 0203 	and.w	r2, r3, #3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	429a      	cmp	r2, r3
 800164a:	d130      	bne.n	80016ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	3b01      	subs	r3, #1
 8001658:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d127      	bne.n	80016ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001668:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d11f      	bne.n	80016ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001678:	2a07      	cmp	r2, #7
 800167a:	bf14      	ite	ne
 800167c:	2201      	movne	r2, #1
 800167e:	2200      	moveq	r2, #0
 8001680:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001682:	4293      	cmp	r3, r2
 8001684:	d113      	bne.n	80016ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001690:	085b      	lsrs	r3, r3, #1
 8001692:	3b01      	subs	r3, #1
 8001694:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d109      	bne.n	80016ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	085b      	lsrs	r3, r3, #1
 80016a6:	3b01      	subs	r3, #1
 80016a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d06e      	beq.n	800178c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b0c      	cmp	r3, #12
 80016b2:	d069      	beq.n	8001788 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016b4:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d105      	bne.n	80016cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016c0:	4b50      	ldr	r3, [pc, #320]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0ad      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016d0:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a4b      	ldr	r2, [pc, #300]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 80016d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016dc:	f7ff f904 	bl	80008e8 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e4:	f7ff f900 	bl	80008e8 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e09a      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001702:	4b40      	ldr	r3, [pc, #256]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	4b40      	ldr	r3, [pc, #256]	; (8001808 <HAL_RCC_OscConfig+0x784>)
 8001708:	4013      	ands	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001712:	3a01      	subs	r2, #1
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	4311      	orrs	r1, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800171c:	0212      	lsls	r2, r2, #8
 800171e:	4311      	orrs	r1, r2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001724:	0852      	lsrs	r2, r2, #1
 8001726:	3a01      	subs	r2, #1
 8001728:	0552      	lsls	r2, r2, #21
 800172a:	4311      	orrs	r1, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001730:	0852      	lsrs	r2, r2, #1
 8001732:	3a01      	subs	r2, #1
 8001734:	0652      	lsls	r2, r2, #25
 8001736:	4311      	orrs	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800173c:	0912      	lsrs	r2, r2, #4
 800173e:	0452      	lsls	r2, r2, #17
 8001740:	430a      	orrs	r2, r1
 8001742:	4930      	ldr	r1, [pc, #192]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 8001744:	4313      	orrs	r3, r2
 8001746:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001748:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a2d      	ldr	r2, [pc, #180]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 800174e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001752:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001754:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4a2a      	ldr	r2, [pc, #168]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 800175a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800175e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001760:	f7ff f8c2 	bl	80008e8 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff f8be 	bl	80008e8 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e058      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001786:	e050      	b.n	800182a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e04f      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d148      	bne.n	800182a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 800179e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4a16      	ldr	r2, [pc, #88]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 80017aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017b0:	f7ff f89a 	bl	80008e8 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff f896 	bl	80008e8 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e030      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x734>
 80017d6:	e028      	b.n	800182a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	d023      	beq.n	8001826 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_RCC_OscConfig+0x780>)
 80017e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff f87d 	bl	80008e8 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f0:	e00c      	b.n	800180c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f2:	f7ff f879 	bl	80008e8 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d905      	bls.n	800180c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e013      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
 8001804:	40021000 	.word	0x40021000
 8001808:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_OscConfig+0x7b0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1ec      	bne.n	80017f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_OscConfig+0x7b0>)
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	4905      	ldr	r1, [pc, #20]	; (8001834 <HAL_RCC_OscConfig+0x7b0>)
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_RCC_OscConfig+0x7b4>)
 8001820:	4013      	ands	r3, r2
 8001822:	60cb      	str	r3, [r1, #12]
 8001824:	e001      	b.n	800182a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40021000 	.word	0x40021000
 8001838:	feeefffc 	.word	0xfeeefffc

0800183c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0e7      	b.n	8001a20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001850:	4b75      	ldr	r3, [pc, #468]	; (8001a28 <HAL_RCC_ClockConfig+0x1ec>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d910      	bls.n	8001880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b72      	ldr	r3, [pc, #456]	; (8001a28 <HAL_RCC_ClockConfig+0x1ec>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 0207 	bic.w	r2, r3, #7
 8001866:	4970      	ldr	r1, [pc, #448]	; (8001a28 <HAL_RCC_ClockConfig+0x1ec>)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b6e      	ldr	r3, [pc, #440]	; (8001a28 <HAL_RCC_ClockConfig+0x1ec>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0cf      	b.n	8001a20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d010      	beq.n	80018ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001898:	429a      	cmp	r2, r3
 800189a:	d908      	bls.n	80018ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189c:	4b63      	ldr	r3, [pc, #396]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4960      	ldr	r1, [pc, #384]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d04c      	beq.n	8001954 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	4b5a      	ldr	r3, [pc, #360]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d121      	bne.n	8001912 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0a6      	b.n	8001a20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018da:	4b54      	ldr	r3, [pc, #336]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d115      	bne.n	8001912 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e09a      	b.n	8001a20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018f2:	4b4e      	ldr	r3, [pc, #312]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e08e      	b.n	8001a20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001902:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e086      	b.n	8001a20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001912:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f023 0203 	bic.w	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4943      	ldr	r1, [pc, #268]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 8001920:	4313      	orrs	r3, r2
 8001922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001924:	f7fe ffe0 	bl	80008e8 <HAL_GetTick>
 8001928:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192a:	e00a      	b.n	8001942 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192c:	f7fe ffdc 	bl	80008e8 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e06e      	b.n	8001a20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001942:	4b3a      	ldr	r3, [pc, #232]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 020c 	and.w	r2, r3, #12
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	429a      	cmp	r2, r3
 8001952:	d1eb      	bne.n	800192c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d010      	beq.n	8001982 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800196c:	429a      	cmp	r2, r3
 800196e:	d208      	bcs.n	8001982 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001970:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	492b      	ldr	r1, [pc, #172]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001982:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <HAL_RCC_ClockConfig+0x1ec>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d210      	bcs.n	80019b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_RCC_ClockConfig+0x1ec>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 0207 	bic.w	r2, r3, #7
 8001998:	4923      	ldr	r1, [pc, #140]	; (8001a28 <HAL_RCC_ClockConfig+0x1ec>)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	4313      	orrs	r3, r2
 800199e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_RCC_ClockConfig+0x1ec>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e036      	b.n	8001a20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d008      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	4918      	ldr	r1, [pc, #96]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d009      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4910      	ldr	r1, [pc, #64]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019f0:	f000 f824 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	490b      	ldr	r1, [pc, #44]	; (8001a30 <HAL_RCC_ClockConfig+0x1f4>)
 8001a02:	5ccb      	ldrb	r3, [r1, r3]
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1f8>)
 8001a0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x1fc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe ff17 	bl	8000848 <HAL_InitTick>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a1e:	7afb      	ldrb	r3, [r7, #11]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	0800385c 	.word	0x0800385c
 8001a34:	2000000c 	.word	0x2000000c
 8001a38:	20000010 	.word	0x20000010

08001a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a4a:	4b3e      	ldr	r3, [pc, #248]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a54:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x34>
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d121      	bne.n	8001aae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d11e      	bne.n	8001aae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a70:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a7c:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a82:	0a1b      	lsrs	r3, r3, #8
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e005      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a98:	4a2b      	ldr	r2, [pc, #172]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10d      	bne.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d102      	bne.n	8001aba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	e004      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ac2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d134      	bne.n	8001b34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d003      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d003      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ae0:	e005      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ae4:	617b      	str	r3, [r7, #20]
      break;
 8001ae6:	e005      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001aea:	617b      	str	r3, [r7, #20]
      break;
 8001aec:	e002      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	617b      	str	r3, [r7, #20]
      break;
 8001af2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	3301      	adds	r3, #1
 8001b00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	fb03 f202 	mul.w	r2, r3, r2
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	0e5b      	lsrs	r3, r3, #25
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	3301      	adds	r3, #1
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b34:	69bb      	ldr	r3, [r7, #24]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	08003874 	.word	0x08003874
 8001b4c:	00f42400 	.word	0x00f42400
 8001b50:	007a1200 	.word	0x007a1200

08001b54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	2000000c 	.word	0x2000000c

08001b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b70:	f7ff fff0 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4904      	ldr	r1, [pc, #16]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000
 8001b94:	0800386c 	.word	0x0800386c

08001b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b9c:	f7ff ffda 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0adb      	lsrs	r3, r3, #11
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4904      	ldr	r1, [pc, #16]	; (8001bc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	f003 031f 	and.w	r3, r3, #31
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	0800386c 	.word	0x0800386c

08001bc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bdc:	f7ff f9ee 	bl	8000fbc <HAL_PWREx_GetVoltageRange>
 8001be0:	6178      	str	r0, [r7, #20]
 8001be2:	e014      	b.n	8001c0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	4a24      	ldr	r2, [pc, #144]	; (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bee:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bfc:	f7ff f9de 	bl	8000fbc <HAL_PWREx_GetVoltageRange>
 8001c00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c14:	d10b      	bne.n	8001c2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d919      	bls.n	8001c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2ba0      	cmp	r3, #160	; 0xa0
 8001c20:	d902      	bls.n	8001c28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c22:	2302      	movs	r3, #2
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	e013      	b.n	8001c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c28:	2301      	movs	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	e010      	b.n	8001c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b80      	cmp	r3, #128	; 0x80
 8001c32:	d902      	bls.n	8001c3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c34:	2303      	movs	r3, #3
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	e00a      	b.n	8001c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b80      	cmp	r3, #128	; 0x80
 8001c3e:	d102      	bne.n	8001c46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c40:	2302      	movs	r3, #2
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	e004      	b.n	8001c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b70      	cmp	r3, #112	; 0x70
 8001c4a:	d101      	bne.n	8001c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 0207 	bic.w	r2, r3, #7
 8001c58:	4909      	ldr	r1, [pc, #36]	; (8001c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d001      	beq.n	8001c72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40022000 	.word	0x40022000

08001c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c90:	2300      	movs	r3, #0
 8001c92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d041      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ca4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ca8:	d02a      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001caa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001cae:	d824      	bhi.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001cb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cb4:	d008      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001cb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cba:	d81e      	bhi.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00a      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cc4:	d010      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001cc6:	e018      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cc8:	4b86      	ldr	r3, [pc, #536]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4a85      	ldr	r2, [pc, #532]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cd4:	e015      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fabb 	bl	8002258 <RCCEx_PLLSAI1_Config>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ce6:	e00c      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3320      	adds	r3, #32
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 fba6 	bl	8002440 <RCCEx_PLLSAI2_Config>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cf8:	e003      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	74fb      	strb	r3, [r7, #19]
      break;
 8001cfe:	e000      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d02:	7cfb      	ldrb	r3, [r7, #19]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10b      	bne.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d08:	4b76      	ldr	r3, [pc, #472]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d16:	4973      	ldr	r1, [pc, #460]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d1e:	e001      	b.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d20:	7cfb      	ldrb	r3, [r7, #19]
 8001d22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d041      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d38:	d02a      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d3e:	d824      	bhi.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d44:	d008      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d4a:	d81e      	bhi.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d010      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d56:	e018      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d58:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a61      	ldr	r2, [pc, #388]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d64:	e015      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fa73 	bl	8002258 <RCCEx_PLLSAI1_Config>
 8001d72:	4603      	mov	r3, r0
 8001d74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d76:	e00c      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3320      	adds	r3, #32
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fb5e 	bl	8002440 <RCCEx_PLLSAI2_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d88:	e003      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	74fb      	strb	r3, [r7, #19]
      break;
 8001d8e:	e000      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d92:	7cfb      	ldrb	r3, [r7, #19]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10b      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d98:	4b52      	ldr	r3, [pc, #328]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001da6:	494f      	ldr	r1, [pc, #316]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dae:	e001      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80a0 	beq.w	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00d      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	4a40      	ldr	r2, [pc, #256]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de6:	6593      	str	r3, [r2, #88]	; 0x58
 8001de8:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df4:	2301      	movs	r3, #1
 8001df6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df8:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a3a      	ldr	r2, [pc, #232]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e04:	f7fe fd70 	bl	80008e8 <HAL_GetTick>
 8001e08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e0a:	e009      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0c:	f7fe fd6c 	bl	80008e8 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d902      	bls.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	74fb      	strb	r3, [r7, #19]
        break;
 8001e1e:	e005      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e20:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ef      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e2c:	7cfb      	ldrb	r3, [r7, #19]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d15c      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01f      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d019      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e62:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e7c:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fd2b 	bl	80008e8 <HAL_GetTick>
 8001e92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e94:	e00b      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7fe fd27 	bl	80008e8 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d902      	bls.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	74fb      	strb	r3, [r7, #19]
            break;
 8001eac:	e006      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ec      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001ebc:	7cfb      	ldrb	r3, [r7, #19]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ed2:	4904      	ldr	r1, [pc, #16]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001eda:	e009      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001edc:	7cfb      	ldrb	r3, [r7, #19]
 8001ede:	74bb      	strb	r3, [r7, #18]
 8001ee0:	e006      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef0:	7c7b      	ldrb	r3, [r7, #17]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef6:	4b9e      	ldr	r3, [pc, #632]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	4a9d      	ldr	r2, [pc, #628]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00a      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f0e:	4b98      	ldr	r3, [pc, #608]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f14:	f023 0203 	bic.w	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	4994      	ldr	r1, [pc, #592]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00a      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f30:	4b8f      	ldr	r3, [pc, #572]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f36:	f023 020c 	bic.w	r2, r3, #12
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	498c      	ldr	r1, [pc, #560]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f52:	4b87      	ldr	r3, [pc, #540]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	4983      	ldr	r1, [pc, #524]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f74:	4b7e      	ldr	r3, [pc, #504]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	497b      	ldr	r1, [pc, #492]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00a      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f96:	4b76      	ldr	r3, [pc, #472]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa4:	4972      	ldr	r1, [pc, #456]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fb8:	4b6d      	ldr	r3, [pc, #436]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	496a      	ldr	r1, [pc, #424]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fda:	4b65      	ldr	r3, [pc, #404]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe8:	4961      	ldr	r1, [pc, #388]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ffc:	4b5c      	ldr	r3, [pc, #368]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200a:	4959      	ldr	r1, [pc, #356]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800201e:	4b54      	ldr	r3, [pc, #336]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002024:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202c:	4950      	ldr	r1, [pc, #320]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002040:	4b4b      	ldr	r3, [pc, #300]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	4948      	ldr	r1, [pc, #288]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002062:	4b43      	ldr	r3, [pc, #268]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002068:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	493f      	ldr	r1, [pc, #252]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002072:	4313      	orrs	r3, r2
 8002074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d028      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002084:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002092:	4937      	ldr	r1, [pc, #220]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800209e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020a2:	d106      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a4:	4b32      	ldr	r3, [pc, #200]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a31      	ldr	r2, [pc, #196]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ae:	60d3      	str	r3, [r2, #12]
 80020b0:	e011      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	2101      	movs	r1, #1
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f8c8 	bl	8002258 <RCCEx_PLLSAI1_Config>
 80020c8:	4603      	mov	r3, r0
 80020ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80020d2:	7cfb      	ldrb	r3, [r7, #19]
 80020d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d028      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020e2:	4b23      	ldr	r3, [pc, #140]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	491f      	ldr	r1, [pc, #124]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002100:	d106      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800210c:	60d3      	str	r3, [r2, #12]
 800210e:	e011      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002118:	d10c      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3304      	adds	r3, #4
 800211e:	2101      	movs	r1, #1
 8002120:	4618      	mov	r0, r3
 8002122:	f000 f899 	bl	8002258 <RCCEx_PLLSAI1_Config>
 8002126:	4603      	mov	r3, r0
 8002128:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800212a:	7cfb      	ldrb	r3, [r7, #19]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d02b      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214e:	4908      	ldr	r1, [pc, #32]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800215e:	d109      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a02      	ldr	r2, [pc, #8]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800216a:	60d3      	str	r3, [r2, #12]
 800216c:	e014      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800217c:	d10c      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	2101      	movs	r1, #1
 8002184:	4618      	mov	r0, r3
 8002186:	f000 f867 	bl	8002258 <RCCEx_PLLSAI1_Config>
 800218a:	4603      	mov	r3, r0
 800218c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800218e:	7cfb      	ldrb	r3, [r7, #19]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d02f      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021a4:	4b2b      	ldr	r3, [pc, #172]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021b2:	4928      	ldr	r1, [pc, #160]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021c2:	d10d      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3304      	adds	r3, #4
 80021c8:	2102      	movs	r1, #2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f844 	bl	8002258 <RCCEx_PLLSAI1_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d014      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021da:	7cfb      	ldrb	r3, [r7, #19]
 80021dc:	74bb      	strb	r3, [r7, #18]
 80021de:	e011      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021e8:	d10c      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3320      	adds	r3, #32
 80021ee:	2102      	movs	r1, #2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 f925 	bl	8002440 <RCCEx_PLLSAI2_Config>
 80021f6:	4603      	mov	r3, r0
 80021f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021fa:	7cfb      	ldrb	r3, [r7, #19]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800221e:	490d      	ldr	r1, [pc, #52]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002238:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002242:	4904      	ldr	r1, [pc, #16]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800224a:	7cbb      	ldrb	r3, [r7, #18]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000

08002258 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002266:	4b75      	ldr	r3, [pc, #468]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d018      	beq.n	80022a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002272:	4b72      	ldr	r3, [pc, #456]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 0203 	and.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d10d      	bne.n	800229e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
       ||
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800228a:	4b6c      	ldr	r3, [pc, #432]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
       ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d047      	beq.n	800232e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
 80022a2:	e044      	b.n	800232e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d018      	beq.n	80022de <RCCEx_PLLSAI1_Config+0x86>
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d825      	bhi.n	80022fc <RCCEx_PLLSAI1_Config+0xa4>
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d002      	beq.n	80022ba <RCCEx_PLLSAI1_Config+0x62>
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d009      	beq.n	80022cc <RCCEx_PLLSAI1_Config+0x74>
 80022b8:	e020      	b.n	80022fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022ba:	4b60      	ldr	r3, [pc, #384]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d11d      	bne.n	8002302 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ca:	e01a      	b.n	8002302 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022cc:	4b5b      	ldr	r3, [pc, #364]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d116      	bne.n	8002306 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022dc:	e013      	b.n	8002306 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022de:	4b57      	ldr	r3, [pc, #348]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10f      	bne.n	800230a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022ea:	4b54      	ldr	r3, [pc, #336]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022fa:	e006      	b.n	800230a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002300:	e004      	b.n	800230c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002302:	bf00      	nop
 8002304:	e002      	b.n	800230c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002306:	bf00      	nop
 8002308:	e000      	b.n	800230c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800230a:	bf00      	nop
    }

    if(status == HAL_OK)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10d      	bne.n	800232e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002312:	4b4a      	ldr	r3, [pc, #296]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6819      	ldr	r1, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	430b      	orrs	r3, r1
 8002328:	4944      	ldr	r1, [pc, #272]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d17d      	bne.n	8002430 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002334:	4b41      	ldr	r3, [pc, #260]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a40      	ldr	r2, [pc, #256]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 800233a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800233e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002340:	f7fe fad2 	bl	80008e8 <HAL_GetTick>
 8002344:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002346:	e009      	b.n	800235c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002348:	f7fe face 	bl	80008e8 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d902      	bls.n	800235c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	73fb      	strb	r3, [r7, #15]
        break;
 800235a:	e005      	b.n	8002368 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800235c:	4b37      	ldr	r3, [pc, #220]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ef      	bne.n	8002348 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d160      	bne.n	8002430 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d111      	bne.n	8002398 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800237c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6892      	ldr	r2, [r2, #8]
 8002384:	0211      	lsls	r1, r2, #8
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68d2      	ldr	r2, [r2, #12]
 800238a:	0912      	lsrs	r2, r2, #4
 800238c:	0452      	lsls	r2, r2, #17
 800238e:	430a      	orrs	r2, r1
 8002390:	492a      	ldr	r1, [pc, #168]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002392:	4313      	orrs	r3, r2
 8002394:	610b      	str	r3, [r1, #16]
 8002396:	e027      	b.n	80023e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d112      	bne.n	80023c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800239e:	4b27      	ldr	r3, [pc, #156]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80023a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6892      	ldr	r2, [r2, #8]
 80023ae:	0211      	lsls	r1, r2, #8
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6912      	ldr	r2, [r2, #16]
 80023b4:	0852      	lsrs	r2, r2, #1
 80023b6:	3a01      	subs	r2, #1
 80023b8:	0552      	lsls	r2, r2, #21
 80023ba:	430a      	orrs	r2, r1
 80023bc:	491f      	ldr	r1, [pc, #124]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	610b      	str	r3, [r1, #16]
 80023c2:	e011      	b.n	80023e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6892      	ldr	r2, [r2, #8]
 80023d4:	0211      	lsls	r1, r2, #8
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6952      	ldr	r2, [r2, #20]
 80023da:	0852      	lsrs	r2, r2, #1
 80023dc:	3a01      	subs	r2, #1
 80023de:	0652      	lsls	r2, r2, #25
 80023e0:	430a      	orrs	r2, r1
 80023e2:	4916      	ldr	r1, [pc, #88]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a13      	ldr	r2, [pc, #76]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7fe fa78 	bl	80008e8 <HAL_GetTick>
 80023f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023fa:	e009      	b.n	8002410 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023fc:	f7fe fa74 	bl	80008e8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d902      	bls.n	8002410 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	73fb      	strb	r3, [r7, #15]
          break;
 800240e:	e005      	b.n	800241c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ef      	beq.n	80023fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	4904      	ldr	r1, [pc, #16]	; (800243c <RCCEx_PLLSAI1_Config+0x1e4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000

08002440 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800244e:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d018      	beq.n	800248c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800245a:	4b67      	ldr	r3, [pc, #412]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0203 	and.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d10d      	bne.n	8002486 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
       ||
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002472:	4b61      	ldr	r3, [pc, #388]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
       ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d047      	beq.n	8002516 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	e044      	b.n	8002516 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d018      	beq.n	80024c6 <RCCEx_PLLSAI2_Config+0x86>
 8002494:	2b03      	cmp	r3, #3
 8002496:	d825      	bhi.n	80024e4 <RCCEx_PLLSAI2_Config+0xa4>
 8002498:	2b01      	cmp	r3, #1
 800249a:	d002      	beq.n	80024a2 <RCCEx_PLLSAI2_Config+0x62>
 800249c:	2b02      	cmp	r3, #2
 800249e:	d009      	beq.n	80024b4 <RCCEx_PLLSAI2_Config+0x74>
 80024a0:	e020      	b.n	80024e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024a2:	4b55      	ldr	r3, [pc, #340]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d11d      	bne.n	80024ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b2:	e01a      	b.n	80024ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024b4:	4b50      	ldr	r3, [pc, #320]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d116      	bne.n	80024ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c4:	e013      	b.n	80024ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024c6:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024d2:	4b49      	ldr	r3, [pc, #292]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024e2:	e006      	b.n	80024f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      break;
 80024e8:	e004      	b.n	80024f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024ea:	bf00      	nop
 80024ec:	e002      	b.n	80024f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024ee:	bf00      	nop
 80024f0:	e000      	b.n	80024f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024fa:	4b3f      	ldr	r3, [pc, #252]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	430b      	orrs	r3, r1
 8002510:	4939      	ldr	r1, [pc, #228]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d167      	bne.n	80025ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800251c:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a35      	ldr	r2, [pc, #212]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002528:	f7fe f9de 	bl	80008e8 <HAL_GetTick>
 800252c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800252e:	e009      	b.n	8002544 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002530:	f7fe f9da 	bl	80008e8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d902      	bls.n	8002544 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	73fb      	strb	r3, [r7, #15]
        break;
 8002542:	e005      	b.n	8002550 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002544:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ef      	bne.n	8002530 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d14a      	bne.n	80025ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d111      	bne.n	8002580 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800255c:	4b26      	ldr	r3, [pc, #152]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6892      	ldr	r2, [r2, #8]
 800256c:	0211      	lsls	r1, r2, #8
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68d2      	ldr	r2, [r2, #12]
 8002572:	0912      	lsrs	r2, r2, #4
 8002574:	0452      	lsls	r2, r2, #17
 8002576:	430a      	orrs	r2, r1
 8002578:	491f      	ldr	r1, [pc, #124]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257a:	4313      	orrs	r3, r2
 800257c:	614b      	str	r3, [r1, #20]
 800257e:	e011      	b.n	80025a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002580:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002588:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6892      	ldr	r2, [r2, #8]
 8002590:	0211      	lsls	r1, r2, #8
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6912      	ldr	r2, [r2, #16]
 8002596:	0852      	lsrs	r2, r2, #1
 8002598:	3a01      	subs	r2, #1
 800259a:	0652      	lsls	r2, r2, #25
 800259c:	430a      	orrs	r2, r1
 800259e:	4916      	ldr	r1, [pc, #88]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80025a4:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7fe f99a 	bl	80008e8 <HAL_GetTick>
 80025b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025b6:	e009      	b.n	80025cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025b8:	f7fe f996 	bl	80008e8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d902      	bls.n	80025cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	73fb      	strb	r3, [r7, #15]
          break;
 80025ca:	e005      	b.n	80025d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ef      	beq.n	80025b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	4904      	ldr	r1, [pc, #16]	; (80025f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e040      	b.n	8002690 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe f826 	bl	8000670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fbc2 	bl	8002dc4 <UART_SetConfig>
 8002640:	4603      	mov	r3, r0
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e022      	b.n	8002690 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fe6e 	bl	8003334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002666:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002676:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fef5 	bl	8003478 <UART_CheckIdleState>
 800268e:	4603      	mov	r3, r0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	4613      	mov	r3, r2
 80026a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	f040 8082 	bne.w	80027b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_UART_Transmit+0x26>
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e07a      	b.n	80027b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_UART_Transmit+0x38>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e073      	b.n	80027b8 <HAL_UART_Transmit+0x120>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2221      	movs	r2, #33	; 0x21
 80026e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026e6:	f7fe f8ff 	bl	80008e8 <HAL_GetTick>
 80026ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	88fa      	ldrh	r2, [r7, #6]
 80026f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002704:	d108      	bne.n	8002718 <HAL_UART_Transmit+0x80>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e003      	b.n	8002720 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002728:	e02d      	b.n	8002786 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2200      	movs	r2, #0
 8002732:	2180      	movs	r1, #128	; 0x80
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fee8 	bl	800350a <UART_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e039      	b.n	80027b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10b      	bne.n	8002762 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002756:	b292      	uxth	r2, r2
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	3302      	adds	r3, #2
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	e008      	b.n	8002774 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b292      	uxth	r2, r2
 800276c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3301      	adds	r3, #1
 8002772:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1cb      	bne.n	800272a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2200      	movs	r2, #0
 800279a:	2140      	movs	r1, #64	; 0x40
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 feb4 	bl	800350a <UART_WaitOnFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e005      	b.n	80027b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e000      	b.n	80027b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
  }
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b0ba      	sub	sp, #232	; 0xe8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80027ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80027ee:	4013      	ands	r3, r2
 80027f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80027f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d115      	bne.n	8002828 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00f      	beq.n	8002828 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 82a6 	beq.w	8002d6a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
      }
      return;
 8002826:	e2a0      	b.n	8002d6a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002828:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8117 	beq.w	8002a60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800283e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002842:	4b85      	ldr	r3, [pc, #532]	; (8002a58 <HAL_UART_IRQHandler+0x298>)
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 810a 	beq.w	8002a60 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800284c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d011      	beq.n	800287c <HAL_UART_IRQHandler+0xbc>
 8002858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002872:	f043 0201 	orr.w	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800287c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d011      	beq.n	80028ac <HAL_UART_IRQHandler+0xec>
 8002888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00b      	beq.n	80028ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2202      	movs	r2, #2
 800289a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028a2:	f043 0204 	orr.w	r2, r3, #4
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d011      	beq.n	80028dc <HAL_UART_IRQHandler+0x11c>
 80028b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2204      	movs	r2, #4
 80028ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028d2:	f043 0202 	orr.w	r2, r3, #2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d017      	beq.n	8002918 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2208      	movs	r2, #8
 8002906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800290e:	f043 0208 	orr.w	r2, r3, #8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <HAL_UART_IRQHandler+0x18a>
 8002924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00c      	beq.n	800294a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002938:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 820c 	beq.w	8002d6e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	2b40      	cmp	r3, #64	; 0x40
 8002994:	d005      	beq.n	80029a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800299a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d04f      	beq.n	8002a42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fe75 	bl	8003692 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b40      	cmp	r3, #64	; 0x40
 80029b4:	d141      	bne.n	8002a3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3308      	adds	r3, #8
 80029bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3308      	adds	r3, #8
 80029de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029f2:	e841 2300 	strex	r3, r2, [r1]
 80029f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1d9      	bne.n	80029b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d013      	beq.n	8002a32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <HAL_UART_IRQHandler+0x29c>)
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f8e5 	bl	8000be6 <HAL_DMA_Abort_IT>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d017      	beq.n	8002a52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a30:	e00f      	b.n	8002a52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f9b0 	bl	8002d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a38:	e00b      	b.n	8002a52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f9ac 	bl	8002d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a40:	e007      	b.n	8002a52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f9a8 	bl	8002d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002a50:	e18d      	b.n	8002d6e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a52:	bf00      	nop
    return;
 8002a54:	e18b      	b.n	8002d6e <HAL_UART_IRQHandler+0x5ae>
 8002a56:	bf00      	nop
 8002a58:	04000120 	.word	0x04000120
 8002a5c:	08003759 	.word	0x08003759

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	f040 8146 	bne.w	8002cf6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 813f 	beq.w	8002cf6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8138 	beq.w	8002cf6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	f040 80b4 	bne.w	8002c06 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002aaa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 815f 	beq.w	8002d72 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	f080 8157 	bcs.w	8002d72 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 8085 	bne.w	8002bea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002af4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002afc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b1a:	e841 2300 	strex	r3, r2, [r1]
 8002b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1da      	bne.n	8002ae0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	3308      	adds	r3, #8
 8002b30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b34:	e853 3f00 	ldrex	r3, [r3]
 8002b38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3308      	adds	r3, #8
 8002b4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b5a:	e841 2300 	strex	r3, r2, [r1]
 8002b5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1e1      	bne.n	8002b2a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3308      	adds	r3, #8
 8002b6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b70:	e853 3f00 	ldrex	r3, [r3]
 8002b74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3308      	adds	r3, #8
 8002b86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e3      	bne.n	8002b66 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bba:	f023 0310 	bic.w	r3, r3, #16
 8002bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bd4:	e841 2300 	strex	r3, r2, [r1]
 8002bd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e4      	bne.n	8002baa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd ffc0 	bl	8000b6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f8d4 	bl	8002dac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c04:	e0b5      	b.n	8002d72 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80a7 	beq.w	8002d76 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80a2 	beq.w	8002d76 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	e853 3f00 	ldrex	r3, [r3]
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c54:	647b      	str	r3, [r7, #68]	; 0x44
 8002c56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c5c:	e841 2300 	strex	r3, r2, [r1]
 8002c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e4      	bne.n	8002c32 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	e853 3f00 	ldrex	r3, [r3]
 8002c76:	623b      	str	r3, [r7, #32]
   return(result);
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f023 0301 	bic.w	r3, r3, #1
 8002c7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3308      	adds	r3, #8
 8002c88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c8c:	633a      	str	r2, [r7, #48]	; 0x30
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e3      	bne.n	8002c68 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	e853 3f00 	ldrex	r3, [r3]
 8002cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0310 	bic.w	r3, r3, #16
 8002cc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd8:	69b9      	ldr	r1, [r7, #24]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	e841 2300 	strex	r3, r2, [r1]
 8002ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e4      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cec:	4619      	mov	r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f85c 	bl	8002dac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cf4:	e03f      	b.n	8002d76 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00e      	beq.n	8002d20 <HAL_UART_IRQHandler+0x560>
 8002d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fd5d 	bl	80037d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d1e:	e02d      	b.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00e      	beq.n	8002d4a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01c      	beq.n	8002d7a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
    }
    return;
 8002d48:	e017      	b.n	8002d7a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d012      	beq.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
 8002d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fd0e 	bl	8003784 <UART_EndTransmit_IT>
    return;
 8002d68:	e008      	b.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d6a:	bf00      	nop
 8002d6c:	e006      	b.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8002d6e:	bf00      	nop
 8002d70:	e004      	b.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d72:	bf00      	nop
 8002d74:	e002      	b.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d76:	bf00      	nop
 8002d78:	e000      	b.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8002d7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002d7c:	37e8      	adds	r7, #232	; 0xe8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop

08002d84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc8:	b08a      	sub	sp, #40	; 0x28
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4ba4      	ldr	r3, [pc, #656]	; (8003084 <UART_SetConfig+0x2c0>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a99      	ldr	r2, [pc, #612]	; (8003088 <UART_SetConfig+0x2c4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e40:	430a      	orrs	r2, r1
 8002e42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a90      	ldr	r2, [pc, #576]	; (800308c <UART_SetConfig+0x2c8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d126      	bne.n	8002e9c <UART_SetConfig+0xd8>
 8002e4e:	4b90      	ldr	r3, [pc, #576]	; (8003090 <UART_SetConfig+0x2cc>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d81b      	bhi.n	8002e94 <UART_SetConfig+0xd0>
 8002e5c:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <UART_SetConfig+0xa0>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002e75 	.word	0x08002e75
 8002e68:	08002e85 	.word	0x08002e85
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e8d 	.word	0x08002e8d
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e7a:	e116      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e82:	e112      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002e84:	2304      	movs	r3, #4
 8002e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e8a:	e10e      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e92:	e10a      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002e94:	2310      	movs	r3, #16
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9a:	e106      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a7c      	ldr	r2, [pc, #496]	; (8003094 <UART_SetConfig+0x2d0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d138      	bne.n	8002f18 <UART_SetConfig+0x154>
 8002ea6:	4b7a      	ldr	r3, [pc, #488]	; (8003090 <UART_SetConfig+0x2cc>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b0c      	cmp	r3, #12
 8002eb2:	d82d      	bhi.n	8002f10 <UART_SetConfig+0x14c>
 8002eb4:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <UART_SetConfig+0xf8>)
 8002eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eba:	bf00      	nop
 8002ebc:	08002ef1 	.word	0x08002ef1
 8002ec0:	08002f11 	.word	0x08002f11
 8002ec4:	08002f11 	.word	0x08002f11
 8002ec8:	08002f11 	.word	0x08002f11
 8002ecc:	08002f01 	.word	0x08002f01
 8002ed0:	08002f11 	.word	0x08002f11
 8002ed4:	08002f11 	.word	0x08002f11
 8002ed8:	08002f11 	.word	0x08002f11
 8002edc:	08002ef9 	.word	0x08002ef9
 8002ee0:	08002f11 	.word	0x08002f11
 8002ee4:	08002f11 	.word	0x08002f11
 8002ee8:	08002f11 	.word	0x08002f11
 8002eec:	08002f09 	.word	0x08002f09
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef6:	e0d8      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002efe:	e0d4      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002f00:	2304      	movs	r3, #4
 8002f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f06:	e0d0      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002f08:	2308      	movs	r3, #8
 8002f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f0e:	e0cc      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002f10:	2310      	movs	r3, #16
 8002f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f16:	e0c8      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a5e      	ldr	r2, [pc, #376]	; (8003098 <UART_SetConfig+0x2d4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d125      	bne.n	8002f6e <UART_SetConfig+0x1aa>
 8002f22:	4b5b      	ldr	r3, [pc, #364]	; (8003090 <UART_SetConfig+0x2cc>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f2c:	2b30      	cmp	r3, #48	; 0x30
 8002f2e:	d016      	beq.n	8002f5e <UART_SetConfig+0x19a>
 8002f30:	2b30      	cmp	r3, #48	; 0x30
 8002f32:	d818      	bhi.n	8002f66 <UART_SetConfig+0x1a2>
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d00a      	beq.n	8002f4e <UART_SetConfig+0x18a>
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d814      	bhi.n	8002f66 <UART_SetConfig+0x1a2>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <UART_SetConfig+0x182>
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d008      	beq.n	8002f56 <UART_SetConfig+0x192>
 8002f44:	e00f      	b.n	8002f66 <UART_SetConfig+0x1a2>
 8002f46:	2300      	movs	r3, #0
 8002f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4c:	e0ad      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f54:	e0a9      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002f56:	2304      	movs	r3, #4
 8002f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5c:	e0a5      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002f5e:	2308      	movs	r3, #8
 8002f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f64:	e0a1      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002f66:	2310      	movs	r3, #16
 8002f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f6c:	e09d      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a4a      	ldr	r2, [pc, #296]	; (800309c <UART_SetConfig+0x2d8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d125      	bne.n	8002fc4 <UART_SetConfig+0x200>
 8002f78:	4b45      	ldr	r3, [pc, #276]	; (8003090 <UART_SetConfig+0x2cc>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f82:	2bc0      	cmp	r3, #192	; 0xc0
 8002f84:	d016      	beq.n	8002fb4 <UART_SetConfig+0x1f0>
 8002f86:	2bc0      	cmp	r3, #192	; 0xc0
 8002f88:	d818      	bhi.n	8002fbc <UART_SetConfig+0x1f8>
 8002f8a:	2b80      	cmp	r3, #128	; 0x80
 8002f8c:	d00a      	beq.n	8002fa4 <UART_SetConfig+0x1e0>
 8002f8e:	2b80      	cmp	r3, #128	; 0x80
 8002f90:	d814      	bhi.n	8002fbc <UART_SetConfig+0x1f8>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <UART_SetConfig+0x1d8>
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	d008      	beq.n	8002fac <UART_SetConfig+0x1e8>
 8002f9a:	e00f      	b.n	8002fbc <UART_SetConfig+0x1f8>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa2:	e082      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002faa:	e07e      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002fac:	2304      	movs	r3, #4
 8002fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb2:	e07a      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fba:	e076      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc2:	e072      	b.n	80030aa <UART_SetConfig+0x2e6>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a35      	ldr	r2, [pc, #212]	; (80030a0 <UART_SetConfig+0x2dc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d12a      	bne.n	8003024 <UART_SetConfig+0x260>
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <UART_SetConfig+0x2cc>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fdc:	d01a      	beq.n	8003014 <UART_SetConfig+0x250>
 8002fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fe2:	d81b      	bhi.n	800301c <UART_SetConfig+0x258>
 8002fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe8:	d00c      	beq.n	8003004 <UART_SetConfig+0x240>
 8002fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fee:	d815      	bhi.n	800301c <UART_SetConfig+0x258>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <UART_SetConfig+0x238>
 8002ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff8:	d008      	beq.n	800300c <UART_SetConfig+0x248>
 8002ffa:	e00f      	b.n	800301c <UART_SetConfig+0x258>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003002:	e052      	b.n	80030aa <UART_SetConfig+0x2e6>
 8003004:	2302      	movs	r3, #2
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300a:	e04e      	b.n	80030aa <UART_SetConfig+0x2e6>
 800300c:	2304      	movs	r3, #4
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003012:	e04a      	b.n	80030aa <UART_SetConfig+0x2e6>
 8003014:	2308      	movs	r3, #8
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301a:	e046      	b.n	80030aa <UART_SetConfig+0x2e6>
 800301c:	2310      	movs	r3, #16
 800301e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003022:	e042      	b.n	80030aa <UART_SetConfig+0x2e6>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a17      	ldr	r2, [pc, #92]	; (8003088 <UART_SetConfig+0x2c4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d13a      	bne.n	80030a4 <UART_SetConfig+0x2e0>
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <UART_SetConfig+0x2cc>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003038:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800303c:	d01a      	beq.n	8003074 <UART_SetConfig+0x2b0>
 800303e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003042:	d81b      	bhi.n	800307c <UART_SetConfig+0x2b8>
 8003044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003048:	d00c      	beq.n	8003064 <UART_SetConfig+0x2a0>
 800304a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304e:	d815      	bhi.n	800307c <UART_SetConfig+0x2b8>
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <UART_SetConfig+0x298>
 8003054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003058:	d008      	beq.n	800306c <UART_SetConfig+0x2a8>
 800305a:	e00f      	b.n	800307c <UART_SetConfig+0x2b8>
 800305c:	2300      	movs	r3, #0
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003062:	e022      	b.n	80030aa <UART_SetConfig+0x2e6>
 8003064:	2302      	movs	r3, #2
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306a:	e01e      	b.n	80030aa <UART_SetConfig+0x2e6>
 800306c:	2304      	movs	r3, #4
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e01a      	b.n	80030aa <UART_SetConfig+0x2e6>
 8003074:	2308      	movs	r3, #8
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307a:	e016      	b.n	80030aa <UART_SetConfig+0x2e6>
 800307c:	2310      	movs	r3, #16
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003082:	e012      	b.n	80030aa <UART_SetConfig+0x2e6>
 8003084:	efff69f3 	.word	0xefff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	2310      	movs	r3, #16
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a9f      	ldr	r2, [pc, #636]	; (800332c <UART_SetConfig+0x568>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d17a      	bne.n	80031aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d824      	bhi.n	8003106 <UART_SetConfig+0x342>
 80030bc:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <UART_SetConfig+0x300>)
 80030be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c2:	bf00      	nop
 80030c4:	080030e9 	.word	0x080030e9
 80030c8:	08003107 	.word	0x08003107
 80030cc:	080030f1 	.word	0x080030f1
 80030d0:	08003107 	.word	0x08003107
 80030d4:	080030f7 	.word	0x080030f7
 80030d8:	08003107 	.word	0x08003107
 80030dc:	08003107 	.word	0x08003107
 80030e0:	08003107 	.word	0x08003107
 80030e4:	080030ff 	.word	0x080030ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e8:	f7fe fd40 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 80030ec:	61f8      	str	r0, [r7, #28]
        break;
 80030ee:	e010      	b.n	8003112 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030f0:	4b8f      	ldr	r3, [pc, #572]	; (8003330 <UART_SetConfig+0x56c>)
 80030f2:	61fb      	str	r3, [r7, #28]
        break;
 80030f4:	e00d      	b.n	8003112 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030f6:	f7fe fca1 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80030fa:	61f8      	str	r0, [r7, #28]
        break;
 80030fc:	e009      	b.n	8003112 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003102:	61fb      	str	r3, [r7, #28]
        break;
 8003104:	e005      	b.n	8003112 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003110:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80fb 	beq.w	8003310 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	429a      	cmp	r2, r3
 8003128:	d305      	bcc.n	8003136 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	429a      	cmp	r2, r3
 8003134:	d903      	bls.n	800313e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800313c:	e0e8      	b.n	8003310 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2200      	movs	r2, #0
 8003142:	461c      	mov	r4, r3
 8003144:	4615      	mov	r5, r2
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	022b      	lsls	r3, r5, #8
 8003150:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003154:	0222      	lsls	r2, r4, #8
 8003156:	68f9      	ldr	r1, [r7, #12]
 8003158:	6849      	ldr	r1, [r1, #4]
 800315a:	0849      	lsrs	r1, r1, #1
 800315c:	2000      	movs	r0, #0
 800315e:	4688      	mov	r8, r1
 8003160:	4681      	mov	r9, r0
 8003162:	eb12 0a08 	adds.w	sl, r2, r8
 8003166:	eb43 0b09 	adc.w	fp, r3, r9
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003178:	4650      	mov	r0, sl
 800317a:	4659      	mov	r1, fp
 800317c:	f7fd f824 	bl	80001c8 <__aeabi_uldivmod>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4613      	mov	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800318e:	d308      	bcc.n	80031a2 <UART_SetConfig+0x3de>
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003196:	d204      	bcs.n	80031a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	60da      	str	r2, [r3, #12]
 80031a0:	e0b6      	b.n	8003310 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031a8:	e0b2      	b.n	8003310 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b2:	d15e      	bne.n	8003272 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80031b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d828      	bhi.n	800320e <UART_SetConfig+0x44a>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <UART_SetConfig+0x400>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031e9 	.word	0x080031e9
 80031c8:	080031f1 	.word	0x080031f1
 80031cc:	080031f9 	.word	0x080031f9
 80031d0:	0800320f 	.word	0x0800320f
 80031d4:	080031ff 	.word	0x080031ff
 80031d8:	0800320f 	.word	0x0800320f
 80031dc:	0800320f 	.word	0x0800320f
 80031e0:	0800320f 	.word	0x0800320f
 80031e4:	08003207 	.word	0x08003207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e8:	f7fe fcc0 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 80031ec:	61f8      	str	r0, [r7, #28]
        break;
 80031ee:	e014      	b.n	800321a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031f0:	f7fe fcd2 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 80031f4:	61f8      	str	r0, [r7, #28]
        break;
 80031f6:	e010      	b.n	800321a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f8:	4b4d      	ldr	r3, [pc, #308]	; (8003330 <UART_SetConfig+0x56c>)
 80031fa:	61fb      	str	r3, [r7, #28]
        break;
 80031fc:	e00d      	b.n	800321a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031fe:	f7fe fc1d 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 8003202:	61f8      	str	r0, [r7, #28]
        break;
 8003204:	e009      	b.n	800321a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320a:	61fb      	str	r3, [r7, #28]
        break;
 800320c:	e005      	b.n	800321a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003218:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d077      	beq.n	8003310 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	005a      	lsls	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	441a      	add	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b0f      	cmp	r3, #15
 800323a:	d916      	bls.n	800326a <UART_SetConfig+0x4a6>
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003242:	d212      	bcs.n	800326a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	b29b      	uxth	r3, r3
 8003248:	f023 030f 	bic.w	r3, r3, #15
 800324c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	b29b      	uxth	r3, r3
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	b29a      	uxth	r2, r3
 800325a:	8afb      	ldrh	r3, [r7, #22]
 800325c:	4313      	orrs	r3, r2
 800325e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	8afa      	ldrh	r2, [r7, #22]
 8003266:	60da      	str	r2, [r3, #12]
 8003268:	e052      	b.n	8003310 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003270:	e04e      	b.n	8003310 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003272:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003276:	2b08      	cmp	r3, #8
 8003278:	d827      	bhi.n	80032ca <UART_SetConfig+0x506>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <UART_SetConfig+0x4bc>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	080032a5 	.word	0x080032a5
 8003284:	080032ad 	.word	0x080032ad
 8003288:	080032b5 	.word	0x080032b5
 800328c:	080032cb 	.word	0x080032cb
 8003290:	080032bb 	.word	0x080032bb
 8003294:	080032cb 	.word	0x080032cb
 8003298:	080032cb 	.word	0x080032cb
 800329c:	080032cb 	.word	0x080032cb
 80032a0:	080032c3 	.word	0x080032c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a4:	f7fe fc62 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 80032a8:	61f8      	str	r0, [r7, #28]
        break;
 80032aa:	e014      	b.n	80032d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032ac:	f7fe fc74 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 80032b0:	61f8      	str	r0, [r7, #28]
        break;
 80032b2:	e010      	b.n	80032d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b4:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <UART_SetConfig+0x56c>)
 80032b6:	61fb      	str	r3, [r7, #28]
        break;
 80032b8:	e00d      	b.n	80032d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ba:	f7fe fbbf 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80032be:	61f8      	str	r0, [r7, #28]
        break;
 80032c0:	e009      	b.n	80032d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c6:	61fb      	str	r3, [r7, #28]
        break;
 80032c8:	e005      	b.n	80032d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032d4:	bf00      	nop
    }

    if (pclk != 0U)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d019      	beq.n	8003310 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	085a      	lsrs	r2, r3, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	441a      	add	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	d909      	bls.n	800330a <UART_SetConfig+0x546>
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fc:	d205      	bcs.n	800330a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60da      	str	r2, [r3, #12]
 8003308:	e002      	b.n	8003310 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800331c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003320:	4618      	mov	r0, r3
 8003322:	3728      	adds	r7, #40	; 0x28
 8003324:	46bd      	mov	sp, r7
 8003326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800332a:	bf00      	nop
 800332c:	40008000 	.word	0x40008000
 8003330:	00f42400 	.word	0x00f42400

08003334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01a      	beq.n	800344a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003432:	d10a      	bne.n	800344a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
  }
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af02      	add	r7, sp, #8
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003488:	f7fd fa2e 	bl	80008e8 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b08      	cmp	r3, #8
 800349a:	d10e      	bne.n	80034ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800349c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f82d 	bl	800350a <UART_WaitOnFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e023      	b.n	8003502 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d10e      	bne.n	80034e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f817 	bl	800350a <UART_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e00d      	b.n	8003502 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b09c      	sub	sp, #112	; 0x70
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	4613      	mov	r3, r2
 8003518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351a:	e0a5      	b.n	8003668 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	f000 80a1 	beq.w	8003668 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fd f9df 	bl	80008e8 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <UART_WaitOnFlagUntilTimeout+0x32>
 8003536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003538:	2b00      	cmp	r3, #0
 800353a:	d13e      	bne.n	80035ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800354a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800354c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003550:	667b      	str	r3, [r7, #100]	; 0x64
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800355a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800355c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003560:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e6      	bne.n	800353c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3308      	adds	r3, #8
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	663b      	str	r3, [r7, #96]	; 0x60
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3308      	adds	r3, #8
 800358c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800358e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003590:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800359c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e5      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e067      	b.n	800368a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d04f      	beq.n	8003668 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d6:	d147      	bne.n	8003668 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
 8003602:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003608:	e841 2300 	strex	r3, r2, [r1]
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e6      	bne.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3308      	adds	r3, #8
 800361a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	613b      	str	r3, [r7, #16]
   return(result);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	66bb      	str	r3, [r7, #104]	; 0x68
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3308      	adds	r3, #8
 8003632:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003634:	623a      	str	r2, [r7, #32]
 8003636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	69f9      	ldr	r1, [r7, #28]
 800363a:	6a3a      	ldr	r2, [r7, #32]
 800363c:	e841 2300 	strex	r3, r2, [r1]
 8003640:	61bb      	str	r3, [r7, #24]
   return(result);
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e5      	bne.n	8003614 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e010      	b.n	800368a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4013      	ands	r3, r2
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	429a      	cmp	r2, r3
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	429a      	cmp	r2, r3
 8003684:	f43f af4a 	beq.w	800351c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3770      	adds	r7, #112	; 0x70
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003692:	b480      	push	{r7}
 8003694:	b095      	sub	sp, #84	; 0x54
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b8:	643b      	str	r3, [r7, #64]	; 0x40
 80036ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e6      	bne.n	800369a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3308      	adds	r3, #8
 80036d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	61fb      	str	r3, [r7, #28]
   return(result);
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3308      	adds	r3, #8
 80036ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003704:	2b01      	cmp	r3, #1
 8003706:	d118      	bne.n	800373a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	60bb      	str	r3, [r7, #8]
   return(result);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f023 0310 	bic.w	r3, r3, #16
 800371c:	647b      	str	r3, [r7, #68]	; 0x44
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003726:	61bb      	str	r3, [r7, #24]
 8003728:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	6979      	ldr	r1, [r7, #20]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	613b      	str	r3, [r7, #16]
   return(result);
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e6      	bne.n	8003708 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800374c:	bf00      	nop
 800374e:	3754      	adds	r7, #84	; 0x54
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff fb0e 	bl	8002d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	60bb      	str	r3, [r7, #8]
   return(result);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	6979      	ldr	r1, [r7, #20]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	613b      	str	r3, [r7, #16]
   return(result);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e6      	bne.n	800378c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff fada 	bl	8002d84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d0:	bf00      	nop
 80037d2:	3720      	adds	r7, #32
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <memset>:
 80037ec:	4402      	add	r2, r0
 80037ee:	4603      	mov	r3, r0
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d100      	bne.n	80037f6 <memset+0xa>
 80037f4:	4770      	bx	lr
 80037f6:	f803 1b01 	strb.w	r1, [r3], #1
 80037fa:	e7f9      	b.n	80037f0 <memset+0x4>

080037fc <__libc_init_array>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	4d0d      	ldr	r5, [pc, #52]	; (8003834 <__libc_init_array+0x38>)
 8003800:	4c0d      	ldr	r4, [pc, #52]	; (8003838 <__libc_init_array+0x3c>)
 8003802:	1b64      	subs	r4, r4, r5
 8003804:	10a4      	asrs	r4, r4, #2
 8003806:	2600      	movs	r6, #0
 8003808:	42a6      	cmp	r6, r4
 800380a:	d109      	bne.n	8003820 <__libc_init_array+0x24>
 800380c:	4d0b      	ldr	r5, [pc, #44]	; (800383c <__libc_init_array+0x40>)
 800380e:	4c0c      	ldr	r4, [pc, #48]	; (8003840 <__libc_init_array+0x44>)
 8003810:	f000 f818 	bl	8003844 <_init>
 8003814:	1b64      	subs	r4, r4, r5
 8003816:	10a4      	asrs	r4, r4, #2
 8003818:	2600      	movs	r6, #0
 800381a:	42a6      	cmp	r6, r4
 800381c:	d105      	bne.n	800382a <__libc_init_array+0x2e>
 800381e:	bd70      	pop	{r4, r5, r6, pc}
 8003820:	f855 3b04 	ldr.w	r3, [r5], #4
 8003824:	4798      	blx	r3
 8003826:	3601      	adds	r6, #1
 8003828:	e7ee      	b.n	8003808 <__libc_init_array+0xc>
 800382a:	f855 3b04 	ldr.w	r3, [r5], #4
 800382e:	4798      	blx	r3
 8003830:	3601      	adds	r6, #1
 8003832:	e7f2      	b.n	800381a <__libc_init_array+0x1e>
 8003834:	080038ac 	.word	0x080038ac
 8003838:	080038ac 	.word	0x080038ac
 800383c:	080038ac 	.word	0x080038ac
 8003840:	080038b0 	.word	0x080038b0

08003844 <_init>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	bf00      	nop
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr

08003850 <_fini>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	bf00      	nop
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr
