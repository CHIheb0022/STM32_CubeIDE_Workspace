
13_I2C Polling Mode_Master[STM32G0].elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080020a8  080020a8  000120a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020f0  080020f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080020f0  080020f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020f0  080020f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020f0  080020f0  000120f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020f4  080020f4  000120f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080020f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002104  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002104  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b27  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a66  00000000  00000000  00027b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  00029608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000063c  00000000  00000000  00029e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014ce4  00000000  00000000  0002a48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b753  00000000  00000000  0003f170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081b91  00000000  00000000  0004a8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001bd8  00000000  00000000  000cc454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000ce02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002090 	.word	0x08002090

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002090 	.word	0x08002090

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <MX_GPIO_Init+0x28>)
 8000224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000226:	4b07      	ldr	r3, [pc, #28]	; (8000244 <MX_GPIO_Init+0x28>)
 8000228:	2102      	movs	r1, #2
 800022a:	430a      	orrs	r2, r1
 800022c:	635a      	str	r2, [r3, #52]	; 0x34
 800022e:	4b05      	ldr	r3, [pc, #20]	; (8000244 <MX_GPIO_Init+0x28>)
 8000230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000232:	2202      	movs	r2, #2
 8000234:	4013      	ands	r3, r2
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]

}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	b002      	add	sp, #8
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40021000 	.word	0x40021000

08000248 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800024c:	4b1b      	ldr	r3, [pc, #108]	; (80002bc <MX_I2C1_Init+0x74>)
 800024e:	4a1c      	ldr	r2, [pc, #112]	; (80002c0 <MX_I2C1_Init+0x78>)
 8000250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000252:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <MX_I2C1_Init+0x74>)
 8000254:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <MX_I2C1_Init+0x7c>)
 8000256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000258:	4b18      	ldr	r3, [pc, #96]	; (80002bc <MX_I2C1_Init+0x74>)
 800025a:	2200      	movs	r2, #0
 800025c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800025e:	4b17      	ldr	r3, [pc, #92]	; (80002bc <MX_I2C1_Init+0x74>)
 8000260:	2201      	movs	r2, #1
 8000262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000264:	4b15      	ldr	r3, [pc, #84]	; (80002bc <MX_I2C1_Init+0x74>)
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800026a:	4b14      	ldr	r3, [pc, #80]	; (80002bc <MX_I2C1_Init+0x74>)
 800026c:	2200      	movs	r2, #0
 800026e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <MX_I2C1_Init+0x74>)
 8000272:	2200      	movs	r2, #0
 8000274:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000276:	4b11      	ldr	r3, [pc, #68]	; (80002bc <MX_I2C1_Init+0x74>)
 8000278:	2200      	movs	r2, #0
 800027a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800027c:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <MX_I2C1_Init+0x74>)
 800027e:	2200      	movs	r2, #0
 8000280:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <MX_I2C1_Init+0x74>)
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fc2d 	bl	8000ae4 <HAL_I2C_Init>
 800028a:	1e03      	subs	r3, r0, #0
 800028c:	d001      	beq.n	8000292 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800028e:	f000 f8f7 	bl	8000480 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <MX_I2C1_Init+0x74>)
 8000294:	2100      	movs	r1, #0
 8000296:	0018      	movs	r0, r3
 8000298:	f000 ffd8 	bl	800124c <HAL_I2CEx_ConfigAnalogFilter>
 800029c:	1e03      	subs	r3, r0, #0
 800029e:	d001      	beq.n	80002a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002a0:	f000 f8ee 	bl	8000480 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <MX_I2C1_Init+0x74>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	0018      	movs	r0, r3
 80002aa:	f001 f81b 	bl	80012e4 <HAL_I2CEx_ConfigDigitalFilter>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d001      	beq.n	80002b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80002b2:	f000 f8e5 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000028 	.word	0x20000028
 80002c0:	40005400 	.word	0x40005400
 80002c4:	00303d5b 	.word	0x00303d5b

080002c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b095      	sub	sp, #84	; 0x54
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d0:	233c      	movs	r3, #60	; 0x3c
 80002d2:	18fb      	adds	r3, r7, r3
 80002d4:	0018      	movs	r0, r3
 80002d6:	2314      	movs	r3, #20
 80002d8:	001a      	movs	r2, r3
 80002da:	2100      	movs	r1, #0
 80002dc:	f001 feac 	bl	8002038 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	2414      	movs	r4, #20
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	0018      	movs	r0, r3
 80002e6:	2328      	movs	r3, #40	; 0x28
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f001 fea4 	bl	8002038 <memset>
  if(i2cHandle->Instance==I2C1)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a22      	ldr	r2, [pc, #136]	; (8000380 <HAL_I2C_MspInit+0xb8>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d13d      	bne.n	8000376 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2220      	movs	r2, #32
 80002fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000300:	193b      	adds	r3, r7, r4
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000306:	193b      	adds	r3, r7, r4
 8000308:	0018      	movs	r0, r3
 800030a:	f001 fd1b 	bl	8001d44 <HAL_RCCEx_PeriphCLKConfig>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000312:	f000 f8b5 	bl	8000480 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000316:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <HAL_I2C_MspInit+0xbc>)
 8000318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <HAL_I2C_MspInit+0xbc>)
 800031c:	2102      	movs	r1, #2
 800031e:	430a      	orrs	r2, r1
 8000320:	635a      	str	r2, [r3, #52]	; 0x34
 8000322:	4b18      	ldr	r3, [pc, #96]	; (8000384 <HAL_I2C_MspInit+0xbc>)
 8000324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000326:	2202      	movs	r2, #2
 8000328:	4013      	ands	r3, r2
 800032a:	613b      	str	r3, [r7, #16]
 800032c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800032e:	213c      	movs	r1, #60	; 0x3c
 8000330:	187b      	adds	r3, r7, r1
 8000332:	22c0      	movs	r2, #192	; 0xc0
 8000334:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2212      	movs	r2, #18
 800033a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2206      	movs	r2, #6
 800034c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034e:	187b      	adds	r3, r7, r1
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <HAL_I2C_MspInit+0xc0>)
 8000352:	0019      	movs	r1, r3
 8000354:	0010      	movs	r0, r2
 8000356:	f000 fa61 	bl	800081c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <HAL_I2C_MspInit+0xbc>)
 800035c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <HAL_I2C_MspInit+0xbc>)
 8000360:	2180      	movs	r1, #128	; 0x80
 8000362:	0389      	lsls	r1, r1, #14
 8000364:	430a      	orrs	r2, r1
 8000366:	63da      	str	r2, [r3, #60]	; 0x3c
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <HAL_I2C_MspInit+0xbc>)
 800036a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800036c:	2380      	movs	r3, #128	; 0x80
 800036e:	039b      	lsls	r3, r3, #14
 8000370:	4013      	ands	r3, r2
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	b015      	add	sp, #84	; 0x54
 800037c:	bd90      	pop	{r4, r7, pc}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	40005400 	.word	0x40005400
 8000384:	40021000 	.word	0x40021000
 8000388:	50000400 	.word	0x50000400

0800038c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000392:	f000 f8e5 	bl	8000560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000396:	f000 f82b 	bl	80003f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039a:	f7ff ff3f 	bl	800021c <MX_GPIO_Init>
  MX_I2C1_Init();
 800039e:	f7ff ff53 	bl	8000248 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t slaveADDR = 0x12<<1;
 80003a2:	1dbb      	adds	r3, r7, #6
 80003a4:	2224      	movs	r2, #36	; 0x24
 80003a6:	801a      	strh	r2, [r3, #0]
  uint8_t TxData[6] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6};
 80003a8:	003b      	movs	r3, r7
 80003aa:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <main+0x5c>)
 80003ac:	6811      	ldr	r1, [r2, #0]
 80003ae:	6019      	str	r1, [r3, #0]
 80003b0:	8892      	ldrh	r2, [r2, #4]
 80003b2:	809a      	strh	r2, [r3, #4]
  HAL_I2C_Master_Transmit(&hi2c1, slaveADDR, TxData, 6, 1000);
 80003b4:	003a      	movs	r2, r7
 80003b6:	1dbb      	adds	r3, r7, #6
 80003b8:	8819      	ldrh	r1, [r3, #0]
 80003ba:	480c      	ldr	r0, [pc, #48]	; (80003ec <main+0x60>)
 80003bc:	23fa      	movs	r3, #250	; 0xfa
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	2306      	movs	r3, #6
 80003c4:	f000 fc24 	bl	8000c10 <HAL_I2C_Master_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_I2C_Master_Transmit(&hi2c1, slaveADDR, TxData, 6, 1000);
 80003c8:	003a      	movs	r2, r7
 80003ca:	1dbb      	adds	r3, r7, #6
 80003cc:	8819      	ldrh	r1, [r3, #0]
 80003ce:	4807      	ldr	r0, [pc, #28]	; (80003ec <main+0x60>)
 80003d0:	23fa      	movs	r3, #250	; 0xfa
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	2306      	movs	r3, #6
 80003d8:	f000 fc1a 	bl	8000c10 <HAL_I2C_Master_Transmit>
	 HAL_Delay (1000);
 80003dc:	23fa      	movs	r3, #250	; 0xfa
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	0018      	movs	r0, r3
 80003e2:	f000 f943 	bl	800066c <HAL_Delay>
	 HAL_I2C_Master_Transmit(&hi2c1, slaveADDR, TxData, 6, 1000);
 80003e6:	e7ef      	b.n	80003c8 <main+0x3c>
 80003e8:	080020a8 	.word	0x080020a8
 80003ec:	20000028 	.word	0x20000028

080003f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b093      	sub	sp, #76	; 0x4c
 80003f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f6:	2410      	movs	r4, #16
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	0018      	movs	r0, r3
 80003fc:	2338      	movs	r3, #56	; 0x38
 80003fe:	001a      	movs	r2, r3
 8000400:	2100      	movs	r1, #0
 8000402:	f001 fe19 	bl	8002038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000406:	003b      	movs	r3, r7
 8000408:	0018      	movs	r0, r3
 800040a:	2310      	movs	r3, #16
 800040c:	001a      	movs	r2, r3
 800040e:	2100      	movs	r1, #0
 8000410:	f001 fe12 	bl	8002038 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000414:	2380      	movs	r3, #128	; 0x80
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	0018      	movs	r0, r3
 800041a:	f000 ffaf 	bl	800137c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041e:	193b      	adds	r3, r7, r4
 8000420:	2202      	movs	r2, #2
 8000422:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000424:	193b      	adds	r3, r7, r4
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	0052      	lsls	r2, r2, #1
 800042a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800042c:	193b      	adds	r3, r7, r4
 800042e:	2200      	movs	r2, #0
 8000430:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000432:	193b      	adds	r3, r7, r4
 8000434:	2240      	movs	r2, #64	; 0x40
 8000436:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000438:	193b      	adds	r3, r7, r4
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043e:	193b      	adds	r3, r7, r4
 8000440:	0018      	movs	r0, r3
 8000442:	f000 ffdb 	bl	80013fc <HAL_RCC_OscConfig>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800044a:	f000 f819 	bl	8000480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044e:	003b      	movs	r3, r7
 8000450:	2207      	movs	r2, #7
 8000452:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000454:	003b      	movs	r3, r7
 8000456:	2200      	movs	r2, #0
 8000458:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045a:	003b      	movs	r3, r7
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000460:	003b      	movs	r3, r7
 8000462:	2200      	movs	r2, #0
 8000464:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000466:	003b      	movs	r3, r7
 8000468:	2100      	movs	r1, #0
 800046a:	0018      	movs	r0, r3
 800046c:	f001 fae0 	bl	8001a30 <HAL_RCC_ClockConfig>
 8000470:	1e03      	subs	r3, r0, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000474:	f000 f804 	bl	8000480 <Error_Handler>
  }
}
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	b013      	add	sp, #76	; 0x4c
 800047e:	bd90      	pop	{r4, r7, pc}

08000480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000484:	b672      	cpsid	i
}
 8000486:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000488:	e7fe      	b.n	8000488 <Error_Handler+0x8>
	...

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <HAL_MspInit+0x44>)
 8000494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <HAL_MspInit+0x44>)
 8000498:	2101      	movs	r1, #1
 800049a:	430a      	orrs	r2, r1
 800049c:	641a      	str	r2, [r3, #64]	; 0x40
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <HAL_MspInit+0x44>)
 80004a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a2:	2201      	movs	r2, #1
 80004a4:	4013      	ands	r3, r2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <HAL_MspInit+0x44>)
 80004ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <HAL_MspInit+0x44>)
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	0549      	lsls	r1, r1, #21
 80004b4:	430a      	orrs	r2, r1
 80004b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <HAL_MspInit+0x44>)
 80004ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	055b      	lsls	r3, r3, #21
 80004c0:	4013      	ands	r3, r2
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b002      	add	sp, #8
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	40021000 	.word	0x40021000

080004d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <NMI_Handler+0x4>

080004da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004de:	e7fe      	b.n	80004de <HardFault_Handler+0x4>

080004e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004e4:	46c0      	nop			; (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f8:	f000 f89c 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800050c:	480d      	ldr	r0, [pc, #52]	; (8000544 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000510:	f7ff fff7 	bl	8000502 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480c      	ldr	r0, [pc, #48]	; (8000548 <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490d      	ldr	r1, [pc, #52]	; (800054c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0a      	ldr	r4, [pc, #40]	; (8000558 <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800053a:	f001 fd85 	bl	8002048 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800053e:	f7ff ff25 	bl	800038c <main>

08000542 <LoopForever>:

LoopForever:
  b LoopForever
 8000542:	e7fe      	b.n	8000542 <LoopForever>
  ldr   r0, =_estack
 8000544:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800054c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000550:	080020f8 	.word	0x080020f8
  ldr r2, =_sbss
 8000554:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000558:	20000080 	.word	0x20000080

0800055c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC1_IRQHandler>
	...

08000560 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <HAL_Init+0x3c>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <HAL_Init+0x3c>)
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	0049      	lsls	r1, r1, #1
 8000576:	430a      	orrs	r2, r1
 8000578:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800057a:	2003      	movs	r0, #3
 800057c:	f000 f810 	bl	80005a0 <HAL_InitTick>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d003      	beq.n	800058c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	e001      	b.n	8000590 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800058c:	f7ff ff7e 	bl	800048c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	781b      	ldrb	r3, [r3, #0]
}
 8000594:	0018      	movs	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	b002      	add	sp, #8
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40022000 	.word	0x40022000

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005a8:	230f      	movs	r3, #15
 80005aa:	18fb      	adds	r3, r7, r3
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <HAL_InitTick+0x88>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d02b      	beq.n	8000610 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <HAL_InitTick+0x8c>)
 80005ba:	681c      	ldr	r4, [r3, #0]
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <HAL_InitTick+0x88>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	0019      	movs	r1, r3
 80005c2:	23fa      	movs	r3, #250	; 0xfa
 80005c4:	0098      	lsls	r0, r3, #2
 80005c6:	f7ff fd9d 	bl	8000104 <__udivsi3>
 80005ca:	0003      	movs	r3, r0
 80005cc:	0019      	movs	r1, r3
 80005ce:	0020      	movs	r0, r4
 80005d0:	f7ff fd98 	bl	8000104 <__udivsi3>
 80005d4:	0003      	movs	r3, r0
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 f913 	bl	8000802 <HAL_SYSTICK_Config>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d112      	bne.n	8000606 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d80a      	bhi.n	80005fc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	2301      	movs	r3, #1
 80005ea:	425b      	negs	r3, r3
 80005ec:	2200      	movs	r2, #0
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 f8f2 	bl	80007d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_InitTick+0x90>)
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	e00d      	b.n	8000618 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80005fc:	230f      	movs	r3, #15
 80005fe:	18fb      	adds	r3, r7, r3
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
 8000604:	e008      	b.n	8000618 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000606:	230f      	movs	r3, #15
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	e003      	b.n	8000618 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000610:	230f      	movs	r3, #15
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000618:	230f      	movs	r3, #15
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	781b      	ldrb	r3, [r3, #0]
}
 800061e:	0018      	movs	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	b005      	add	sp, #20
 8000624:	bd90      	pop	{r4, r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	20000008 	.word	0x20000008
 800062c:	20000000 	.word	0x20000000
 8000630:	20000004 	.word	0x20000004

08000634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <HAL_IncTick+0x1c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	001a      	movs	r2, r3
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <HAL_IncTick+0x20>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	18d2      	adds	r2, r2, r3
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <HAL_IncTick+0x20>)
 8000646:	601a      	str	r2, [r3, #0]
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000008 	.word	0x20000008
 8000654:	2000007c 	.word	0x2000007c

08000658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  return uwTick;
 800065c:	4b02      	ldr	r3, [pc, #8]	; (8000668 <HAL_GetTick+0x10>)
 800065e:	681b      	ldr	r3, [r3, #0]
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	2000007c 	.word	0x2000007c

0800066c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000674:	f7ff fff0 	bl	8000658 <HAL_GetTick>
 8000678:	0003      	movs	r3, r0
 800067a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	d005      	beq.n	8000692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <HAL_Delay+0x44>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	001a      	movs	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	189b      	adds	r3, r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	f7ff ffe0 	bl	8000658 <HAL_GetTick>
 8000698:	0002      	movs	r2, r0
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d8f7      	bhi.n	8000694 <HAL_Delay+0x28>
  {
  }
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b004      	add	sp, #16
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	20000008 	.word	0x20000008

080006b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	0002      	movs	r2, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b7f      	cmp	r3, #127	; 0x7f
 80006c8:	d828      	bhi.n	800071c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ca:	4a2f      	ldr	r2, [pc, #188]	; (8000788 <__NVIC_SetPriority+0xd4>)
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	089b      	lsrs	r3, r3, #2
 80006d4:	33c0      	adds	r3, #192	; 0xc0
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	589b      	ldr	r3, [r3, r2]
 80006da:	1dfa      	adds	r2, r7, #7
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	0011      	movs	r1, r2
 80006e0:	2203      	movs	r2, #3
 80006e2:	400a      	ands	r2, r1
 80006e4:	00d2      	lsls	r2, r2, #3
 80006e6:	21ff      	movs	r1, #255	; 0xff
 80006e8:	4091      	lsls	r1, r2
 80006ea:	000a      	movs	r2, r1
 80006ec:	43d2      	mvns	r2, r2
 80006ee:	401a      	ands	r2, r3
 80006f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	019b      	lsls	r3, r3, #6
 80006f6:	22ff      	movs	r2, #255	; 0xff
 80006f8:	401a      	ands	r2, r3
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	0018      	movs	r0, r3
 8000700:	2303      	movs	r3, #3
 8000702:	4003      	ands	r3, r0
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000708:	481f      	ldr	r0, [pc, #124]	; (8000788 <__NVIC_SetPriority+0xd4>)
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b25b      	sxtb	r3, r3
 8000710:	089b      	lsrs	r3, r3, #2
 8000712:	430a      	orrs	r2, r1
 8000714:	33c0      	adds	r3, #192	; 0xc0
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800071a:	e031      	b.n	8000780 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800071c:	4a1b      	ldr	r2, [pc, #108]	; (800078c <__NVIC_SetPriority+0xd8>)
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	0019      	movs	r1, r3
 8000724:	230f      	movs	r3, #15
 8000726:	400b      	ands	r3, r1
 8000728:	3b08      	subs	r3, #8
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	3306      	adds	r3, #6
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	18d3      	adds	r3, r2, r3
 8000732:	3304      	adds	r3, #4
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1dfa      	adds	r2, r7, #7
 8000738:	7812      	ldrb	r2, [r2, #0]
 800073a:	0011      	movs	r1, r2
 800073c:	2203      	movs	r2, #3
 800073e:	400a      	ands	r2, r1
 8000740:	00d2      	lsls	r2, r2, #3
 8000742:	21ff      	movs	r1, #255	; 0xff
 8000744:	4091      	lsls	r1, r2
 8000746:	000a      	movs	r2, r1
 8000748:	43d2      	mvns	r2, r2
 800074a:	401a      	ands	r2, r3
 800074c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	019b      	lsls	r3, r3, #6
 8000752:	22ff      	movs	r2, #255	; 0xff
 8000754:	401a      	ands	r2, r3
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	0018      	movs	r0, r3
 800075c:	2303      	movs	r3, #3
 800075e:	4003      	ands	r3, r0
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <__NVIC_SetPriority+0xd8>)
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	001c      	movs	r4, r3
 800076c:	230f      	movs	r3, #15
 800076e:	4023      	ands	r3, r4
 8000770:	3b08      	subs	r3, #8
 8000772:	089b      	lsrs	r3, r3, #2
 8000774:	430a      	orrs	r2, r1
 8000776:	3306      	adds	r3, #6
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	18c3      	adds	r3, r0, r3
 800077c:	3304      	adds	r3, #4
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b003      	add	sp, #12
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	1e5a      	subs	r2, r3, #1
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	045b      	lsls	r3, r3, #17
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d301      	bcc.n	80007a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a4:	2301      	movs	r3, #1
 80007a6:	e010      	b.n	80007ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <SysTick_Config+0x44>)
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	3a01      	subs	r2, #1
 80007ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b0:	2301      	movs	r3, #1
 80007b2:	425b      	negs	r3, r3
 80007b4:	2103      	movs	r1, #3
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff ff7c 	bl	80006b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <SysTick_Config+0x44>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <SysTick_Config+0x44>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b002      	add	sp, #8
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	210f      	movs	r1, #15
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	1c02      	adds	r2, r0, #0
 80007e8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f7ff ff5d 	bl	80006b4 <__NVIC_SetPriority>
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b004      	add	sp, #16
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	0018      	movs	r0, r3
 800080e:	f7ff ffbf 	bl	8000790 <SysTick_Config>
 8000812:	0003      	movs	r3, r0
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082a:	e147      	b.n	8000abc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2101      	movs	r1, #1
 8000832:	697a      	ldr	r2, [r7, #20]
 8000834:	4091      	lsls	r1, r2
 8000836:	000a      	movs	r2, r1
 8000838:	4013      	ands	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d100      	bne.n	8000844 <HAL_GPIO_Init+0x28>
 8000842:	e138      	b.n	8000ab6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	2203      	movs	r2, #3
 800084a:	4013      	ands	r3, r2
 800084c:	2b01      	cmp	r3, #1
 800084e:	d005      	beq.n	800085c <HAL_GPIO_Init+0x40>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2203      	movs	r2, #3
 8000856:	4013      	ands	r3, r2
 8000858:	2b02      	cmp	r3, #2
 800085a:	d130      	bne.n	80008be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	2203      	movs	r2, #3
 8000868:	409a      	lsls	r2, r3
 800086a:	0013      	movs	r3, r2
 800086c:	43da      	mvns	r2, r3
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	4013      	ands	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	409a      	lsls	r2, r3
 800087e:	0013      	movs	r3, r2
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	4313      	orrs	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000892:	2201      	movs	r2, #1
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	409a      	lsls	r2, r3
 8000898:	0013      	movs	r3, r2
 800089a:	43da      	mvns	r2, r3
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	4013      	ands	r3, r2
 80008a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	091b      	lsrs	r3, r3, #4
 80008a8:	2201      	movs	r2, #1
 80008aa:	401a      	ands	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	409a      	lsls	r2, r3
 80008b0:	0013      	movs	r3, r2
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	2203      	movs	r2, #3
 80008c4:	4013      	ands	r3, r2
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d017      	beq.n	80008fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	2203      	movs	r2, #3
 80008d6:	409a      	lsls	r2, r3
 80008d8:	0013      	movs	r3, r2
 80008da:	43da      	mvns	r2, r3
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	4013      	ands	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	409a      	lsls	r2, r3
 80008ec:	0013      	movs	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2203      	movs	r2, #3
 8000900:	4013      	ands	r3, r2
 8000902:	2b02      	cmp	r3, #2
 8000904:	d123      	bne.n	800094e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	08da      	lsrs	r2, r3, #3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3208      	adds	r2, #8
 800090e:	0092      	lsls	r2, r2, #2
 8000910:	58d3      	ldr	r3, [r2, r3]
 8000912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	2207      	movs	r2, #7
 8000918:	4013      	ands	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	220f      	movs	r2, #15
 800091e:	409a      	lsls	r2, r3
 8000920:	0013      	movs	r3, r2
 8000922:	43da      	mvns	r2, r3
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	691a      	ldr	r2, [r3, #16]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	2107      	movs	r1, #7
 8000932:	400b      	ands	r3, r1
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	409a      	lsls	r2, r3
 8000938:	0013      	movs	r3, r2
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4313      	orrs	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	08da      	lsrs	r2, r3, #3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3208      	adds	r2, #8
 8000948:	0092      	lsls	r2, r2, #2
 800094a:	6939      	ldr	r1, [r7, #16]
 800094c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	2203      	movs	r2, #3
 800095a:	409a      	lsls	r2, r3
 800095c:	0013      	movs	r3, r2
 800095e:	43da      	mvns	r2, r3
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	4013      	ands	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	2203      	movs	r2, #3
 800096c:	401a      	ands	r2, r3
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	409a      	lsls	r2, r3
 8000974:	0013      	movs	r3, r2
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4313      	orrs	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	23c0      	movs	r3, #192	; 0xc0
 8000988:	029b      	lsls	r3, r3, #10
 800098a:	4013      	ands	r3, r2
 800098c:	d100      	bne.n	8000990 <HAL_GPIO_Init+0x174>
 800098e:	e092      	b.n	8000ab6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000990:	4a50      	ldr	r2, [pc, #320]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	089b      	lsrs	r3, r3, #2
 8000996:	3318      	adds	r3, #24
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	589b      	ldr	r3, [r3, r2]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	2203      	movs	r2, #3
 80009a2:	4013      	ands	r3, r2
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	220f      	movs	r2, #15
 80009a8:	409a      	lsls	r2, r3
 80009aa:	0013      	movs	r3, r2
 80009ac:	43da      	mvns	r2, r3
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d013      	beq.n	80009e6 <HAL_GPIO_Init+0x1ca>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a45      	ldr	r2, [pc, #276]	; (8000ad8 <HAL_GPIO_Init+0x2bc>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d00d      	beq.n	80009e2 <HAL_GPIO_Init+0x1c6>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a44      	ldr	r2, [pc, #272]	; (8000adc <HAL_GPIO_Init+0x2c0>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d007      	beq.n	80009de <HAL_GPIO_Init+0x1c2>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a43      	ldr	r2, [pc, #268]	; (8000ae0 <HAL_GPIO_Init+0x2c4>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_GPIO_Init+0x1be>
 80009d6:	2303      	movs	r3, #3
 80009d8:	e006      	b.n	80009e8 <HAL_GPIO_Init+0x1cc>
 80009da:	2305      	movs	r3, #5
 80009dc:	e004      	b.n	80009e8 <HAL_GPIO_Init+0x1cc>
 80009de:	2302      	movs	r3, #2
 80009e0:	e002      	b.n	80009e8 <HAL_GPIO_Init+0x1cc>
 80009e2:	2301      	movs	r3, #1
 80009e4:	e000      	b.n	80009e8 <HAL_GPIO_Init+0x1cc>
 80009e6:	2300      	movs	r3, #0
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	2103      	movs	r1, #3
 80009ec:	400a      	ands	r2, r1
 80009ee:	00d2      	lsls	r2, r2, #3
 80009f0:	4093      	lsls	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80009f8:	4936      	ldr	r1, [pc, #216]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	3318      	adds	r3, #24
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a06:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	035b      	lsls	r3, r3, #13
 8000a1e:	4013      	ands	r3, r2
 8000a20:	d003      	beq.n	8000a2a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	43da      	mvns	r2, r3
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	039b      	lsls	r3, r3, #14
 8000a48:	4013      	ands	r3, r2
 8000a4a:	d003      	beq.n	8000a54 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 8000a5c:	2384      	movs	r3, #132	; 0x84
 8000a5e:	58d3      	ldr	r3, [r2, r3]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	43da      	mvns	r2, r3
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	029b      	lsls	r3, r3, #10
 8000a74:	4013      	ands	r3, r2
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a80:	4914      	ldr	r1, [pc, #80]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 8000a82:	2284      	movs	r2, #132	; 0x84
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	58d3      	ldr	r3, [r2, r3]
 8000a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	43da      	mvns	r2, r3
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	025b      	lsls	r3, r3, #9
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aae:	4909      	ldr	r1, [pc, #36]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	40da      	lsrs	r2, r3
 8000ac4:	1e13      	subs	r3, r2, #0
 8000ac6:	d000      	beq.n	8000aca <HAL_GPIO_Init+0x2ae>
 8000ac8:	e6b0      	b.n	800082c <HAL_GPIO_Init+0x10>
  }
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b006      	add	sp, #24
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40021800 	.word	0x40021800
 8000ad8:	50000400 	.word	0x50000400
 8000adc:	50000800 	.word	0x50000800
 8000ae0:	50000c00 	.word	0x50000c00

08000ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e082      	b.n	8000bfc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2241      	movs	r2, #65	; 0x41
 8000afa:	5c9b      	ldrb	r3, [r3, r2]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d107      	bne.n	8000b12 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2240      	movs	r2, #64	; 0x40
 8000b06:	2100      	movs	r1, #0
 8000b08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff fbdb 	bl	80002c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2241      	movs	r2, #65	; 0x41
 8000b16:	2124      	movs	r1, #36	; 0x24
 8000b18:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2101      	movs	r1, #1
 8000b26:	438a      	bics	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4934      	ldr	r1, [pc, #208]	; (8000c04 <HAL_I2C_Init+0x120>)
 8000b34:	400a      	ands	r2, r1
 8000b36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4931      	ldr	r1, [pc, #196]	; (8000c08 <HAL_I2C_Init+0x124>)
 8000b44:	400a      	ands	r2, r1
 8000b46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d108      	bne.n	8000b62 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689a      	ldr	r2, [r3, #8]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	0209      	lsls	r1, r1, #8
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	e007      	b.n	8000b72 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2184      	movs	r1, #132	; 0x84
 8000b6c:	0209      	lsls	r1, r1, #8
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d104      	bne.n	8000b84 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	491f      	ldr	r1, [pc, #124]	; (8000c0c <HAL_I2C_Init+0x128>)
 8000b90:	430a      	orrs	r2, r1
 8000b92:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68da      	ldr	r2, [r3, #12]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	491a      	ldr	r1, [pc, #104]	; (8000c08 <HAL_I2C_Init+0x124>)
 8000ba0:	400a      	ands	r2, r1
 8000ba2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	691a      	ldr	r2, [r3, #16]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	431a      	orrs	r2, r3
 8000bae:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	69d9      	ldr	r1, [r3, #28]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a1a      	ldr	r2, [r3, #32]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2101      	movs	r1, #1
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2241      	movs	r2, #65	; 0x41
 8000be8:	2120      	movs	r1, #32
 8000bea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2242      	movs	r2, #66	; 0x42
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	f0ffffff 	.word	0xf0ffffff
 8000c08:	ffff7fff 	.word	0xffff7fff
 8000c0c:	02008000 	.word	0x02008000

08000c10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af02      	add	r7, sp, #8
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	0008      	movs	r0, r1
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	0019      	movs	r1, r3
 8000c1e:	230a      	movs	r3, #10
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	1c02      	adds	r2, r0, #0
 8000c24:	801a      	strh	r2, [r3, #0]
 8000c26:	2308      	movs	r3, #8
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	1c0a      	adds	r2, r1, #0
 8000c2c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2241      	movs	r2, #65	; 0x41
 8000c32:	5c9b      	ldrb	r3, [r3, r2]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b20      	cmp	r3, #32
 8000c38:	d000      	beq.n	8000c3c <HAL_I2C_Master_Transmit+0x2c>
 8000c3a:	e0e7      	b.n	8000e0c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2240      	movs	r2, #64	; 0x40
 8000c40:	5c9b      	ldrb	r3, [r3, r2]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d101      	bne.n	8000c4a <HAL_I2C_Master_Transmit+0x3a>
 8000c46:	2302      	movs	r3, #2
 8000c48:	e0e1      	b.n	8000e0e <HAL_I2C_Master_Transmit+0x1fe>
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2240      	movs	r2, #64	; 0x40
 8000c4e:	2101      	movs	r1, #1
 8000c50:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000c52:	f7ff fd01 	bl	8000658 <HAL_GetTick>
 8000c56:	0003      	movs	r3, r0
 8000c58:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	0219      	lsls	r1, r3, #8
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	2319      	movs	r3, #25
 8000c66:	2201      	movs	r2, #1
 8000c68:	f000 f8fc 	bl	8000e64 <I2C_WaitOnFlagUntilTimeout>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e0cc      	b.n	8000e0e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2241      	movs	r2, #65	; 0x41
 8000c78:	2121      	movs	r1, #33	; 0x21
 8000c7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2242      	movs	r2, #66	; 0x42
 8000c80:	2110      	movs	r1, #16
 8000c82:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2200      	movs	r2, #0
 8000c88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2208      	movs	r2, #8
 8000c94:	18ba      	adds	r2, r7, r2
 8000c96:	8812      	ldrh	r2, [r2, #0]
 8000c98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	2bff      	cmp	r3, #255	; 0xff
 8000ca8:	d911      	bls.n	8000cce <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	22ff      	movs	r2, #255	; 0xff
 8000cae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	045c      	lsls	r4, r3, #17
 8000cba:	230a      	movs	r3, #10
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	8819      	ldrh	r1, [r3, #0]
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	4b55      	ldr	r3, [pc, #340]	; (8000e18 <HAL_I2C_Master_Transmit+0x208>)
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	0023      	movs	r3, r4
 8000cc8:	f000 fa86 	bl	80011d8 <I2C_TransferConfig>
 8000ccc:	e075      	b.n	8000dba <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	049c      	lsls	r4, r3, #18
 8000ce2:	230a      	movs	r3, #10
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	8819      	ldrh	r1, [r3, #0]
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	4b4b      	ldr	r3, [pc, #300]	; (8000e18 <HAL_I2C_Master_Transmit+0x208>)
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	0023      	movs	r3, r4
 8000cf0:	f000 fa72 	bl	80011d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000cf4:	e061      	b.n	8000dba <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f000 f8f0 	bl	8000ee2 <I2C_WaitOnTXISFlagUntilTimeout>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e081      	b.n	8000e0e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	3b01      	subs	r3, #1
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d32:	3b01      	subs	r3, #1
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d03a      	beq.n	8000dba <HAL_I2C_Master_Transmit+0x1aa>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d136      	bne.n	8000dba <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	0013      	movs	r3, r2
 8000d56:	2200      	movs	r2, #0
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	f000 f883 	bl	8000e64 <I2C_WaitOnFlagUntilTimeout>
 8000d5e:	1e03      	subs	r3, r0, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e053      	b.n	8000e0e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	2bff      	cmp	r3, #255	; 0xff
 8000d6e:	d911      	bls.n	8000d94 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	22ff      	movs	r2, #255	; 0xff
 8000d74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	045c      	lsls	r4, r3, #17
 8000d80:	230a      	movs	r3, #10
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	8819      	ldrh	r1, [r3, #0]
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	0023      	movs	r3, r4
 8000d8e:	f000 fa23 	bl	80011d8 <I2C_TransferConfig>
 8000d92:	e012      	b.n	8000dba <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	049c      	lsls	r4, r3, #18
 8000da8:	230a      	movs	r3, #10
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	8819      	ldrh	r1, [r3, #0]
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	2300      	movs	r3, #0
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	0023      	movs	r3, r4
 8000db6:	f000 fa0f 	bl	80011d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d198      	bne.n	8000cf6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 f8c8 	bl	8000f60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e01a      	b.n	8000e0e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2220      	movs	r2, #32
 8000dde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	490c      	ldr	r1, [pc, #48]	; (8000e1c <HAL_I2C_Master_Transmit+0x20c>)
 8000dec:	400a      	ands	r2, r1
 8000dee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2241      	movs	r2, #65	; 0x41
 8000df4:	2120      	movs	r1, #32
 8000df6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2242      	movs	r2, #66	; 0x42
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2240      	movs	r2, #64	; 0x40
 8000e04:	2100      	movs	r1, #0
 8000e06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e000      	b.n	8000e0e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8000e0c:	2302      	movs	r3, #2
  }
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b007      	add	sp, #28
 8000e14:	bd90      	pop	{r4, r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	80002000 	.word	0x80002000
 8000e1c:	fe00e800 	.word	0xfe00e800

08000e20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d103      	bne.n	8000e3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	2201      	movs	r2, #1
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d007      	beq.n	8000e5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	699a      	ldr	r2, [r3, #24]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2101      	movs	r1, #1
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	619a      	str	r2, [r3, #24]
  }
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e74:	e021      	b.n	8000eba <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	d01e      	beq.n	8000eba <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e7c:	f7ff fbec 	bl	8000658 <HAL_GetTick>
 8000e80:	0002      	movs	r2, r0
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d302      	bcc.n	8000e92 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d113      	bne.n	8000eba <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	2220      	movs	r2, #32
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2241      	movs	r2, #65	; 0x41
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2242      	movs	r2, #66	; 0x42
 8000eaa:	2100      	movs	r1, #0
 8000eac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2240      	movs	r2, #64	; 0x40
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	425a      	negs	r2, r3
 8000eca:	4153      	adcs	r3, r2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	001a      	movs	r2, r3
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d0ce      	beq.n	8000e76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b004      	add	sp, #16
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000eee:	e02b      	b.n	8000f48 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 f86e 	bl	8000fd8 <I2C_IsErrorOccurred>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e029      	b.n	8000f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	3301      	adds	r3, #1
 8000f08:	d01e      	beq.n	8000f48 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f0a:	f7ff fba5 	bl	8000658 <HAL_GetTick>
 8000f0e:	0002      	movs	r2, r0
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d302      	bcc.n	8000f20 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d113      	bne.n	8000f48 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f24:	2220      	movs	r2, #32
 8000f26:	431a      	orrs	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2241      	movs	r2, #65	; 0x41
 8000f30:	2120      	movs	r1, #32
 8000f32:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2242      	movs	r2, #66	; 0x42
 8000f38:	2100      	movs	r1, #0
 8000f3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2240      	movs	r2, #64	; 0x40
 8000f40:	2100      	movs	r1, #0
 8000f42:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e007      	b.n	8000f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d1cc      	bne.n	8000ef0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b004      	add	sp, #16
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f6c:	e028      	b.n	8000fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	0018      	movs	r0, r3
 8000f76:	f000 f82f 	bl	8000fd8 <I2C_IsErrorOccurred>
 8000f7a:	1e03      	subs	r3, r0, #0
 8000f7c:	d001      	beq.n	8000f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e026      	b.n	8000fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f82:	f7ff fb69 	bl	8000658 <HAL_GetTick>
 8000f86:	0002      	movs	r2, r0
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d302      	bcc.n	8000f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d113      	bne.n	8000fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2241      	movs	r2, #65	; 0x41
 8000fa8:	2120      	movs	r1, #32
 8000faa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2242      	movs	r2, #66	; 0x42
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2240      	movs	r2, #64	; 0x40
 8000fb8:	2100      	movs	r1, #0
 8000fba:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e007      	b.n	8000fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	4013      	ands	r3, r2
 8000fca:	2b20      	cmp	r3, #32
 8000fcc:	d1cf      	bne.n	8000f6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b004      	add	sp, #16
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b08b      	sub	sp, #44	; 0x2c
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe4:	2327      	movs	r3, #39	; 0x27
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	2210      	movs	r2, #16
 8001000:	4013      	ands	r3, r2
 8001002:	d100      	bne.n	8001006 <I2C_IsErrorOccurred+0x2e>
 8001004:	e082      	b.n	800110c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2210      	movs	r2, #16
 800100c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800100e:	e060      	b.n	80010d2 <I2C_IsErrorOccurred+0xfa>
 8001010:	2427      	movs	r4, #39	; 0x27
 8001012:	193b      	adds	r3, r7, r4
 8001014:	193a      	adds	r2, r7, r4
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	3301      	adds	r3, #1
 800101e:	d058      	beq.n	80010d2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001020:	f7ff fb1a 	bl	8000658 <HAL_GetTick>
 8001024:	0002      	movs	r2, r0
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d306      	bcc.n	800103e <I2C_IsErrorOccurred+0x66>
 8001030:	193b      	adds	r3, r7, r4
 8001032:	193a      	adds	r2, r7, r4
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d149      	bne.n	80010d2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	01db      	lsls	r3, r3, #7
 8001048:	4013      	ands	r3, r2
 800104a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800104c:	2013      	movs	r0, #19
 800104e:	183b      	adds	r3, r7, r0
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	2142      	movs	r1, #66	; 0x42
 8001054:	5c52      	ldrb	r2, [r2, r1]
 8001056:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699a      	ldr	r2, [r3, #24]
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	401a      	ands	r2, r3
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	429a      	cmp	r2, r3
 800106a:	d126      	bne.n	80010ba <I2C_IsErrorOccurred+0xe2>
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	01db      	lsls	r3, r3, #7
 8001072:	429a      	cmp	r2, r3
 8001074:	d021      	beq.n	80010ba <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001076:	183b      	adds	r3, r7, r0
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b20      	cmp	r3, #32
 800107c:	d01d      	beq.n	80010ba <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	01c9      	lsls	r1, r1, #7
 800108c:	430a      	orrs	r2, r1
 800108e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001090:	f7ff fae2 	bl	8000658 <HAL_GetTick>
 8001094:	0003      	movs	r3, r0
 8001096:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001098:	e00f      	b.n	80010ba <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800109a:	f7ff fadd 	bl	8000658 <HAL_GetTick>
 800109e:	0002      	movs	r2, r0
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b19      	cmp	r3, #25
 80010a6:	d908      	bls.n	80010ba <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	2220      	movs	r2, #32
 80010ac:	4313      	orrs	r3, r2
 80010ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80010b0:	2327      	movs	r3, #39	; 0x27
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]

              break;
 80010b8:	e00b      	b.n	80010d2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	2220      	movs	r2, #32
 80010c2:	4013      	ands	r3, r2
 80010c4:	2127      	movs	r1, #39	; 0x27
 80010c6:	187a      	adds	r2, r7, r1
 80010c8:	1879      	adds	r1, r7, r1
 80010ca:	7809      	ldrb	r1, [r1, #0]
 80010cc:	7011      	strb	r1, [r2, #0]
 80010ce:	2b20      	cmp	r3, #32
 80010d0:	d1e3      	bne.n	800109a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	2220      	movs	r2, #32
 80010da:	4013      	ands	r3, r2
 80010dc:	2b20      	cmp	r3, #32
 80010de:	d004      	beq.n	80010ea <I2C_IsErrorOccurred+0x112>
 80010e0:	2327      	movs	r3, #39	; 0x27
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d092      	beq.n	8001010 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80010ea:	2327      	movs	r3, #39	; 0x27
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d103      	bne.n	80010fc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2220      	movs	r2, #32
 80010fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	2204      	movs	r2, #4
 8001100:	4313      	orrs	r3, r2
 8001102:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001104:	2327      	movs	r3, #39	; 0x27
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4013      	ands	r3, r2
 800111c:	d00c      	beq.n	8001138 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	2201      	movs	r2, #1
 8001122:	4313      	orrs	r3, r2
 8001124:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	0052      	lsls	r2, r2, #1
 800112e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001130:	2327      	movs	r3, #39	; 0x27
 8001132:	18fb      	adds	r3, r7, r3
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4013      	ands	r3, r2
 8001140:	d00c      	beq.n	800115c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	2208      	movs	r2, #8
 8001146:	4313      	orrs	r3, r2
 8001148:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2280      	movs	r2, #128	; 0x80
 8001150:	00d2      	lsls	r2, r2, #3
 8001152:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001154:	2327      	movs	r3, #39	; 0x27
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4013      	ands	r3, r2
 8001164:	d00c      	beq.n	8001180 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001166:	6a3b      	ldr	r3, [r7, #32]
 8001168:	2202      	movs	r2, #2
 800116a:	4313      	orrs	r3, r2
 800116c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001178:	2327      	movs	r3, #39	; 0x27
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001180:	2327      	movs	r3, #39	; 0x27
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d01d      	beq.n	80011c6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	0018      	movs	r0, r3
 800118e:	f7ff fe47 	bl	8000e20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	490d      	ldr	r1, [pc, #52]	; (80011d4 <I2C_IsErrorOccurred+0x1fc>)
 800119e:	400a      	ands	r2, r1
 80011a0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2241      	movs	r2, #65	; 0x41
 80011b2:	2120      	movs	r1, #32
 80011b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2242      	movs	r2, #66	; 0x42
 80011ba:	2100      	movs	r1, #0
 80011bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2240      	movs	r2, #64	; 0x40
 80011c2:	2100      	movs	r1, #0
 80011c4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80011c6:	2327      	movs	r3, #39	; 0x27
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	781b      	ldrb	r3, [r3, #0]
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b00b      	add	sp, #44	; 0x2c
 80011d2:	bd90      	pop	{r4, r7, pc}
 80011d4:	fe00e800 	.word	0xfe00e800

080011d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	0008      	movs	r0, r1
 80011e2:	0011      	movs	r1, r2
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	240a      	movs	r4, #10
 80011e8:	193b      	adds	r3, r7, r4
 80011ea:	1c02      	adds	r2, r0, #0
 80011ec:	801a      	strh	r2, [r3, #0]
 80011ee:	2009      	movs	r0, #9
 80011f0:	183b      	adds	r3, r7, r0
 80011f2:	1c0a      	adds	r2, r1, #0
 80011f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80011f6:	193b      	adds	r3, r7, r4
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	059b      	lsls	r3, r3, #22
 80011fc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80011fe:	183b      	adds	r3, r7, r0
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	0419      	lsls	r1, r3, #16
 8001204:	23ff      	movs	r3, #255	; 0xff
 8001206:	041b      	lsls	r3, r3, #16
 8001208:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800120a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001212:	4313      	orrs	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	085b      	lsrs	r3, r3, #1
 8001218:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001222:	0d51      	lsrs	r1, r2, #21
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	00d2      	lsls	r2, r2, #3
 8001228:	400a      	ands	r2, r1
 800122a:	4907      	ldr	r1, [pc, #28]	; (8001248 <I2C_TransferConfig+0x70>)
 800122c:	430a      	orrs	r2, r1
 800122e:	43d2      	mvns	r2, r2
 8001230:	401a      	ands	r2, r3
 8001232:	0011      	movs	r1, r2
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	430a      	orrs	r2, r1
 800123c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b007      	add	sp, #28
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	03ff63ff 	.word	0x03ff63ff

0800124c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2241      	movs	r2, #65	; 0x41
 800125a:	5c9b      	ldrb	r3, [r3, r2]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b20      	cmp	r3, #32
 8001260:	d138      	bne.n	80012d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2240      	movs	r2, #64	; 0x40
 8001266:	5c9b      	ldrb	r3, [r3, r2]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800126c:	2302      	movs	r3, #2
 800126e:	e032      	b.n	80012d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2240      	movs	r2, #64	; 0x40
 8001274:	2101      	movs	r1, #1
 8001276:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2241      	movs	r2, #65	; 0x41
 800127c:	2124      	movs	r1, #36	; 0x24
 800127e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2101      	movs	r1, #1
 800128c:	438a      	bics	r2, r1
 800128e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4911      	ldr	r1, [pc, #68]	; (80012e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800129c:	400a      	ands	r2, r1
 800129e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2101      	movs	r1, #1
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2241      	movs	r2, #65	; 0x41
 80012c4:	2120      	movs	r1, #32
 80012c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2240      	movs	r2, #64	; 0x40
 80012cc:	2100      	movs	r1, #0
 80012ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	e000      	b.n	80012d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012d4:	2302      	movs	r3, #2
  }
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	ffffefff 	.word	0xffffefff

080012e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2241      	movs	r2, #65	; 0x41
 80012f2:	5c9b      	ldrb	r3, [r3, r2]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d139      	bne.n	800136e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2240      	movs	r2, #64	; 0x40
 80012fe:	5c9b      	ldrb	r3, [r3, r2]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001304:	2302      	movs	r3, #2
 8001306:	e033      	b.n	8001370 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2240      	movs	r2, #64	; 0x40
 800130c:	2101      	movs	r1, #1
 800130e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2241      	movs	r2, #65	; 0x41
 8001314:	2124      	movs	r1, #36	; 0x24
 8001316:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2101      	movs	r1, #1
 8001324:	438a      	bics	r2, r1
 8001326:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001334:	4013      	ands	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2101      	movs	r1, #1
 8001356:	430a      	orrs	r2, r1
 8001358:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2241      	movs	r2, #65	; 0x41
 800135e:	2120      	movs	r1, #32
 8001360:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2240      	movs	r2, #64	; 0x40
 8001366:	2100      	movs	r1, #0
 8001368:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800136e:	2302      	movs	r3, #2
  }
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b004      	add	sp, #16
 8001376:	bd80      	pop	{r7, pc}
 8001378:	fffff0ff 	.word	0xfffff0ff

0800137c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800138a:	4013      	ands	r3, r2
 800138c:	0019      	movs	r1, r3
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	430a      	orrs	r2, r1
 8001394:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	429a      	cmp	r2, r3
 800139e:	d11f      	bne.n	80013e0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	0013      	movs	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	189b      	adds	r3, r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4912      	ldr	r1, [pc, #72]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7fe fea8 	bl	8000104 <__udivsi3>
 80013b4:	0003      	movs	r3, r0
 80013b6:	3301      	adds	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ba:	e008      	b.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e001      	b.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e009      	b.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	401a      	ands	r2, r3
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	429a      	cmp	r2, r3
 80013de:	d0ed      	beq.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	40007000 	.word	0x40007000
 80013f0:	fffff9ff 	.word	0xfffff9ff
 80013f4:	20000000 	.word	0x20000000
 80013f8:	000f4240 	.word	0x000f4240

080013fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e2fe      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2201      	movs	r2, #1
 8001414:	4013      	ands	r3, r2
 8001416:	d100      	bne.n	800141a <HAL_RCC_OscConfig+0x1e>
 8001418:	e07c      	b.n	8001514 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141a:	4bc3      	ldr	r3, [pc, #780]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2238      	movs	r2, #56	; 0x38
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001424:	4bc0      	ldr	r3, [pc, #768]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2203      	movs	r2, #3
 800142a:	4013      	ands	r3, r2
 800142c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	2b10      	cmp	r3, #16
 8001432:	d102      	bne.n	800143a <HAL_RCC_OscConfig+0x3e>
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d002      	beq.n	8001440 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2b08      	cmp	r3, #8
 800143e:	d10b      	bne.n	8001458 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	4bb9      	ldr	r3, [pc, #740]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	029b      	lsls	r3, r3, #10
 8001448:	4013      	ands	r3, r2
 800144a:	d062      	beq.n	8001512 <HAL_RCC_OscConfig+0x116>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d15e      	bne.n	8001512 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e2d9      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	025b      	lsls	r3, r3, #9
 8001460:	429a      	cmp	r2, r3
 8001462:	d107      	bne.n	8001474 <HAL_RCC_OscConfig+0x78>
 8001464:	4bb0      	ldr	r3, [pc, #704]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4baf      	ldr	r3, [pc, #700]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	0249      	lsls	r1, r1, #9
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e020      	b.n	80014b6 <HAL_RCC_OscConfig+0xba>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	23a0      	movs	r3, #160	; 0xa0
 800147a:	02db      	lsls	r3, r3, #11
 800147c:	429a      	cmp	r2, r3
 800147e:	d10e      	bne.n	800149e <HAL_RCC_OscConfig+0xa2>
 8001480:	4ba9      	ldr	r3, [pc, #676]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4ba8      	ldr	r3, [pc, #672]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	02c9      	lsls	r1, r1, #11
 800148a:	430a      	orrs	r2, r1
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	4ba6      	ldr	r3, [pc, #664]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4ba5      	ldr	r3, [pc, #660]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	0249      	lsls	r1, r1, #9
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e00b      	b.n	80014b6 <HAL_RCC_OscConfig+0xba>
 800149e:	4ba2      	ldr	r3, [pc, #648]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4ba1      	ldr	r3, [pc, #644]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80014a4:	49a1      	ldr	r1, [pc, #644]	; (800172c <HAL_RCC_OscConfig+0x330>)
 80014a6:	400a      	ands	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	4b9f      	ldr	r3, [pc, #636]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b9e      	ldr	r3, [pc, #632]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80014b0:	499f      	ldr	r1, [pc, #636]	; (8001730 <HAL_RCC_OscConfig+0x334>)
 80014b2:	400a      	ands	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d014      	beq.n	80014e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014be:	f7ff f8cb 	bl	8000658 <HAL_GetTick>
 80014c2:	0003      	movs	r3, r0
 80014c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff f8c6 	bl	8000658 <HAL_GetTick>
 80014cc:	0002      	movs	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e298      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014da:	4b93      	ldr	r3, [pc, #588]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	029b      	lsls	r3, r3, #10
 80014e2:	4013      	ands	r3, r2
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0xcc>
 80014e6:	e015      	b.n	8001514 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff f8b6 	bl	8000658 <HAL_GetTick>
 80014ec:	0003      	movs	r3, r0
 80014ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f2:	f7ff f8b1 	bl	8000658 <HAL_GetTick>
 80014f6:	0002      	movs	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b64      	cmp	r3, #100	; 0x64
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e283      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001504:	4b88      	ldr	r3, [pc, #544]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	029b      	lsls	r3, r3, #10
 800150c:	4013      	ands	r3, r2
 800150e:	d1f0      	bne.n	80014f2 <HAL_RCC_OscConfig+0xf6>
 8001510:	e000      	b.n	8001514 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001512:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2202      	movs	r2, #2
 800151a:	4013      	ands	r3, r2
 800151c:	d100      	bne.n	8001520 <HAL_RCC_OscConfig+0x124>
 800151e:	e099      	b.n	8001654 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001520:	4b81      	ldr	r3, [pc, #516]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2238      	movs	r2, #56	; 0x38
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800152a:	4b7f      	ldr	r3, [pc, #508]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2203      	movs	r2, #3
 8001530:	4013      	ands	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2b10      	cmp	r3, #16
 8001538:	d102      	bne.n	8001540 <HAL_RCC_OscConfig+0x144>
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d002      	beq.n	8001546 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d135      	bne.n	80015b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001546:	4b78      	ldr	r3, [pc, #480]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4013      	ands	r3, r2
 8001550:	d005      	beq.n	800155e <HAL_RCC_OscConfig+0x162>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e256      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b72      	ldr	r3, [pc, #456]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a74      	ldr	r2, [pc, #464]	; (8001734 <HAL_RCC_OscConfig+0x338>)
 8001564:	4013      	ands	r3, r2
 8001566:	0019      	movs	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	021a      	lsls	r2, r3, #8
 800156e:	4b6e      	ldr	r3, [pc, #440]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001570:	430a      	orrs	r2, r1
 8001572:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d112      	bne.n	80015a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800157a:	4b6b      	ldr	r3, [pc, #428]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a6e      	ldr	r2, [pc, #440]	; (8001738 <HAL_RCC_OscConfig+0x33c>)
 8001580:	4013      	ands	r3, r2
 8001582:	0019      	movs	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	4b67      	ldr	r3, [pc, #412]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800158e:	4b66      	ldr	r3, [pc, #408]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	0adb      	lsrs	r3, r3, #11
 8001594:	2207      	movs	r2, #7
 8001596:	4013      	ands	r3, r2
 8001598:	4a68      	ldr	r2, [pc, #416]	; (800173c <HAL_RCC_OscConfig+0x340>)
 800159a:	40da      	lsrs	r2, r3
 800159c:	4b68      	ldr	r3, [pc, #416]	; (8001740 <HAL_RCC_OscConfig+0x344>)
 800159e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015a0:	4b68      	ldr	r3, [pc, #416]	; (8001744 <HAL_RCC_OscConfig+0x348>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7fe fffb 	bl	80005a0 <HAL_InitTick>
 80015aa:	1e03      	subs	r3, r0, #0
 80015ac:	d051      	beq.n	8001652 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e22c      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d030      	beq.n	800161c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015ba:	4b5b      	ldr	r3, [pc, #364]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a5e      	ldr	r2, [pc, #376]	; (8001738 <HAL_RCC_OscConfig+0x33c>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	0019      	movs	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	4b57      	ldr	r3, [pc, #348]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	430a      	orrs	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80015ce:	4b56      	ldr	r3, [pc, #344]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b55      	ldr	r3, [pc, #340]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	0049      	lsls	r1, r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff f83c 	bl	8000658 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff f837 	bl	8000658 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e209      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f8:	4b4b      	ldr	r3, [pc, #300]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4013      	ands	r3, r2
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b48      	ldr	r3, [pc, #288]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a4a      	ldr	r2, [pc, #296]	; (8001734 <HAL_RCC_OscConfig+0x338>)
 800160a:	4013      	ands	r3, r2
 800160c:	0019      	movs	r1, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	021a      	lsls	r2, r3, #8
 8001614:	4b44      	ldr	r3, [pc, #272]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001616:	430a      	orrs	r2, r1
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	e01b      	b.n	8001654 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800161c:	4b42      	ldr	r3, [pc, #264]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b41      	ldr	r3, [pc, #260]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001622:	4949      	ldr	r1, [pc, #292]	; (8001748 <HAL_RCC_OscConfig+0x34c>)
 8001624:	400a      	ands	r2, r1
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff f816 	bl	8000658 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff f811 	bl	8000658 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1e3      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001644:	4b38      	ldr	r3, [pc, #224]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4013      	ands	r3, r2
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x236>
 8001650:	e000      	b.n	8001654 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001652:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2208      	movs	r2, #8
 800165a:	4013      	ands	r3, r2
 800165c:	d047      	beq.n	80016ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800165e:	4b32      	ldr	r3, [pc, #200]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2238      	movs	r2, #56	; 0x38
 8001664:	4013      	ands	r3, r2
 8001666:	2b18      	cmp	r3, #24
 8001668:	d10a      	bne.n	8001680 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800166a:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166e:	2202      	movs	r2, #2
 8001670:	4013      	ands	r3, r2
 8001672:	d03c      	beq.n	80016ee <HAL_RCC_OscConfig+0x2f2>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d138      	bne.n	80016ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e1c5      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d019      	beq.n	80016bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001688:	4b27      	ldr	r3, [pc, #156]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 800168a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 800168e:	2101      	movs	r1, #1
 8001690:	430a      	orrs	r2, r1
 8001692:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7fe ffe0 	bl	8000658 <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169e:	f7fe ffdb 	bl	8000658 <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e1ad      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80016b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b4:	2202      	movs	r2, #2
 80016b6:	4013      	ands	r3, r2
 80016b8:	d0f1      	beq.n	800169e <HAL_RCC_OscConfig+0x2a2>
 80016ba:	e018      	b.n	80016ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80016be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	438a      	bics	r2, r1
 80016c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7fe ffc6 	bl	8000658 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d2:	f7fe ffc1 	bl	8000658 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e193      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 80016e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e8:	2202      	movs	r2, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	d1f1      	bne.n	80016d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2204      	movs	r2, #4
 80016f4:	4013      	ands	r3, r2
 80016f6:	d100      	bne.n	80016fa <HAL_RCC_OscConfig+0x2fe>
 80016f8:	e0c6      	b.n	8001888 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fa:	231f      	movs	r3, #31
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2238      	movs	r2, #56	; 0x38
 8001708:	4013      	ands	r3, r2
 800170a:	2b20      	cmp	r3, #32
 800170c:	d11e      	bne.n	800174c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_RCC_OscConfig+0x32c>)
 8001710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001712:	2202      	movs	r2, #2
 8001714:	4013      	ands	r3, r2
 8001716:	d100      	bne.n	800171a <HAL_RCC_OscConfig+0x31e>
 8001718:	e0b6      	b.n	8001888 <HAL_RCC_OscConfig+0x48c>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d000      	beq.n	8001724 <HAL_RCC_OscConfig+0x328>
 8001722:	e0b1      	b.n	8001888 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e171      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
 8001728:	40021000 	.word	0x40021000
 800172c:	fffeffff 	.word	0xfffeffff
 8001730:	fffbffff 	.word	0xfffbffff
 8001734:	ffff80ff 	.word	0xffff80ff
 8001738:	ffffc7ff 	.word	0xffffc7ff
 800173c:	00f42400 	.word	0x00f42400
 8001740:	20000000 	.word	0x20000000
 8001744:	20000004 	.word	0x20000004
 8001748:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800174c:	4bb1      	ldr	r3, [pc, #708]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 800174e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	055b      	lsls	r3, r3, #21
 8001754:	4013      	ands	r3, r2
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x360>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x362>
 800175c:	2300      	movs	r3, #0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d011      	beq.n	8001786 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4bac      	ldr	r3, [pc, #688]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001766:	4bab      	ldr	r3, [pc, #684]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	0549      	lsls	r1, r1, #21
 800176c:	430a      	orrs	r2, r1
 800176e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001770:	4ba8      	ldr	r3, [pc, #672]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	055b      	lsls	r3, r3, #21
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800177e:	231f      	movs	r3, #31
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001786:	4ba4      	ldr	r3, [pc, #656]	; (8001a18 <HAL_RCC_OscConfig+0x61c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4013      	ands	r3, r2
 8001790:	d11a      	bne.n	80017c8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001792:	4ba1      	ldr	r3, [pc, #644]	; (8001a18 <HAL_RCC_OscConfig+0x61c>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4ba0      	ldr	r3, [pc, #640]	; (8001a18 <HAL_RCC_OscConfig+0x61c>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0049      	lsls	r1, r1, #1
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80017a0:	f7fe ff5a 	bl	8000658 <HAL_GetTick>
 80017a4:	0003      	movs	r3, r0
 80017a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017aa:	f7fe ff55 	bl	8000658 <HAL_GetTick>
 80017ae:	0002      	movs	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e127      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017bc:	4b96      	ldr	r3, [pc, #600]	; (8001a18 <HAL_RCC_OscConfig+0x61c>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x3e2>
 80017d0:	4b90      	ldr	r3, [pc, #576]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 80017d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017d4:	4b8f      	ldr	r3, [pc, #572]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	430a      	orrs	r2, r1
 80017da:	65da      	str	r2, [r3, #92]	; 0x5c
 80017dc:	e01c      	b.n	8001818 <HAL_RCC_OscConfig+0x41c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x404>
 80017e6:	4b8b      	ldr	r3, [pc, #556]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 80017e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017ea:	4b8a      	ldr	r3, [pc, #552]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 80017ec:	2104      	movs	r1, #4
 80017ee:	430a      	orrs	r2, r1
 80017f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80017f2:	4b88      	ldr	r3, [pc, #544]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 80017f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017f6:	4b87      	ldr	r3, [pc, #540]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	430a      	orrs	r2, r1
 80017fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0x41c>
 8001800:	4b84      	ldr	r3, [pc, #528]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001802:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001804:	4b83      	ldr	r3, [pc, #524]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001806:	2101      	movs	r1, #1
 8001808:	438a      	bics	r2, r1
 800180a:	65da      	str	r2, [r3, #92]	; 0x5c
 800180c:	4b81      	ldr	r3, [pc, #516]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 800180e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001810:	4b80      	ldr	r3, [pc, #512]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001812:	2104      	movs	r1, #4
 8001814:	438a      	bics	r2, r1
 8001816:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d014      	beq.n	800184a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7fe ff1a 	bl	8000658 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001828:	e009      	b.n	800183e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7fe ff15 	bl	8000658 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	4a79      	ldr	r2, [pc, #484]	; (8001a1c <HAL_RCC_OscConfig+0x620>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e0e6      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183e:	4b75      	ldr	r3, [pc, #468]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2202      	movs	r2, #2
 8001844:	4013      	ands	r3, r2
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x42e>
 8001848:	e013      	b.n	8001872 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7fe ff05 	bl	8000658 <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001852:	e009      	b.n	8001868 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7fe ff00 	bl	8000658 <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	4a6f      	ldr	r2, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0x620>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0d1      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001868:	4b6a      	ldr	r3, [pc, #424]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 800186a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186c:	2202      	movs	r2, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001872:	231f      	movs	r3, #31
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800187c:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 800187e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001880:	4b64      	ldr	r3, [pc, #400]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001882:	4967      	ldr	r1, [pc, #412]	; (8001a20 <HAL_RCC_OscConfig+0x624>)
 8001884:	400a      	ands	r2, r1
 8001886:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d100      	bne.n	8001892 <HAL_RCC_OscConfig+0x496>
 8001890:	e0bb      	b.n	8001a0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001892:	4b60      	ldr	r3, [pc, #384]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2238      	movs	r2, #56	; 0x38
 8001898:	4013      	ands	r3, r2
 800189a:	2b10      	cmp	r3, #16
 800189c:	d100      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4a4>
 800189e:	e07b      	b.n	8001998 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d156      	bne.n	8001956 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a8:	4b5a      	ldr	r3, [pc, #360]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b59      	ldr	r3, [pc, #356]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 80018ae:	495d      	ldr	r1, [pc, #372]	; (8001a24 <HAL_RCC_OscConfig+0x628>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7fe fed0 	bl	8000658 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7fe fecb 	bl	8000658 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e09d      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	049b      	lsls	r3, r3, #18
 80018d8:	4013      	ands	r3, r2
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018dc:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4a51      	ldr	r2, [pc, #324]	; (8001a28 <HAL_RCC_OscConfig+0x62c>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1a      	ldr	r2, [r3, #32]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	431a      	orrs	r2, r3
 800190a:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 800190c:	430a      	orrs	r2, r1
 800190e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001910:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	0449      	lsls	r1, r1, #17
 800191a:	430a      	orrs	r2, r1
 800191c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0549      	lsls	r1, r1, #21
 8001928:	430a      	orrs	r2, r1
 800192a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7fe fe94 	bl	8000658 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001936:	f7fe fe8f 	bl	8000658 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e061      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001948:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	049b      	lsls	r3, r3, #18
 8001950:	4013      	ands	r3, r2
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x53a>
 8001954:	e059      	b.n	8001a0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 800195c:	4931      	ldr	r1, [pc, #196]	; (8001a24 <HAL_RCC_OscConfig+0x628>)
 800195e:	400a      	ands	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001962:	f7fe fe79 	bl	8000658 <HAL_GetTick>
 8001966:	0003      	movs	r3, r0
 8001968:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7fe fe74 	bl	8000658 <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e046      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197e:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	049b      	lsls	r3, r3, #18
 8001986:	4013      	ands	r3, r2
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 8001990:	4926      	ldr	r1, [pc, #152]	; (8001a2c <HAL_RCC_OscConfig+0x630>)
 8001992:	400a      	ands	r2, r1
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	e038      	b.n	8001a0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e033      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x618>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2203      	movs	r2, #3
 80019ae:	401a      	ands	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d126      	bne.n	8001a06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2270      	movs	r2, #112	; 0x70
 80019bc:	401a      	ands	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d11f      	bne.n	8001a06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	23fe      	movs	r3, #254	; 0xfe
 80019ca:	01db      	lsls	r3, r3, #7
 80019cc:	401a      	ands	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d116      	bne.n	8001a06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	23f8      	movs	r3, #248	; 0xf8
 80019dc:	039b      	lsls	r3, r3, #14
 80019de:	401a      	ands	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d10e      	bne.n	8001a06 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	23e0      	movs	r3, #224	; 0xe0
 80019ec:	051b      	lsls	r3, r3, #20
 80019ee:	401a      	ands	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	0f5b      	lsrs	r3, r3, #29
 80019fc:	075a      	lsls	r2, r3, #29
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b008      	add	sp, #32
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40007000 	.word	0x40007000
 8001a1c:	00001388 	.word	0x00001388
 8001a20:	efffffff 	.word	0xefffffff
 8001a24:	feffffff 	.word	0xfeffffff
 8001a28:	11c1808c 	.word	0x11c1808c
 8001a2c:	eefefffc 	.word	0xeefefffc

08001a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0e9      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2207      	movs	r2, #7
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d91e      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2207      	movs	r2, #7
 8001a58:	4393      	bics	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a64:	f7fe fdf8 	bl	8000658 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a6c:	e009      	b.n	8001a82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6e:	f7fe fdf3 	bl	8000658 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	4a6a      	ldr	r2, [pc, #424]	; (8001c24 <HAL_RCC_ClockConfig+0x1f4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0ca      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a82:	4b67      	ldr	r3, [pc, #412]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2207      	movs	r2, #7
 8001a88:	4013      	ands	r3, r2
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1ee      	bne.n	8001a6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2202      	movs	r2, #2
 8001a96:	4013      	ands	r3, r2
 8001a98:	d015      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d006      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001aa4:	4b60      	ldr	r3, [pc, #384]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	4b5f      	ldr	r3, [pc, #380]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001aaa:	21e0      	movs	r1, #224	; 0xe0
 8001aac:	01c9      	lsls	r1, r1, #7
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab2:	4b5d      	ldr	r3, [pc, #372]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	4a5d      	ldr	r2, [pc, #372]	; (8001c2c <HAL_RCC_ClockConfig+0x1fc>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2201      	movs	r2, #1
 8001acc:	4013      	ands	r3, r2
 8001ace:	d057      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	029b      	lsls	r3, r3, #10
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d12b      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e097      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af0:	4b4d      	ldr	r3, [pc, #308]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	049b      	lsls	r3, r3, #18
 8001af8:	4013      	ands	r3, r2
 8001afa:	d11f      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e08b      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4013      	ands	r3, r2
 8001b12:	d113      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e07f      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b20:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b24:	2202      	movs	r2, #2
 8001b26:	4013      	ands	r3, r2
 8001b28:	d108      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e074      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b2e:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b32:	2202      	movs	r2, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e06d      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b3c:	4b3a      	ldr	r3, [pc, #232]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2207      	movs	r2, #7
 8001b42:	4393      	bics	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4b37      	ldr	r3, [pc, #220]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b50:	f7fe fd82 	bl	8000658 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b58:	e009      	b.n	8001b6e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5a:	f7fe fd7d 	bl	8000658 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	4a2f      	ldr	r2, [pc, #188]	; (8001c24 <HAL_RCC_ClockConfig+0x1f4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e054      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2238      	movs	r2, #56	; 0x38
 8001b74:	401a      	ands	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1ec      	bne.n	8001b5a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2207      	movs	r2, #7
 8001b86:	4013      	ands	r3, r2
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d21e      	bcs.n	8001bcc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2207      	movs	r2, #7
 8001b94:	4393      	bics	r3, r2
 8001b96:	0019      	movs	r1, r3
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ba0:	f7fe fd5a 	bl	8000658 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ba8:	e009      	b.n	8001bbe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001baa:	f7fe fd55 	bl	8000658 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_RCC_ClockConfig+0x1f4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e02c      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1ee      	bne.n	8001baa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d009      	beq.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <HAL_RCC_ClockConfig+0x200>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001be6:	430a      	orrs	r2, r1
 8001be8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bea:	f000 f829 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8001bee:	0001      	movs	r1, r0
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_RCC_ClockConfig+0x204>)
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	58d3      	ldr	r3, [r2, r3]
 8001c00:	221f      	movs	r2, #31
 8001c02:	4013      	ands	r3, r2
 8001c04:	000a      	movs	r2, r1
 8001c06:	40da      	lsrs	r2, r3
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_RCC_ClockConfig+0x208>)
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_ClockConfig+0x20c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7fe fcc5 	bl	80005a0 <HAL_InitTick>
 8001c16:	0003      	movs	r3, r0
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b004      	add	sp, #16
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40022000 	.word	0x40022000
 8001c24:	00001388 	.word	0x00001388
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	fffff0ff 	.word	0xfffff0ff
 8001c30:	ffff8fff 	.word	0xffff8fff
 8001c34:	080020b0 	.word	0x080020b0
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c46:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2238      	movs	r2, #56	; 0x38
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d10f      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c50:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0adb      	lsrs	r3, r3, #11
 8001c56:	2207      	movs	r2, #7
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	0013      	movs	r3, r2
 8001c60:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c62:	6839      	ldr	r1, [r7, #0]
 8001c64:	4835      	ldr	r0, [pc, #212]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c66:	f7fe fa4d 	bl	8000104 <__udivsi3>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	e05d      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c70:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2238      	movs	r2, #56	; 0x38
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d102      	bne.n	8001c82 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c7c:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	e054      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c82:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2238      	movs	r2, #56	; 0x38
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d138      	bne.n	8001d00 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2203      	movs	r2, #3
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d10d      	bne.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	4824      	ldr	r0, [pc, #144]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x100>)
 8001cb0:	f7fe fa28 	bl	8000104 <__udivsi3>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	227f      	movs	r2, #127	; 0x7f
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	434b      	muls	r3, r1
 8001cc4:	617b      	str	r3, [r7, #20]
        break;
 8001cc6:	e00d      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	481c      	ldr	r0, [pc, #112]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ccc:	f7fe fa1a 	bl	8000104 <__udivsi3>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	227f      	movs	r2, #127	; 0x7f
 8001cdc:	4013      	ands	r3, r2
 8001cde:	434b      	muls	r3, r1
 8001ce0:	617b      	str	r3, [r7, #20]
        break;
 8001ce2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0f5b      	lsrs	r3, r3, #29
 8001cea:	2207      	movs	r2, #7
 8001cec:	4013      	ands	r3, r2
 8001cee:	3301      	adds	r3, #1
 8001cf0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	6978      	ldr	r0, [r7, #20]
 8001cf6:	f7fe fa05 	bl	8000104 <__udivsi3>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	e015      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2238      	movs	r2, #56	; 0x38
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	d103      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2238      	movs	r2, #56	; 0x38
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b18      	cmp	r3, #24
 8001d1e:	d103      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d20:	23fa      	movs	r3, #250	; 0xfa
 8001d22:	01db      	lsls	r3, r3, #7
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	e001      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d2c:	693b      	ldr	r3, [r7, #16]
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b006      	add	sp, #24
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	00f42400 	.word	0x00f42400
 8001d40:	007a1200 	.word	0x007a1200

08001d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d4c:	2313      	movs	r3, #19
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d54:	2312      	movs	r3, #18
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	029b      	lsls	r3, r3, #10
 8001d64:	4013      	ands	r3, r2
 8001d66:	d100      	bne.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d68:	e0a3      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6a:	2011      	movs	r0, #17
 8001d6c:	183b      	adds	r3, r7, r0
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d72:	4ba5      	ldr	r3, [pc, #660]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	055b      	lsls	r3, r3, #21
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d110      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4ba2      	ldr	r3, [pc, #648]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d82:	4ba1      	ldr	r3, [pc, #644]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	0549      	lsls	r1, r1, #21
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d8c:	4b9e      	ldr	r3, [pc, #632]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	055b      	lsls	r3, r3, #21
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9a:	183b      	adds	r3, r7, r0
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da0:	4b9a      	ldr	r3, [pc, #616]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b99      	ldr	r3, [pc, #612]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	0049      	lsls	r1, r1, #1
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dae:	f7fe fc53 	bl	8000658 <HAL_GetTick>
 8001db2:	0003      	movs	r3, r0
 8001db4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db8:	f7fe fc4e 	bl	8000658 <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d904      	bls.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001dc6:	2313      	movs	r3, #19
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	2203      	movs	r2, #3
 8001dcc:	701a      	strb	r2, [r3, #0]
        break;
 8001dce:	e005      	b.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dd0:	4b8e      	ldr	r3, [pc, #568]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d0ed      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ddc:	2313      	movs	r3, #19
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d154      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001de6:	4b88      	ldr	r3, [pc, #544]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001de8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dea:	23c0      	movs	r3, #192	; 0xc0
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d019      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d014      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e02:	4b81      	ldr	r3, [pc, #516]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	4a82      	ldr	r2, [pc, #520]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e0c:	4b7e      	ldr	r3, [pc, #504]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e10:	4b7d      	ldr	r3, [pc, #500]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	0249      	lsls	r1, r1, #9
 8001e16:	430a      	orrs	r2, r1
 8001e18:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e1a:	4b7b      	ldr	r3, [pc, #492]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e1e:	4b7a      	ldr	r3, [pc, #488]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e20:	497c      	ldr	r1, [pc, #496]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001e22:	400a      	ands	r2, r1
 8001e24:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e26:	4b78      	ldr	r3, [pc, #480]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4013      	ands	r3, r2
 8001e32:	d016      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7fe fc10 	bl	8000658 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e3c:	e00c      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7fe fc0b 	bl	8000658 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	4a73      	ldr	r2, [pc, #460]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d904      	bls.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e4e:	2313      	movs	r3, #19
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	2203      	movs	r2, #3
 8001e54:	701a      	strb	r2, [r3, #0]
            break;
 8001e56:	e004      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e58:	4b6b      	ldr	r3, [pc, #428]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d0ed      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e62:	2313      	movs	r3, #19
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10a      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e6c:	4b66      	ldr	r3, [pc, #408]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	4a67      	ldr	r2, [pc, #412]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e7a:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e80:	e00c      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e82:	2312      	movs	r3, #18
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	2213      	movs	r2, #19
 8001e88:	18ba      	adds	r2, r7, r2
 8001e8a:	7812      	ldrb	r2, [r2, #0]
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e005      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e90:	2312      	movs	r3, #18
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2213      	movs	r2, #19
 8001e96:	18ba      	adds	r2, r7, r2
 8001e98:	7812      	ldrb	r2, [r2, #0]
 8001e9a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e9c:	2311      	movs	r3, #17
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4b58      	ldr	r3, [pc, #352]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eaa:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001eac:	495b      	ldr	r1, [pc, #364]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001eae:	400a      	ands	r2, r1
 8001eb0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d009      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ebc:	4b52      	ldr	r3, [pc, #328]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	4393      	bics	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4b4f      	ldr	r3, [pc, #316]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d009      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001eda:	4b4b      	ldr	r3, [pc, #300]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ede:	4a50      	ldr	r2, [pc, #320]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d009      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001efa:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efe:	4a49      	ldr	r2, [pc, #292]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4013      	ands	r3, r2
 8001f18:	d009      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1e:	4a42      	ldr	r2, [pc, #264]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	4b37      	ldr	r3, [pc, #220]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2220      	movs	r2, #32
 8001f34:	4013      	ands	r3, r2
 8001f36:	d009      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f38:	4b33      	ldr	r3, [pc, #204]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	4a3b      	ldr	r2, [pc, #236]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	4b30      	ldr	r3, [pc, #192]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	01db      	lsls	r3, r3, #7
 8001f54:	4013      	ands	r3, r2
 8001f56:	d015      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f58:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	0899      	lsrs	r1, r3, #2
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	4b28      	ldr	r3, [pc, #160]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f66:	430a      	orrs	r2, r1
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	05db      	lsls	r3, r3, #23
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d106      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	4b23      	ldr	r3, [pc, #140]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f7c:	2180      	movs	r1, #128	; 0x80
 8001f7e:	0249      	lsls	r1, r1, #9
 8001f80:	430a      	orrs	r2, r1
 8001f82:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	039b      	lsls	r3, r3, #14
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d016      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1a      	ldr	r2, [r3, #32]
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1a      	ldr	r2, [r3, #32]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	03db      	lsls	r3, r3, #15
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d106      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fb0:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	0449      	lsls	r1, r1, #17
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d016      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	4a19      	ldr	r2, [pc, #100]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	01db      	lsls	r3, r3, #7
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d106      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	0249      	lsls	r1, r1, #9
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001ff8:	2312      	movs	r3, #18
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	781b      	ldrb	r3, [r3, #0]
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b006      	add	sp, #24
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	40021000 	.word	0x40021000
 800200c:	40007000 	.word	0x40007000
 8002010:	fffffcff 	.word	0xfffffcff
 8002014:	fffeffff 	.word	0xfffeffff
 8002018:	00001388 	.word	0x00001388
 800201c:	efffffff 	.word	0xefffffff
 8002020:	fffff3ff 	.word	0xfffff3ff
 8002024:	fff3ffff 	.word	0xfff3ffff
 8002028:	ffcfffff 	.word	0xffcfffff
 800202c:	ffffcfff 	.word	0xffffcfff
 8002030:	ffbfffff 	.word	0xffbfffff
 8002034:	ffff3fff 	.word	0xffff3fff

08002038 <memset>:
 8002038:	0003      	movs	r3, r0
 800203a:	1882      	adds	r2, r0, r2
 800203c:	4293      	cmp	r3, r2
 800203e:	d100      	bne.n	8002042 <memset+0xa>
 8002040:	4770      	bx	lr
 8002042:	7019      	strb	r1, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	e7f9      	b.n	800203c <memset+0x4>

08002048 <__libc_init_array>:
 8002048:	b570      	push	{r4, r5, r6, lr}
 800204a:	2600      	movs	r6, #0
 800204c:	4c0c      	ldr	r4, [pc, #48]	; (8002080 <__libc_init_array+0x38>)
 800204e:	4d0d      	ldr	r5, [pc, #52]	; (8002084 <__libc_init_array+0x3c>)
 8002050:	1b64      	subs	r4, r4, r5
 8002052:	10a4      	asrs	r4, r4, #2
 8002054:	42a6      	cmp	r6, r4
 8002056:	d109      	bne.n	800206c <__libc_init_array+0x24>
 8002058:	2600      	movs	r6, #0
 800205a:	f000 f819 	bl	8002090 <_init>
 800205e:	4c0a      	ldr	r4, [pc, #40]	; (8002088 <__libc_init_array+0x40>)
 8002060:	4d0a      	ldr	r5, [pc, #40]	; (800208c <__libc_init_array+0x44>)
 8002062:	1b64      	subs	r4, r4, r5
 8002064:	10a4      	asrs	r4, r4, #2
 8002066:	42a6      	cmp	r6, r4
 8002068:	d105      	bne.n	8002076 <__libc_init_array+0x2e>
 800206a:	bd70      	pop	{r4, r5, r6, pc}
 800206c:	00b3      	lsls	r3, r6, #2
 800206e:	58eb      	ldr	r3, [r5, r3]
 8002070:	4798      	blx	r3
 8002072:	3601      	adds	r6, #1
 8002074:	e7ee      	b.n	8002054 <__libc_init_array+0xc>
 8002076:	00b3      	lsls	r3, r6, #2
 8002078:	58eb      	ldr	r3, [r5, r3]
 800207a:	4798      	blx	r3
 800207c:	3601      	adds	r6, #1
 800207e:	e7f2      	b.n	8002066 <__libc_init_array+0x1e>
 8002080:	080020f0 	.word	0x080020f0
 8002084:	080020f0 	.word	0x080020f0
 8002088:	080020f4 	.word	0x080020f4
 800208c:	080020f0 	.word	0x080020f0

08002090 <_init>:
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002096:	bc08      	pop	{r3}
 8002098:	469e      	mov	lr, r3
 800209a:	4770      	bx	lr

0800209c <_fini>:
 800209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020a2:	bc08      	pop	{r3}
 80020a4:	469e      	mov	lr, r3
 80020a6:	4770      	bx	lr
